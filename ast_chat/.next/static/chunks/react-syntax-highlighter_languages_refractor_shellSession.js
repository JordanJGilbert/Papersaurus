"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_shellSession"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/shell-session.js":
/*!******************************************************!*\
  !*** ./node_modules/refractor/lang/shell-session.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar refractorBash = __webpack_require__(/*! ./bash.js */ \"(app-pages-browser)/./node_modules/refractor/lang/bash.js\")\nmodule.exports = shellSession\nshellSession.displayName = 'shellSession'\nshellSession.aliases = []\nfunction shellSession(Prism) {\n  Prism.register(refractorBash)\n  ;(function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [\n      // normal string\n      /\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/.source,\n      /'[^']*'/.source,\n      /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/.source, // here doc\n      // 2 capturing groups\n      /<<-?\\s*([\"']?)(\\w+)\\1\\s[\\s\\S]*?[\\r\\n]\\2/.source\n    ].join('|')\n    Prism.languages['shell-session'] = {\n      command: {\n        pattern: RegExp(\n          // user info\n          /^/.source +\n            '(?:' + // <user> \":\" ( <path> )?\n            (/[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+(?::[^\\0-\\x1F$#%*?\"<>:;|]+)?/\n              .source +\n              '|' + // <path>\n              // Since the path pattern is quite general, we will require it to start with a special character to\n              // prevent false positives.\n              /[/~.][^\\0-\\x1F$#%*?\"<>@:;|]*/.source) +\n            ')?' + // shell symbol\n            /[$#%](?=\\s)/.source + // bash command\n            /(?:[^\\\\\\r\\n \\t'\"<$]|[ \\t](?:(?!#)|#.*$)|\\\\(?:[^\\r]|\\r\\n?)|\\$(?!')|<(?!<)|<<str>>)+/.source.replace(\n              /<<str>>/g,\n              function () {\n                return strings\n              }\n            ),\n          'm'\n        ),\n        greedy: true,\n        inside: {\n          info: {\n            // foo@bar:~/files$ exit\n            // foo@bar$ exit\n            // ~/files$ exit\n            pattern: /^[^#$%]+/,\n            alias: 'punctuation',\n            inside: {\n              user: /^[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+/,\n              punctuation: /:/,\n              path: /[\\s\\S]+/\n            }\n          },\n          bash: {\n            pattern: /(^[$#%]\\s*)\\S[\\s\\S]*/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#%]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    }\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] =\n      Prism.languages['shell-session']\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9zaGVsbC1zZXNzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1osb0JBQW9CLG1CQUFPLENBQUMsNEVBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc2hlbGwtc2Vzc2lvbi5qcz9hMDhkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3RvckJhc2ggPSByZXF1aXJlKCcuL2Jhc2guanMnKVxubW9kdWxlLmV4cG9ydHMgPSBzaGVsbFNlc3Npb25cbnNoZWxsU2Vzc2lvbi5kaXNwbGF5TmFtZSA9ICdzaGVsbFNlc3Npb24nXG5zaGVsbFNlc3Npb24uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBzaGVsbFNlc3Npb24oUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yQmFzaClcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICAvLyBDQVJFRlVMIVxuICAgIC8vIFRoZSBmb2xsb3dpbmcgcGF0dGVybnMgYXJlIGNvbmNhdGVuYXRlZCwgc28gdGhlIGdyb3VwIHJlZmVyZW5jZWQgYnkgYSBiYWNrIHJlZmVyZW5jZSBpcyBub24tb2J2aW91cyFcbiAgICB2YXIgc3RyaW5ncyA9IFtcbiAgICAgIC8vIG5vcm1hbCBzdHJpbmdcbiAgICAgIC9cIig/OlxcXFxbXFxzXFxTXXxcXCRcXChbXildK1xcKXxcXCQoPyFcXCgpfGBbXmBdK2B8W15cIlxcXFxgJF0pKlwiLy5zb3VyY2UsXG4gICAgICAvJ1teJ10qJy8uc291cmNlLFxuICAgICAgL1xcJCcoPzpbXidcXFxcXXxcXFxcW1xcc1xcU10pKicvLnNvdXJjZSwgLy8gaGVyZSBkb2NcbiAgICAgIC8vIDIgY2FwdHVyaW5nIGdyb3Vwc1xuICAgICAgLzw8LT9cXHMqKFtcIiddPykoXFx3KylcXDFcXHNbXFxzXFxTXSo/W1xcclxcbl1cXDIvLnNvdXJjZVxuICAgIF0uam9pbignfCcpXG4gICAgUHJpc20ubGFuZ3VhZ2VzWydzaGVsbC1zZXNzaW9uJ10gPSB7XG4gICAgICBjb21tYW5kOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAvLyB1c2VyIGluZm9cbiAgICAgICAgICAvXi8uc291cmNlICtcbiAgICAgICAgICAgICcoPzonICsgLy8gPHVzZXI+IFwiOlwiICggPHBhdGg+ICk/XG4gICAgICAgICAgICAoL1teXFxzQDokIyUqIS9cXFxcXStAW15cXHJcXG5AOiQjJSohL1xcXFxdKyg/OjpbXlxcMC1cXHgxRiQjJSo/XCI8Pjo7fF0rKT8vXG4gICAgICAgICAgICAgIC5zb3VyY2UgK1xuICAgICAgICAgICAgICAnfCcgKyAvLyA8cGF0aD5cbiAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIHBhdGggcGF0dGVybiBpcyBxdWl0ZSBnZW5lcmFsLCB3ZSB3aWxsIHJlcXVpcmUgaXQgdG8gc3RhcnQgd2l0aCBhIHNwZWNpYWwgY2hhcmFjdGVyIHRvXG4gICAgICAgICAgICAgIC8vIHByZXZlbnQgZmFsc2UgcG9zaXRpdmVzLlxuICAgICAgICAgICAgICAvWy9+Ll1bXlxcMC1cXHgxRiQjJSo/XCI8PkA6O3xdKi8uc291cmNlKSArXG4gICAgICAgICAgICAnKT8nICsgLy8gc2hlbGwgc3ltYm9sXG4gICAgICAgICAgICAvWyQjJV0oPz1cXHMpLy5zb3VyY2UgKyAvLyBiYXNoIGNvbW1hbmRcbiAgICAgICAgICAgIC8oPzpbXlxcXFxcXHJcXG4gXFx0J1wiPCRdfFsgXFx0XSg/Oig/ISMpfCMuKiQpfFxcXFwoPzpbXlxccl18XFxyXFxuPyl8XFwkKD8hJyl8PCg/ITwpfDw8c3RyPj4pKy8uc291cmNlLnJlcGxhY2UoXG4gICAgICAgICAgICAgIC88PHN0cj4+L2csXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICdtJ1xuICAgICAgICApLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgIC8vIGZvb0BiYXI6fi9maWxlcyQgZXhpdFxuICAgICAgICAgICAgLy8gZm9vQGJhciQgZXhpdFxuICAgICAgICAgICAgLy8gfi9maWxlcyQgZXhpdFxuICAgICAgICAgICAgcGF0dGVybjogL15bXiMkJV0rLyxcbiAgICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgIHVzZXI6IC9eW15cXHNAOiQjJSohL1xcXFxdK0BbXlxcclxcbkA6JCMlKiEvXFxcXF0rLyxcbiAgICAgICAgICAgICAgcHVuY3R1YXRpb246IC86LyxcbiAgICAgICAgICAgICAgcGF0aDogL1tcXHNcXFNdKy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGJhc2g6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oXlskIyVdXFxzKilcXFNbXFxzXFxTXSovLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UtYmFzaCcsXG4gICAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5iYXNoXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnc2hlbGwtc3ltYm9sJzoge1xuICAgICAgICAgICAgcGF0dGVybjogL15bJCMlXS8sXG4gICAgICAgICAgICBhbGlhczogJ2ltcG9ydGFudCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvdXRwdXQ6IC8uKD86LiooPzpbXFxyXFxuXXwuJCkpKi9cbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzWydzaC1zZXNzaW9uJ10gPSBQcmlzbS5sYW5ndWFnZXNbJ3NoZWxsc2Vzc2lvbiddID1cbiAgICAgIFByaXNtLmxhbmd1YWdlc1snc2hlbGwtc2Vzc2lvbiddXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/shell-session.js\n"));

/***/ })

}]);