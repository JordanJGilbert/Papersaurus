"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/previewExtractors.ts":
/*!************************************!*\
  !*** ./utils/previewExtractors.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractCodeDiffPreview: function() { return /* binding */ extractCodeDiffPreview; },\n/* harmony export */   extractCodePreview: function() { return /* binding */ extractCodePreview; },\n/* harmony export */   extractPreviewFromToolCall: function() { return /* binding */ extractPreviewFromToolCall; },\n/* harmony export */   extractWebAppPreview: function() { return /* binding */ extractWebAppPreview; },\n/* harmony export */   shouldExtractPreview: function() { return /* binding */ shouldExtractPreview; }\n/* harmony export */ });\n// Extract web app preview data from create_web_app or edit_web_app tool calls\nconst extractWebAppPreview = (toolCall)=>{\n    if (![\n        \"create_web_app\",\n        \"edit_web_app\"\n    ].includes(toolCall.name)) {\n        return null;\n    }\n    if (!toolCall.result || toolCall.is_error || toolCall.is_partial) {\n        return null;\n    }\n    try {\n        const result = JSON.parse(toolCall.result);\n        if (result.status === \"success\" && result.url) {\n            // Extract app name from arguments\n            let appName = \"Web Application\";\n            try {\n                const args = JSON.parse(toolCall.arguments);\n                appName = args.app_name || appName;\n            } catch (e) {\n                console.warn(\"Failed to parse tool arguments for app name:\", e);\n            }\n            // Use app name as the unique ID for persistence\n            const id = appName.replace(/[^a-zA-Z0-9_-]/g, \"_\").toLowerCase();\n            // Check if this is an edit with diff data\n            if (toolCall.name === \"edit_web_app\" && result.original_html && result.modified_html) {\n                return {\n                    id: \"\".concat(id, \"_diff\"),\n                    type: \"diff\",\n                    data: {\n                        original: result.original_html,\n                        modified: result.modified_html,\n                        filename: \"\".concat(appName, \".html\"),\n                        language: \"html\",\n                        url: result.url,\n                        appName,\n                        status: result.status,\n                        message: result.message,\n                        backup_created: result.backup_created\n                    },\n                    shouldShow: true\n                };\n            }\n            // Regular web app preview (create or edit without diff data)\n            return {\n                id,\n                type: \"web_app\",\n                data: {\n                    url: result.url,\n                    appName,\n                    status: result.status,\n                    message: result.message,\n                    backup_created: result.backup_created\n                },\n                shouldShow: true\n            };\n        }\n    } catch (e) {\n        console.warn(\"Failed to parse web app tool result:\", e);\n    }\n    return null;\n};\n// Extract code diff preview from edit_mcp_server tool calls\nconst extractCodeDiffPreview = (toolCall)=>{\n    if (toolCall.name !== \"edit_mcp_server\") {\n        return null;\n    }\n    if (!toolCall.result || toolCall.is_error || toolCall.is_partial) {\n        return null;\n    }\n    try {\n        const result = JSON.parse(toolCall.result);\n        if (result.original_code && result.modified_code) {\n            const serverName = result.server_name || \"unknown_server\";\n            const id = \"mcp_server_\".concat(serverName);\n            return {\n                id,\n                type: \"diff\",\n                data: {\n                    original: result.original_code,\n                    modified: result.modified_code,\n                    filename: \"\".concat(serverName, \".py\"),\n                    language: \"python\",\n                    serverName,\n                    status: result.status,\n                    message: result.message,\n                    changesApplied: result.changes_applied,\n                    reloadResult: result.reload_result\n                },\n                shouldShow: true\n            };\n        }\n    } catch (e) {\n        console.warn(\"Failed to parse edit_mcp_server tool result:\", e);\n    }\n    return null;\n};\n// Extract code preview from other code-related tool calls\nconst extractCodePreview = (toolCall)=>{\n    // Add more code extraction logic here for other tools that generate code\n    // For now, this is a placeholder for future expansion\n    return null;\n};\n// Main function to extract any preview from a tool call\nconst extractPreviewFromToolCall = (toolCall)=>{\n    // Try each extractor in order\n    const extractors = [\n        extractWebAppPreview,\n        extractCodeDiffPreview,\n        extractCodePreview\n    ];\n    for (const extractor of extractors){\n        const preview = extractor(toolCall);\n        if (preview) {\n            return preview;\n        }\n    }\n    return null;\n};\n// Helper to determine if a tool call should trigger preview extraction\nconst shouldExtractPreview = (toolCall)=>{\n    const previewToolNames = [\n        \"create_web_app\",\n        \"edit_web_app\",\n        \"edit_mcp_server\"\n    ];\n    return previewToolNames.includes(toolCall.name) && !toolCall.is_error && !toolCall.is_partial && toolCall.status === \"Completed\";\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/previewExtractors.ts\n"));

/***/ })

});