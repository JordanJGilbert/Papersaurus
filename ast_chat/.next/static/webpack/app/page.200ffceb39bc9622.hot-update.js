"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/cardStudio/useCardGeneration.ts":
/*!***********************************************!*\
  !*** ./hooks/cardStudio/useCardGeneration.ts ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCardGeneration: function() { return /* binding */ useCardGeneration; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/promptGenerator */ \"(app-pages-browser)/./lib/promptGenerator.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./hooks/cardStudio/constants.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./hooks/cardStudio/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ useCardGeneration auto */ \n\n\n\n\n\nfunction useCardGeneration(props) {\n    const [isGenerating, setIsGenerating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [generatedCard, setGeneratedCard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generatedCards, setGeneratedCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedCardIndex, setSelectedCardIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isCardCompleted, setIsCardCompleted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [generationProgress, setGenerationProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [currentCardId, setCurrentCardId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generationDuration, setGenerationDuration] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Handle final card completion\n    const handleFinalCardCompletion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (cardData)=>{\n        console.log(\"\\uD83C\\uDFAF handleFinalCardCompletion called with cardData:\", cardData);\n        console.log(\"\\uD83C\\uDFAF Current userEmail state:\", props.userEmail);\n        console.log(\"\\uD83C\\uDFAF Current states:\", {\n            isGenerating,\n            isCardCompleted,\n            generatedCard: generatedCard ? \"Present\" : \"None\",\n            progressPercentage\n        });\n        let cardWithQR = {\n            ...cardData\n        };\n        // Ensure the card has a valid createdAt date\n        if (!cardWithQR.createdAt) {\n            cardWithQR.createdAt = new Date();\n        } else if (typeof cardWithQR.createdAt === \"string\" || typeof cardWithQR.createdAt === \"number\") {\n            cardWithQR.createdAt = new Date(cardWithQR.createdAt);\n        }\n        // Ensure the card has a valid ID\n        if (!cardWithQR.id) {\n            cardWithQR.id = \"card-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n        }\n        console.log(\"\\uD83D\\uDD04 Final card data prepared:\", cardWithQR);\n        // Note: QR code overlay is now handled automatically by the backend\n        console.log(\"✅ Card completion processing finished - QR codes handled by backend\");\n        console.log(\"\\uD83C\\uDFAF Setting final card state:\", cardWithQR);\n        // Set the card states\n        setGeneratedCard(cardWithQR);\n        setGeneratedCards([\n            cardWithQR\n        ]);\n        setSelectedCardIndex(0);\n        setIsCardCompleted(true);\n        setIsGenerating(false);\n        props.setIsGeneratingFinalCard(false);\n        props.setIsDraftMode(false);\n        props.setDraftCompletionShown(false);\n        props.setDraftCompletionCount(0);\n        console.log(\"\\uD83C\\uDFAF Card states updated - isCardCompleted:\", true, \"generatedCard:\", cardWithQR);\n        // Don't clear the progress message here - it will be set by the WebSocket handler\n        // setGenerationProgress(\"\");\n        clearProgressInterval(); // Clear time-based progress\n        setProgressPercentage(100); // Ensure 100% on completion\n        // Scroll to card preview\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.scrollToCardPreview)();\n        // Capture generation time from backend\n        if (cardData.generationTimeSeconds) {\n            setGenerationDuration(cardData.generationTimeSeconds);\n        }\n        // Stop elapsed time tracking\n        props.stopElapsedTimeTracking();\n        // Set final progress after all states are updated\n        // Use a timeout to ensure React has processed all state updates\n        setTimeout(()=>{\n            setProgressPercentage(100);\n            setGenerationProgress(\"Generation complete! (100%)\");\n        }, 100);\n        sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDF89 Your card is ready!\");\n        // Show email confirmation toast if email is provided\n        if (props.userEmail.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"✉️ Card sent to \".concat(props.userEmail), {\n                duration: 5000\n            });\n        }\n        // Email notifications are handled by the backend\n        console.log(\"\\uD83D\\uDCE7 Email sending disabled - backend handles email notifications\");\n        console.log(\"✅ Final card completion process finished successfully\");\n        console.log(\"✅ Final states:\", {\n            isCardCompleted: true,\n            generatedCard: cardWithQR,\n            progressPercentage: 100\n        });\n    }, [\n        props,\n        isGenerating,\n        isCardCompleted,\n        generatedCard,\n        progressPercentage\n    ]);\n    // Main card generation function\n    const handleGenerateCardAsync = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        const { userEmail, selectedType, customCardType, selectedTone, selectedArtisticStyle, customStyleDescription, selectedImageModel, referenceImageUrls, prompt, toField, fromField, finalCardMessage, isHandwrittenMessage, isFrontBackOnly, selectedPaperSize, numberOfCards, saveJobToStorage, subscribeToJob, startElapsedTimeTracking, setCurrentJobId, setIsDraftMode, setDraftCards, setSelectedDraftIndex, setIsGeneratingFinalCard, setPreviewingDraftIndex, setDraftCompletionShown, setDraftCompletionCount } = props;\n        if (!userEmail.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter your email address\");\n            return;\n        }\n        // Basic email validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(userEmail)) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter a valid email address\");\n            return;\n        }\n        // Validate custom style if selected\n        if (selectedArtisticStyle === \"custom\" && !customStyleDescription.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please describe your custom artistic style\");\n            return;\n        }\n        // Validate reference images with model compatibility\n        if (referenceImageUrls.length > 0 && selectedImageModel !== \"gpt-image-1\") {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Reference photos are only supported with GPT Image 1 model. Please switch to GPT Image 1 in Advanced Options or remove reference photos.\");\n            return;\n        }\n        // Clear all draft mode states to prevent UI conflicts\n        setIsDraftMode(false);\n        setDraftCards([\n            null,\n            null,\n            null,\n            null,\n            null\n        ]);\n        setSelectedDraftIndex(-1);\n        setIsGeneratingFinalCard(false);\n        setPreviewingDraftIndex(-1);\n        setDraftCompletionShown(false);\n        setDraftCompletionCount(0);\n        // Clear any existing card states\n        setGeneratedCards([]);\n        setGeneratedCard(null);\n        setSelectedCardIndex(0);\n        setCurrentCardId(null);\n        setIsCardCompleted(false);\n        // Stop any existing timers first\n        props.stopElapsedTimeTracking();\n        // Clear any existing progress interval\n        clearProgressInterval();\n        setIsGenerating(true);\n        startElapsedTimeTracking();\n        setGenerationProgress(\"Creating your personalized card...\");\n        setProgressPercentage(0);\n        // Simple time-based progress - increases by ~1.1% per second (90 seconds to reach 100%)\n        const interval = setInterval(()=>{\n            setProgressPercentage((prev)=>{\n                const newProgress = prev + 1.1;\n                return newProgress >= 95 ? 95 : newProgress; // Cap at 95% until completion\n            });\n        }, 1000); // Update every second\n        setProgressInterval(interval);\n        try {\n            // Create job tracking\n            const jobId = (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n            setCurrentJobId(jobId);\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = _constants__WEBPACK_IMPORTED_MODULE_3__.cardTones.find((tone)=>tone.id === selectedTone);\n            let messageContent = finalCardMessage;\n            // Handle message generation if needed\n            if (isHandwrittenMessage) {\n                messageContent = \"[Blank space for handwritten message]\";\n            } else if (!messageContent.trim() && !isFrontBackOnly) {\n                setGenerationProgress(\"✍️ Writing the perfect message...\");\n                const autoMessagePrompt = \"Create a heartfelt message for a \".concat(cardTypeForPrompt, ' greeting card.\\n\\nCard Theme/Description: \"').concat(prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"), '\"\\n').concat(toField ? \"Recipient: \".concat(toField) : \"Recipient: [not specified]\", \"\\n\").concat(fromField ? \"Sender: \".concat(fromField) : \"Sender: [not specified]\", \"\\n\\nInstructions:\\n- Write a message that feels personal and genuine\\n- Keep it concise but meaningful (2-4 sentences ideal)\\n- Make it feel authentic, not generic\\n- Keep content family-friendly and appropriate for all ages\\n- \").concat(fromField ? 'End the message with a signature line like \"Love, '.concat(fromField, '\" or \"- ').concat(fromField, '\" or similar, naturally integrated into the message.') : \"\", \"\\n\\nReturn ONLY the message text that should appear inside the card.\\n\\nIMPORTANT: Wrap your final message in <MESSAGE> </MESSAGE> tags.\");\n                const generatedMessage = await (0,_utils__WEBPACK_IMPORTED_MODULE_4__.chatWithAI)(autoMessagePrompt, {\n                    model: \"gemini-2.5-pro\",\n                    includeThoughts: false\n                });\n                if (generatedMessage === null || generatedMessage === void 0 ? void 0 : generatedMessage.trim()) {\n                    const messageMatch = generatedMessage.match(/<MESSAGE>([\\s\\S]*?)<\\/MESSAGE>/);\n                    if (messageMatch && messageMatch[1]) {\n                        messageContent = messageMatch[1].trim();\n                    }\n                }\n            }\n            // Generate style and paper config\n            const selectedStyle = _constants__WEBPACK_IMPORTED_MODULE_3__.artisticStyles.find((style)=>style.id === selectedArtisticStyle);\n            const styleModifier = selectedArtisticStyle === \"custom\" ? customStyleDescription : (selectedStyle === null || selectedStyle === void 0 ? void 0 : selectedStyle.promptModifier) || \"\";\n            const paperConfig = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize) || _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes[0];\n            setGenerationProgress(\"\\uD83C\\uDFA8 Creating artistic vision for your card...\");\n            // Use PromptGenerator for card prompts\n            const cardConfig = {\n                cardType: selectedType,\n                customCardType: customCardType,\n                tone: selectedTone,\n                toneDescription: (selectedToneObj === null || selectedToneObj === void 0 ? void 0 : selectedToneObj.description.toLowerCase()) || \"heartfelt and sincere\",\n                theme: prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"),\n                toField: toField,\n                fromField: fromField,\n                message: messageContent,\n                isHandwrittenMessage: isHandwrittenMessage,\n                artisticStyle: selectedStyle,\n                referenceImageUrls: referenceImageUrls,\n                photoAnalyses: props.photoAnalyses,\n                isFrontBackOnly: isFrontBackOnly,\n                selectedImageModel: selectedImageModel\n            };\n            const generatedPrompts = _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.generateCardPrompts(cardConfig);\n            // Apply reference photo enhancements for GPT-1\n            if (referenceImageUrls.length > 0 && selectedImageModel === \"gpt-1\") {\n                generatedPrompts.frontCover = _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.enhancePromptWithReferencePhotos(generatedPrompts.frontCover, true, selectedImageModel);\n            }\n            const formattedPrompts = {\n                frontCover: generatedPrompts.frontCover,\n                backCover: generatedPrompts.backCover,\n                ...isFrontBackOnly ? {} : {\n                    leftInterior: generatedPrompts.leftInterior,\n                    rightInterior: generatedPrompts.rightInterior\n                }\n            };\n            if (!formattedPrompts || !formattedPrompts.frontCover) {\n                throw new Error(\"Failed to generate image prompts\");\n            }\n            // Save job data\n            const jobData = {\n                prompt: prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"),\n                selectedType,\n                customCardType,\n                selectedTone,\n                finalCardMessage: messageContent,\n                toField,\n                fromField,\n                userEmail,\n                selectedArtisticStyle,\n                customStyleDescription,\n                selectedImageModel,\n                isFrontBackOnly,\n                numberOfCards,\n                selectedPaperSize,\n                prompts: formattedPrompts,\n                paperConfig\n            };\n            saveJobToStorage(jobId, jobData);\n            setGenerationProgress(\"\\uD83D\\uDE80 Starting background generation...\");\n            // Prepare input images for reference photo support\n            const inputImages = [];\n            if (referenceImageUrls.length > 0 && selectedImageModel === \"gpt-image-1\") {\n                inputImages.push(...referenceImageUrls);\n            }\n            const response = await fetch(\"/api/generate-card-async\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    jobId,\n                    prompts: formattedPrompts,\n                    config: {\n                        userNumber: \"+17145986105\",\n                        modelVersion: selectedImageModel,\n                        aspectRatio: paperConfig.aspectRatio,\n                        quality: \"high\",\n                        outputFormat: \"jpeg\",\n                        outputCompression: 100,\n                        moderation: \"low\",\n                        dimensions: paperConfig.dimensions,\n                        isFrontBackOnly,\n                        userEmail,\n                        cardType: cardTypeForPrompt,\n                        toField,\n                        fromField,\n                        isDraftMode: false,\n                        ...inputImages.length > 0 && {\n                            input_images: inputImages,\n                            input_images_mode: \"front_cover_only\"\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server error: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status !== \"processing\") {\n                throw new Error(result.message || \"Failed to start card generation\");\n            }\n            setGenerationProgress(\"✨ Bringing your vision to life...\");\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDF89 Card generation started!\");\n            // Subscribe to WebSocket updates for real-time progress\n            subscribeToJob(jobId);\n        } catch (error) {\n            console.error(\"Card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to generate card. Please try again.\");\n            if (currentCardId) {\n                props.removeJobFromStorage(currentCardId);\n                setCurrentCardId(null);\n            }\n            setIsGenerating(false);\n            setGenerationProgress(\"\");\n            setProgressPercentage(0);\n            props.stopElapsedTimeTracking();\n            clearProgressInterval(); // Clear time-based progress on error\n        }\n    }, [\n        props,\n        currentCardId,\n        clearProgressInterval\n    ]);\n    return {\n        isGenerating,\n        setIsGenerating,\n        generatedCard,\n        setGeneratedCard,\n        generatedCards,\n        setGeneratedCards,\n        selectedCardIndex,\n        setSelectedCardIndex,\n        isCardCompleted,\n        setIsCardCompleted,\n        generationProgress,\n        setGenerationProgress,\n        progressPercentage,\n        setProgressPercentage,\n        currentCardId,\n        setCurrentCardId,\n        generationDuration,\n        setGenerationDuration,\n        handleGenerateCardAsync,\n        handleFinalCardCompletion,\n        clearProgressInterval\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/cardStudio/useCardGeneration.ts\n"));

/***/ })

});