"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useCardStudioRefactored.ts":
/*!******************************************!*\
  !*** ./hooks/useCardStudioRefactored.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCardStudio: function() { return /* binding */ useCardStudio; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var _cardStudio_useWebSocket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cardStudio/useWebSocket */ \"(app-pages-browser)/./hooks/cardStudio/useWebSocket.ts\");\n/* harmony import */ var _cardStudio_useJobManagementSimplified__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cardStudio/useJobManagementSimplified */ \"(app-pages-browser)/./hooks/cardStudio/useJobManagementSimplified.ts\");\n/* harmony import */ var _cardStudio_useMessageGeneration__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cardStudio/useMessageGeneration */ \"(app-pages-browser)/./hooks/cardStudio/useMessageGeneration.ts\");\n/* harmony import */ var _cardStudio_useFileHandling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cardStudio/useFileHandling */ \"(app-pages-browser)/./hooks/cardStudio/useFileHandling.ts\");\n/* harmony import */ var _cardStudio_useDraftGeneration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cardStudio/useDraftGeneration */ \"(app-pages-browser)/./hooks/cardStudio/useDraftGeneration.ts\");\n/* harmony import */ var _cardStudio_useCardGeneration__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cardStudio/useCardGeneration */ \"(app-pages-browser)/./hooks/cardStudio/useCardGeneration.ts\");\n/* harmony import */ var _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cardStudio/constants */ \"(app-pages-browser)/./hooks/cardStudio/constants.ts\");\n/* harmony import */ var _cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cardStudio/utils */ \"(app-pages-browser)/./hooks/cardStudio/utils.ts\");\n/* harmony import */ var _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/lib/storageManager */ \"(app-pages-browser)/./lib/storageManager.ts\");\n/* __next_internal_client_entry_do_not_use__ useCardStudio auto */ \n\n// Import modular hooks\n\n\n\n\n\n\n// Import constants and utils\n\n\n\nfunction useCardStudio() {\n    // Core form state\n    const [prompt, setPrompt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [toField, setToField] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [fromField, setFromField] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [relationshipField, setRelationshipField] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedType, setSelectedType] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"birthday\");\n    const [customCardType, setCustomCardType] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedTone, setSelectedTone] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"funny\");\n    // Advanced options state\n    const [showAdvanced, setShowAdvanced] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [selectedArtisticStyle, setSelectedArtisticStyle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"ai-smart-style\");\n    const [customStyleDescription, setCustomStyleDescription] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedImageModel, setSelectedImageModel] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"gpt-image-1\");\n    const [selectedDraftModel, setSelectedDraftModel] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"gpt-image-1\");\n    const [fastPreviewMode, setFastPreviewMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    // Email state\n    const [userEmail, setUserEmail] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    // Card options\n    const [numberOfCards, setNumberOfCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const [isHandwrittenMessage, setIsHandwrittenMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isFrontBackOnly, setIsFrontBackOnly] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [selectedPaperSize, setSelectedPaperSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"standard\");\n    // UI state\n    const [isTextareaExpanded, setIsTextareaExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isMessageExpanded, setIsMessageExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showSettings, setShowSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showTemplateGallery, setShowTemplateGallery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showPrintConfirmation, setShowPrintConfirmation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showTemplateCustomization, setShowTemplateCustomization] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Restoration state\n    const [isRestoringJobs, setIsRestoringJobs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [selectedTemplate, setSelectedTemplate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isInitialLoadComplete, setIsInitialLoadComplete] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Template state\n    const [templateSearchQuery, setTemplateSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [isSearchingTemplates, setIsSearchingTemplates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [aiFilteredCards, setAiFilteredCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [searchMode, setSearchMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"text\");\n    const [textFilteredCards, setTextFilteredCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [showPrompts, setShowPrompts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [printOption, setPrintOption] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"physical\");\n    // Template customization state\n    const [templateCustomizations, setTemplateCustomizations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        promptChanges: \"\",\n        messageChanges: \"\",\n        useReferenceImage: false,\n        referenceImageFile: null,\n        referenceImageUrls: [],\n        referenceImageTransformation: \"\"\n    });\n    // Section loading states\n    const [sectionLoadingStates, setSectionLoadingStates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        frontCover: \"idle\",\n        backCover: \"idle\",\n        leftInterior: \"idle\",\n        rightInterior: \"idle\"\n    });\n    // Countdown state\n    const [countdown, setCountdown] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [countdownInterval, setCountdownInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Use modular hooks\n    const webSocket = (0,_cardStudio_useWebSocket__WEBPACK_IMPORTED_MODULE_2__.useWebSocket)();\n    const jobManagement = (0,_cardStudio_useJobManagementSimplified__WEBPACK_IMPORTED_MODULE_3__.useJobManagement)();\n    const fileHandling = (0,_cardStudio_useFileHandling__WEBPACK_IMPORTED_MODULE_5__.useFileHandling)();\n    const messageGeneration = (0,_cardStudio_useMessageGeneration__WEBPACK_IMPORTED_MODULE_4__.useMessageGeneration)(selectedType, customCardType, selectedTone, prompt, toField, fromField, relationshipField, fileHandling.photoReferences);\n    // Draft generation props\n    const draftGenerationProps = {\n        selectedType,\n        customCardType,\n        selectedTone,\n        selectedArtisticStyle,\n        customStyleDescription,\n        selectedDraftModel,\n        selectedImageModel,\n        selectedPaperSize,\n        prompt,\n        toField,\n        fromField,\n        userEmail,\n        finalCardMessage: messageGeneration.finalCardMessage,\n        isHandwrittenMessage,\n        isFrontBackOnly,\n        referenceImageUrls: fileHandling.referenceImageUrls,\n        photoReferences: fileHandling.photoReferences,\n        relationshipField,\n        saveJobToStorage: jobManagement.saveJobToStorage,\n        subscribeToJob: webSocket.subscribeToJob,\n        unsubscribeFromAllJobs: webSocket.unsubscribeFromAllJobs,\n        startElapsedTimeTracking: jobManagement.startElapsedTimeTracking,\n        stopElapsedTimeTracking: jobManagement.stopElapsedTimeTracking\n    };\n    const draftGeneration = (0,_cardStudio_useDraftGeneration__WEBPACK_IMPORTED_MODULE_6__.useDraftGeneration)(draftGenerationProps);\n    // Card generation props\n    const cardGenerationProps = {\n        selectedType,\n        customCardType,\n        selectedTone,\n        selectedArtisticStyle,\n        customStyleDescription,\n        selectedImageModel,\n        selectedPaperSize,\n        prompt,\n        toField,\n        fromField,\n        userEmail,\n        finalCardMessage: messageGeneration.finalCardMessage,\n        isHandwrittenMessage,\n        isFrontBackOnly,\n        referenceImageUrls: fileHandling.referenceImageUrls,\n        photoReferences: fileHandling.photoReferences,\n        relationshipField,\n        numberOfCards,\n        saveJobToStorage: jobManagement.saveJobToStorage,\n        removeJobFromStorage: jobManagement.removeJobFromStorage,\n        subscribeToJob: webSocket.subscribeToJob,\n        startElapsedTimeTracking: jobManagement.startElapsedTimeTracking,\n        stopElapsedTimeTracking: jobManagement.stopElapsedTimeTracking,\n        setCurrentJobId: jobManagement.setCurrentJobId,\n        setIsDraftMode: draftGeneration.setIsDraftMode,\n        setDraftCards: draftGeneration.setDraftCards,\n        setSelectedDraftIndex: draftGeneration.setSelectedDraftIndex,\n        setIsGeneratingFinalCard: draftGeneration.setIsGeneratingFinalCard,\n        setPreviewingDraftIndex: draftGeneration.setPreviewingDraftIndex,\n        setDraftCompletionShown: draftGeneration.setDraftCompletionShown,\n        setDraftCompletionCount: draftGeneration.setDraftCompletionCount\n    };\n    const cardGeneration = (0,_cardStudio_useCardGeneration__WEBPACK_IMPORTED_MODULE_7__.useCardGeneration)(cardGenerationProps);\n    // Handle job updates from WebSocket\n    const handleJobUpdate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((data)=>{\n        const { job_id, status, progress, cardData, error, completedAt } = data;\n        if (!job_id) return;\n        // Skip updates if we're still restoring jobs from localStorage\n        if (isRestoringJobs) {\n            console.log(\"⏳ Skipping job update during restoration:\", job_id);\n            return;\n        }\n        // Check if this is a draft job\n        const isDraftJob = job_id.startsWith(\"draft-\");\n        const draftIndex = isDraftJob ? parseInt(job_id.split(\"-\")[1]) : -1;\n        // Filter out updates from wrong job type\n        // If we're in draft mode, only process draft jobs\n        // If we're in final mode, only process non-draft jobs\n        const isInDraftMode = draftGeneration.isDraftMode;\n        if (isInDraftMode && !isDraftJob) {\n            console.log(\"\\uD83D\\uDEAB Ignoring non-draft job update in draft mode:\", job_id);\n            return;\n        }\n        if (!isInDraftMode && isDraftJob) {\n            console.log(\"\\uD83D\\uDEAB Ignoring draft job update in final mode:\", job_id);\n            return;\n        }\n        console.log(\"\\uD83D\\uDD04 Processing job update:\", {\n            job_id,\n            status,\n            isDraftJob,\n            draftIndex,\n            progress\n        });\n        // Update progress if provided\n        if (progress) {\n            // IMPORTANT: Don't show \"Generation complete!\" until we've actually processed the card\n            // This prevents the UI from showing completion before the card is ready\n            if (progress.includes(\"Generation complete!\") && status === \"completed\" && !isDraftJob) {\n                console.log('⏸️ Holding \"Generation complete!\" message until card is processed');\n            // Don't update the progress message yet - it will be set in handleFinalCardCompletion\n            } else {\n                cardGeneration.setGenerationProgress(progress);\n                draftGeneration.setGenerationProgress(progress);\n                console.log(\"\\uD83D\\uDCCA Progress message: \".concat(progress));\n            }\n        }\n        if (status === \"completed\" && cardData) {\n            console.log(\"\\uD83C\\uDF89 Job completed! Card data:\", cardData, \"isDraftJob:\", isDraftJob);\n            if (isDraftJob && draftIndex >= 0) {\n                var _cardData_generatedPrompts, _cardData_generatedPrompts1, _cardData_generatedPrompts2, _cardData_generatedPrompts3;\n                // Handle draft card completion\n                console.log(\"\\uD83C\\uDFA8 Draft variation \".concat(draftIndex + 1, \" completed!\"));\n                // Get style info for smart style mode\n                let styleInfo = undefined;\n                if (selectedArtisticStyle === \"ai-smart-style\") {\n                    const predefinedStyles = [\n                        \"watercolor\",\n                        \"botanical\",\n                        \"comic-book\",\n                        \"dreamy-fantasy\",\n                        \"minimalist\"\n                    ];\n                    const styleLabels = [\n                        \"\\uD83C\\uDFA8 Watercolor\",\n                        \"\\uD83C\\uDF3F Botanical\",\n                        \"\\uD83D\\uDCA5 Comic Book\",\n                        \"\\uD83C\\uDF38 Dreamy Fantasy\",\n                        \"✨ Minimalist\"\n                    ];\n                    if (draftIndex >= 0 && draftIndex < predefinedStyles.length) {\n                        styleInfo = {\n                            styleName: predefinedStyles[draftIndex],\n                            styleLabel: styleLabels[draftIndex]\n                        };\n                    }\n                }\n                const draftCard = {\n                    id: \"draft-\".concat(draftIndex + 1, \"-\").concat(Date.now()),\n                    prompt: cardData.prompt || \"Draft Variation \".concat(draftIndex + 1),\n                    frontCover: cardData.frontCover || \"\",\n                    backCover: cardData.backCover || \"\",\n                    leftPage: cardData.leftInterior || cardData.leftPage || \"\",\n                    rightPage: cardData.rightInterior || cardData.rightPage || \"\",\n                    createdAt: new Date(),\n                    generatedPrompts: cardData.generatedPrompts || {\n                        frontCover: ((_cardData_generatedPrompts = cardData.generatedPrompts) === null || _cardData_generatedPrompts === void 0 ? void 0 : _cardData_generatedPrompts.frontCover) || \"\",\n                        backCover: ((_cardData_generatedPrompts1 = cardData.generatedPrompts) === null || _cardData_generatedPrompts1 === void 0 ? void 0 : _cardData_generatedPrompts1.backCover) || \"\",\n                        leftInterior: ((_cardData_generatedPrompts2 = cardData.generatedPrompts) === null || _cardData_generatedPrompts2 === void 0 ? void 0 : _cardData_generatedPrompts2.leftInterior) || \"\",\n                        rightInterior: ((_cardData_generatedPrompts3 = cardData.generatedPrompts) === null || _cardData_generatedPrompts3 === void 0 ? void 0 : _cardData_generatedPrompts3.rightInterior) || \"\"\n                    },\n                    styleInfo: styleInfo\n                };\n                // Simplified draft tracking - use fixed array positions\n                draftGeneration.setDraftCards((prev)=>{\n                    const updated = [\n                        ...prev\n                    ];\n                    // Ensure array has 5 slots\n                    while(updated.length < 5){\n                        updated.push(null);\n                    }\n                    // Place draft at its correct index\n                    updated[draftIndex] = draftCard;\n                    console.log(\"✅ Draft \".concat(draftIndex + 1, \" completed and stored at index \").concat(draftIndex));\n                    // No longer save individual drafts to localStorage\n                    return updated;\n                });\n                // Simplified completion tracking - count the updated array including the new draft\n                const updatedDrafts = [\n                    ...draftGeneration.draftCards\n                ];\n                updatedDrafts[draftIndex] = draftCard;\n                const completedCount = updatedDrafts.filter(Boolean).length;\n                console.log(\"\\uD83D\\uDCCA Draft progress: \".concat(completedCount, \"/5 variations complete\"));\n                // Update progress\n                const progressMsg = completedCount === 5 ? \"All 5 variations ready! Choose your favorite below.\" : \"\".concat(completedCount, \"/5 variations complete...\").concat(completedCount >= 2 ? \" You can select one now!\" : \"\");\n                draftGeneration.setGenerationProgress(progressMsg);\n                // Override time-based progress with real progress when drafts complete\n                // Don't override time-based progress\n                console.log(\"\\uD83C\\uDFA8 Draft \".concat(completedCount, \"/5 completed\"));\n                // Handle milestones\n                if (completedCount === 1) {\n                    (0,_cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__.scrollToCardPreview)();\n                }\n                if (completedCount === 5 && !draftGeneration.isGeneratingFinalCard) {\n                    draftGeneration.setIsGenerating(false);\n                    jobManagement.stopElapsedTimeTracking();\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 All 5 front cover variations ready! Choose your favorite below.\");\n                }\n                // Keep draft jobs in storage for later retrieval\n                // Only unsubscribe from WebSocket\n                webSocket.unsubscribeFromJob(job_id);\n                console.log(\"✅ Keeping draft job \".concat(job_id, \" in storage for future access\"));\n            } else {\n                // Handle final card completion\n                console.log(\"\\uD83D\\uDD0D Final card completion detected. Card data structure:\", {\n                    hasCardData: !!cardData,\n                    cardDataKeys: Object.keys(cardData || {}),\n                    frontCover: (cardData === null || cardData === void 0 ? void 0 : cardData.frontCover) ? \"Present\" : \"Missing\",\n                    backCover: (cardData === null || cardData === void 0 ? void 0 : cardData.backCover) ? \"Present\" : \"Missing\",\n                    leftInterior: (cardData === null || cardData === void 0 ? void 0 : cardData.leftInterior) ? \"Present\" : \"Missing\",\n                    rightInterior: (cardData === null || cardData === void 0 ? void 0 : cardData.rightInterior) ? \"Present\" : \"Missing\",\n                    leftPage: (cardData === null || cardData === void 0 ? void 0 : cardData.leftPage) ? \"Present\" : \"Missing\",\n                    rightPage: (cardData === null || cardData === void 0 ? void 0 : cardData.rightPage) ? \"Present\" : \"Missing\"\n                });\n                console.log(\"\\uD83D\\uDCDD Full card data:\", JSON.stringify(cardData, null, 2));\n                // Map backend field names to frontend field names\n                const mappedCardData = {\n                    ...cardData,\n                    leftInterior: cardData.leftInterior || cardData.leftPage,\n                    rightInterior: cardData.rightInterior || cardData.rightPage,\n                    // Keep original fields for backward compatibility\n                    leftPage: cardData.leftPage || cardData.leftInterior,\n                    rightPage: cardData.rightPage || cardData.rightInterior\n                };\n                console.log(\"\\uD83D\\uDD04 Mapped card data for frontend compatibility:\", {\n                    frontCover: mappedCardData.frontCover ? \"Present\" : \"Missing\",\n                    backCover: mappedCardData.backCover ? \"Present\" : \"Missing\",\n                    leftInterior: mappedCardData.leftInterior ? \"Present\" : \"Missing\",\n                    rightInterior: mappedCardData.rightInterior ? \"Present\" : \"Missing\"\n                });\n                // Call the completion handler\n                console.log(\"\\uD83D\\uDE80 Calling handleFinalCardCompletion...\");\n                cardGeneration.handleFinalCardCompletion(mappedCardData);\n                // Card is automatically added to recent cards by markJobComplete\n                jobManagement.removeJobFromStorage(job_id);\n                jobManagement.setCurrentJobId(null);\n                webSocket.unsubscribeFromJob(job_id);\n            }\n        } else if (status === \"failed\") {\n            console.error(\"❌ Job failed:\", error);\n            if (isDraftJob && draftIndex >= 0) {\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Draft variation \".concat(draftIndex + 1, \" failed. Continuing with others...\"));\n            } else {\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"❌ Card generation failed. Please try again.\");\n                cardGeneration.setIsGenerating(false);\n                draftGeneration.setIsGeneratingFinalCard(false);\n                jobManagement.stopElapsedTimeTracking();\n                cardGeneration.setGenerationProgress(\"\");\n                // Don't reset progress - let time-based progress continue\n                // jobManagement.setProgressPercentage(0);\n                jobManagement.setCurrentJobId(null);\n                webSocket.unsubscribeFromJob(job_id);\n            }\n            jobManagement.removeJobFromStorage(job_id);\n        } else if (status === \"not_found\") {\n            console.warn(\"⚠️ Job not found on server, cleaning up stale reference:\", job_id);\n            // Clean up stale job reference\n            if (webSocket.currentJobRef.current === job_id) {\n                webSocket.currentJobRef.current = null;\n            }\n            // Reset UI state if this was the current job\n            if (jobManagement.currentJobId === job_id) {\n                jobManagement.setCurrentJobId(null);\n                cardGeneration.setIsGenerating(false);\n                draftGeneration.setIsGeneratingFinalCard(false);\n                cardGeneration.setGenerationProgress(\"\");\n                // Don't reset progress - let time-based progress continue\n                // jobManagement.setProgressPercentage(0);\n                jobManagement.stopElapsedTimeTracking();\n            }\n            // Clean up storage\n            jobManagement.removeJobFromStorage(job_id);\n            webSocket.unsubscribeFromJob(job_id);\n        }\n    }, [\n        selectedArtisticStyle,\n        draftGeneration,\n        cardGeneration,\n        jobManagement,\n        webSocket,\n        isRestoringJobs\n    ]);\n    // Set up WebSocket job update handler\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        webSocket.setJobUpdateHandler(handleJobUpdate);\n    }, [\n        webSocket,\n        handleJobUpdate\n    ]);\n    // Track if we've already logged the stale job message\n    const staleJobLoggedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Auto-reconnect WebSocket if disconnected during active generation\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!webSocket.isSocketConnected && (cardGeneration.isGenerating || draftGeneration.isGeneratingFinalCard) && webSocket.currentJobRef.current) {\n            // Check if the generation has been running for more than 5 minutes\n            if (jobManagement.generationStartTime) {\n                const jobAge = Date.now() - jobManagement.generationStartTime;\n                if (jobAge > 5 * 60 * 1000) {\n                    if (!staleJobLoggedRef.current) {\n                        console.log(\"⏰ Job is older than 5 minutes, stopping reconnection attempts\");\n                        staleJobLoggedRef.current = true;\n                        // Clean up stale job\n                        const jobId = webSocket.currentJobRef.current;\n                        if (jobId) {\n                            console.log(\"\\uD83E\\uDDF9 Cleaning up stale job:\", jobId);\n                            // Remove from localStorage (only if not a draft job)\n                            if (!jobId.startsWith(\"draft-\")) {\n                                jobManagement.removeJobFromStorage(jobId);\n                            }\n                            // Reset generation states\n                            cardGeneration.setIsGenerating(false);\n                            draftGeneration.setIsGeneratingFinalCard(false);\n                            draftGeneration.setIsDraftMode(false);\n                            draftGeneration.setDraftCards([]);\n                            draftGeneration.setDraftCompletionCount(0);\n                            draftGeneration.setDraftCompletionShown(false);\n                            jobManagement.setCurrentJobId(null);\n                            jobManagement.setGenerationProgress(\"\");\n                            // Don't reset progress - let time-based progress continue\n                            // jobManagement.setProgressPercentage(0);\n                            jobManagement.stopElapsedTimeTracking();\n                            // Unsubscribe from job\n                            webSocket.unsubscribeFromJob(jobId);\n                            // Show error toast\n                            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Card generation timed out. Please try again.\");\n                        }\n                    }\n                    return;\n                }\n            }\n            console.log(\"\\uD83D\\uDD04 WebSocket disconnected during generation, attempting reconnect...\");\n            const reconnectTimer = setTimeout(()=>{\n                webSocket.connectWebSocket();\n                // Re-subscribe to current job after reconnection\n                const jobId = webSocket.currentJobRef.current;\n                if (jobId) {\n                    setTimeout(()=>{\n                        console.log(\"\\uD83D\\uDCE1 Re-subscribing to job after reconnect:\", jobId);\n                        webSocket.subscribeToJob(jobId);\n                    }, 1000);\n                }\n            }, 2000);\n            return ()=>clearTimeout(reconnectTimer);\n        }\n    }, [\n        webSocket,\n        cardGeneration.isGenerating,\n        draftGeneration.isGeneratingFinalCard,\n        jobManagement.generationStartTime\n    ]);\n    // Reset stale job flag when generation starts\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (cardGeneration.isGenerating || draftGeneration.isGeneratingFinalCard) {\n            staleJobLoggedRef.current = false;\n        }\n    }, [\n        cardGeneration.isGenerating,\n        draftGeneration.isGeneratingFinalCard\n    ]);\n    // Monitor for stale job updates\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ((cardGeneration.isGenerating || draftGeneration.isGeneratingFinalCard) && webSocket.currentJobRef.current) {\n            const checkInterval = setInterval(async ()=>{\n                const timeSinceLastUpdate = Date.now() - webSocket.lastJobUpdateRef.current;\n                const jobId = webSocket.currentJobRef.current;\n                // Very aggressive checking when at 95%+ progress\n                if (jobManagement.progressPercentage >= 95 && timeSinceLastUpdate > 5000) {\n                    console.warn(\"⚠️ No updates for \".concat(Math.round(timeSinceLastUpdate / 1000), \"s at \").concat(jobManagement.progressPercentage, \"% progress - checking job status...\"));\n                    if (jobId) {\n                        try {\n                            const response = await fetch(\"/api/job-status/\".concat(jobId));\n                            if (response.ok) {\n                                const jobStatus = await response.json();\n                                console.log(\"\\uD83D\\uDCCA Direct job status check:\", jobStatus);\n                                if (jobStatus.status === \"completed\" && jobStatus.cardData) {\n                                    console.log(\"✅ Job is actually completed! Processing result...\");\n                                    handleJobUpdate({\n                                        job_id: jobId,\n                                        status: \"completed\",\n                                        progress: \"Card generation complete!\",\n                                        cardData: jobStatus.cardData\n                                    });\n                                    return; // Exit early on completion\n                                }\n                            }\n                        } catch (error) {\n                            console.error(\"Failed to check job status:\", error);\n                        }\n                    }\n                } else if (jobManagement.progressPercentage >= 90 && timeSinceLastUpdate > 10000) {\n                    console.warn(\"⚠️ No updates for \".concat(Math.round(timeSinceLastUpdate / 1000), \"s at \").concat(jobManagement.progressPercentage, \"% progress\"));\n                    if (jobId) {\n                        try {\n                            const response = await fetch(\"/api/job-status/\".concat(jobId));\n                            if (response.ok) {\n                                const jobStatus = await response.json();\n                                console.log(\"\\uD83D\\uDCCA Direct job status check:\", jobStatus);\n                                if (jobStatus.status === \"completed\" && jobStatus.cardData) {\n                                    console.log(\"✅ Job is actually completed! Processing result...\");\n                                    handleJobUpdate({\n                                        job_id: jobId,\n                                        status: \"completed\",\n                                        progress: \"Card generation complete!\",\n                                        cardData: jobStatus.cardData\n                                    });\n                                    return; // Exit early on completion\n                                }\n                            }\n                        } catch (error) {\n                            console.error(\"Failed to check job status:\", error);\n                        }\n                    }\n                }\n                // Standard stale update check\n                if (timeSinceLastUpdate > 30000) {\n                    console.warn(\"⚠️ No job updates for 30 seconds, checking connection...\");\n                    if (!webSocket.isSocketConnected) {\n                        console.log(\"\\uD83D\\uDD04 WebSocket disconnected, reconnecting...\");\n                        webSocket.connectWebSocket();\n                    } else if (jobId) {\n                        console.log(\"\\uD83D\\uDCE1 Re-subscribing to job due to stale updates:\", jobId);\n                        webSocket.subscribeToJob(jobId);\n                    }\n                    // Reset the timer\n                    webSocket.lastJobUpdateRef.current = Date.now();\n                }\n            }, 3000); // Check every 3 seconds for faster detection at high progress\n            return ()=>clearInterval(checkInterval);\n        }\n    }, [\n        cardGeneration.isGenerating,\n        draftGeneration.isGeneratingFinalCard,\n        webSocket,\n        jobManagement.progressPercentage,\n        handleJobUpdate\n    ]);\n    // Simplified job restoration using new storage manager\n    const checkPendingJobs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        var _recovery_jobId;\n        console.log(\"\\uD83D\\uDD04 Checking for recovery data...\");\n        setIsRestoringJobs(true);\n        // Check for active recovery job\n        const recovery = _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__.storage.getRecovery();\n        if (!recovery) {\n            console.log(\"✅ No active job to recover\");\n            setIsRestoringJobs(false);\n            return;\n        }\n        console.log(\"\\uD83D\\uDD04 Found recovery data:\", recovery);\n        // In our simplified system, we only track one active job at a time\n        // Recovery is meant for browser crashes during generation\n        const isRecoveryDraft = (_recovery_jobId = recovery.jobId) === null || _recovery_jobId === void 0 ? void 0 : _recovery_jobId.startsWith(\"draft-\");\n        if (isRecoveryDraft) {\n            console.log(\"\\uD83C\\uDFA8 Recovering from draft generation\");\n            // For draft recovery, we can't restore the exact state\n            // User will need to restart the draft generation\n            setIsRestoringJobs(false);\n            return;\n        }\n        // For final card recovery, we can try to restore the job\n        console.log(\"\\uD83C\\uDFAF Recovering from final card generation\");\n        webSocket.subscribeToJob(recovery.jobId);\n        setIsRestoringJobs(false);\n    }, [\n        webSocket,\n        _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__.storage\n    ]);\n    // Load recovery data on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDE80 useCardStudio mounted, checking for recovery...\");\n        // Check for active recovery job\n        const recovery = _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__.storage.getRecovery();\n        if (recovery) {\n            console.log(\"\\uD83D\\uDD04 Found active job to recover:\", recovery.jobId);\n            // Restore job state and subscribe to updates\n            jobManagement.setCurrentJobId(recovery.jobId);\n            webSocket.subscribeToJob(recovery.jobId);\n            // Set generation state\n            const isDraft = recovery.jobId.startsWith(\"draft-\");\n            if (isDraft) {\n                draftGeneration.setIsDraftMode(true);\n                draftGeneration.setIsGenerating(true);\n                cardGeneration.setIsGenerating(true);\n                draftGeneration.setGenerationProgress(\"\\uD83C\\uDFA8 Resuming draft generation...\");\n                cardGeneration.setGenerationProgress(\"\\uD83C\\uDFA8 Resuming draft generation...\");\n            } else {\n                cardGeneration.setIsGenerating(true);\n                cardGeneration.setGenerationProgress(\"\\uD83C\\uDFA8 Resuming card generation...\");\n            }\n            // Start elapsed time tracking\n            jobManagement.startElapsedTimeTracking(isDraft ? \"draft\" : \"final\");\n        }\n        // Always mark restoration as complete\n        setIsRestoringJobs(false);\n        // Mark restoration as complete after a small delay\n        setTimeout(()=>{\n            setIsRestoringJobs(false);\n        }, 100);\n    }, []);\n    // Return all the state and functions that the UI needs\n    return {\n        // Core state\n        prompt,\n        setPrompt,\n        finalCardMessage: messageGeneration.finalCardMessage,\n        setFinalCardMessage: messageGeneration.setFinalCardMessage,\n        toField,\n        setToField,\n        fromField,\n        setFromField,\n        relationshipField,\n        setRelationshipField,\n        selectedType,\n        setSelectedType,\n        customCardType,\n        setCustomCardType,\n        selectedTone,\n        setSelectedTone,\n        isGenerating: cardGeneration.isGenerating || draftGeneration.isGenerating,\n        setIsGenerating: cardGeneration.setIsGenerating,\n        isGeneratingMessage: messageGeneration.isGeneratingMessage,\n        setIsGeneratingMessage: messageGeneration.setIsGeneratingMessage,\n        generatedCard: cardGeneration.generatedCard,\n        setGeneratedCard: cardGeneration.setGeneratedCard,\n        numberOfCards,\n        setNumberOfCards,\n        generatedCards: cardGeneration.generatedCards,\n        setGeneratedCards: cardGeneration.setGeneratedCards,\n        selectedCardIndex: cardGeneration.selectedCardIndex,\n        setSelectedCardIndex: cardGeneration.setSelectedCardIndex,\n        // Advanced options\n        showAdvanced,\n        setShowAdvanced,\n        selectedArtisticStyle,\n        setSelectedArtisticStyle,\n        customStyleDescription,\n        setCustomStyleDescription,\n        selectedImageModel,\n        setSelectedImageModel,\n        selectedDraftModel,\n        setSelectedDraftModel,\n        // Draft mode\n        isDraftMode: draftGeneration.isDraftMode,\n        setIsDraftMode: draftGeneration.setIsDraftMode,\n        draftCards: draftGeneration.draftCards,\n        setDraftCards: draftGeneration.setDraftCards,\n        selectedDraftIndex: draftGeneration.selectedDraftIndex,\n        setSelectedDraftIndex: draftGeneration.setSelectedDraftIndex,\n        isGeneratingFinalCard: draftGeneration.isGeneratingFinalCard,\n        setIsGeneratingFinalCard: draftGeneration.setIsGeneratingFinalCard,\n        previewingDraftIndex: draftGeneration.previewingDraftIndex,\n        setPreviewingDraftIndex: draftGeneration.setPreviewingDraftIndex,\n        draftCompletionShown: draftGeneration.draftCompletionShown,\n        setDraftCompletionShown: draftGeneration.setDraftCompletionShown,\n        draftCompletionCount: draftGeneration.draftCompletionCount,\n        setDraftCompletionCount: draftGeneration.setDraftCompletionCount,\n        // Progress tracking\n        generationProgress: draftGeneration.isGenerating ? draftGeneration.generationProgress : cardGeneration.generationProgress,\n        setGenerationProgress: cardGeneration.setGenerationProgress,\n        progressPercentage: jobManagement.progressPercentage,\n        isCardCompleted: cardGeneration.isCardCompleted,\n        setIsCardCompleted: cardGeneration.setIsCardCompleted,\n        // Upload and personalization\n        referenceImages: fileHandling.referenceImages,\n        setReferenceImages: fileHandling.setReferenceImages,\n        referenceImageUrls: fileHandling.referenceImageUrls,\n        setReferenceImageUrls: fileHandling.setReferenceImageUrls,\n        isUploading: fileHandling.isUploading,\n        setIsUploading: fileHandling.setIsUploading,\n        // Email and settings\n        userEmail,\n        setUserEmail,\n        isHandwrittenMessage,\n        setIsHandwrittenMessage,\n        isFrontBackOnly,\n        setIsFrontBackOnly,\n        selectedPaperSize,\n        setSelectedPaperSize,\n        // UI state\n        isTextareaExpanded,\n        setIsTextareaExpanded,\n        isMessageExpanded,\n        setIsMessageExpanded,\n        showSettings,\n        setShowSettings,\n        showTemplateGallery,\n        setShowTemplateGallery,\n        showPrintConfirmation,\n        setShowPrintConfirmation,\n        // Generation time\n        generationDuration: cardGeneration.generationDuration,\n        setGenerationDuration: cardGeneration.setGenerationDuration,\n        currentElapsedTime: jobManagement.currentElapsedTime,\n        setCurrentElapsedTime: jobManagement.setCurrentElapsedTime,\n        // Helper functions\n        formatGenerationTime: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.formatGenerationTime,\n        formatCountdown: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.formatCountdown,\n        sendThankYouEmail: _cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__.sendThankYouEmail,\n        chatWithAI: _cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__.chatWithAI,\n        scrollToCardPreview: _cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__.scrollToCardPreview,\n        // Time tracking functions\n        startElapsedTimeTracking: jobManagement.startElapsedTimeTracking,\n        stopElapsedTimeTracking: jobManagement.stopElapsedTimeTracking,\n        // File handling functions\n        handleFileUpload: fileHandling.handleFileUpload,\n        handleRemoveReferenceImage: fileHandling.handleRemoveReferenceImage,\n        // Simplified photo references\n        photoReferences: fileHandling.photoReferences,\n        setPhotoReferences: fileHandling.setPhotoReferences,\n        updatePhotoDescription: fileHandling.updatePhotoDescription,\n        // Message functions\n        handleGetMessageHelp: messageGeneration.handleGetMessageHelp,\n        addMessageToHistory: messageGeneration.addMessageToHistory,\n        undoMessage: messageGeneration.undoMessage,\n        redoMessage: messageGeneration.redoMessage,\n        // Job management\n        saveJobToStorage: jobManagement.saveJobToStorage,\n        removeJobFromStorage: jobManagement.removeJobFromStorage,\n        checkPendingJobs,\n        isRestoringJobs,\n        // Main generation functions\n        handleGenerateCardAsync: cardGeneration.handleGenerateCardAsync,\n        handleGenerateDraftCards: draftGeneration.handleGenerateDraftCards,\n        handleGenerateFinalFromDraft: draftGeneration.handleGenerateFinalFromDraft,\n        // Additional state for message refinement\n        messageHistory: messageGeneration.messageHistory,\n        setMessageHistory: messageGeneration.setMessageHistory,\n        currentMessageIndex: messageGeneration.currentMessageIndex,\n        setCurrentMessageIndex: messageGeneration.setCurrentMessageIndex,\n        refinementPrompt: messageGeneration.refinementPrompt,\n        setRefinementPrompt: messageGeneration.setRefinementPrompt,\n        isRefiningMessage: messageGeneration.isRefiningMessage,\n        setIsRefiningMessage: messageGeneration.setIsRefiningMessage,\n        showRefinementBox: messageGeneration.showRefinementBox,\n        setShowRefinementBox: messageGeneration.setShowRefinementBox,\n        // Template state\n        showTemplateCustomization,\n        setShowTemplateCustomization,\n        selectedTemplate,\n        setSelectedTemplate,\n        templateCustomizations,\n        setTemplateCustomizations,\n        templateSearchQuery,\n        setTemplateSearchQuery,\n        isSearchingTemplates,\n        setIsSearchingTemplates,\n        aiFilteredCards,\n        setAiFilteredCards,\n        searchMode,\n        setSearchMode,\n        textFilteredCards,\n        setTextFilteredCards,\n        showPrompts,\n        setShowPrompts,\n        // Print state\n        printOption,\n        setPrintOption,\n        // Additional draft mode state\n        handwritingSample: fileHandling.handwritingSample,\n        setHandwritingSample: fileHandling.setHandwritingSample,\n        handwritingSampleUrl: fileHandling.handwritingSampleUrl,\n        setHandwritingSampleUrl: fileHandling.setHandwritingSampleUrl,\n        // Job tracking\n        currentJobId: jobManagement.currentJobId,\n        setCurrentJobId: jobManagement.setCurrentJobId,\n        countdown,\n        setCountdown,\n        countdownInterval,\n        setCountdownInterval,\n        // Section loading states\n        sectionLoadingStates,\n        setSectionLoadingStates,\n        // Fast preview mode\n        fastPreviewMode,\n        setFastPreviewMode,\n        // Additional tracking\n        currentCardId: cardGeneration.currentCardId,\n        setCurrentCardId: cardGeneration.setCurrentCardId,\n        isInitialLoadComplete,\n        setIsInitialLoadComplete,\n        // Elapsed time tracking\n        generationStartTime: jobManagement.generationStartTime,\n        setGenerationStartTime: jobManagement.setGenerationStartTime,\n        elapsedTimeInterval: jobManagement.elapsedTimeInterval,\n        setElapsedTimeInterval: jobManagement.setElapsedTimeInterval,\n        // Constants for UI\n        cardTones: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.cardTones,\n        artisticStyles: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.artisticStyles,\n        paperSizes: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.paperSizes,\n        // WebSocket functions and state\n        isSocketConnected: webSocket.isSocketConnected,\n        connectWebSocket: webSocket.connectWebSocket,\n        disconnectWebSocket: webSocket.disconnectWebSocket,\n        subscribeToJob: webSocket.subscribeToJob,\n        unsubscribeFromJob: webSocket.unsubscribeFromJob,\n        handleJobUpdate,\n        handleFinalCardCompletion: cardGeneration.handleFinalCardCompletion\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useCardStudioRefactored.ts\n"));

/***/ })

});