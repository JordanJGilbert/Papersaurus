"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/cardStudio/useFileHandling.ts":
/*!*********************************************!*\
  !*** ./hooks/cardStudio/useFileHandling.ts ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFileHandling: function() { return /* binding */ useFileHandling; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./hooks/cardStudio/constants.ts\");\n/* __next_internal_client_entry_do_not_use__ useFileHandling auto */ \n\n\nfunction useFileHandling() {\n    const [handwritingSample, setHandwritingSample] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [handwritingSampleUrl, setHandwritingSampleUrl] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [referenceImages, setReferenceImages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [referenceImageUrls, setReferenceImageUrls] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [imageTransformation, setImageTransformation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [isUploading, setIsUploading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Photo analysis state\n    const [photoAnalyses, setPhotoAnalyses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isAnalyzing, setIsAnalyzing] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showAnalysisModal, setShowAnalysisModal] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [pendingAnalysisIndex, setPendingAnalysisIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // File upload handler\n    const handleFileUpload = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (file, type)=>{\n        if (!file.type.startsWith(\"image/\")) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please upload an image file\");\n            return;\n        }\n        setIsUploading(true);\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", file);\n            const response = await fetch(\"\".concat(_constants__WEBPACK_IMPORTED_MODULE_2__.BACKEND_API_BASE_URL, \"/upload\"), {\n                method: \"POST\",\n                body: formData\n            });\n            if (!response.ok) throw new Error(\"Upload failed: \".concat(response.status));\n            const result = await response.json();\n            if (type === \"handwriting\") {\n                setHandwritingSample(file);\n                setHandwritingSampleUrl(result.url);\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Handwriting sample uploaded!\");\n            } else {\n                const newImageIndex = referenceImages.length;\n                setReferenceImages((prev)=>[\n                        ...prev,\n                        file\n                    ]);\n                setReferenceImageUrls((prev)=>[\n                        ...prev,\n                        result.url\n                    ]);\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Reference image uploaded! \".concat(referenceImages.length + 1, \" photo\").concat(referenceImages.length + 1 > 1 ? \"s\" : \"\", \" ready for character creation.\"));\n                // Auto-analyze the photo in the background\n                console.log(\"\\uD83E\\uDD16 Auto-analyzing uploaded photo...\");\n                analyzePhoto(result.url, newImageIndex).then((analysisResult)=>{\n                    if (analysisResult && analysisResult.peopleCount > 0) {\n                        console.log(\"✅ Photo analysis complete: \".concat(analysisResult.peopleCount, \" people detected\"));\n                        // Create default photo analysis with all people included\n                        const defaultAnalysis = {\n                            imageUrl: result.url,\n                            imageIndex: newImageIndex,\n                            analysisResult: analysisResult,\n                            selectedPeople: analysisResult.people.map((person)=>({\n                                    ...person,\n                                    includeInCard: true,\n                                    name: \"\",\n                                    relationshipToRecipient: \"\"\n                                })),\n                            includeEveryone: true,\n                            excludedCount: 0,\n                            analyzed: true,\n                            analysisFailed: false\n                        };\n                        // Save the analysis silently\n                        setPhotoAnalyses((prev)=>{\n                            const newAnalyses = [\n                                ...prev\n                            ];\n                            newAnalyses[newImageIndex] = defaultAnalysis;\n                            return newAnalyses;\n                        });\n                        // Subtle notification that analysis is complete\n                        if (analysisResult.peopleCount === 1) {\n                            console.log(\"\\uD83D\\uDCF8 1 person detected and ready for card creation\");\n                        } else {\n                            console.log(\"\\uD83D\\uDCF8 \".concat(analysisResult.peopleCount, \" people detected and ready for card creation\"));\n                        }\n                    } else if (analysisResult && analysisResult.peopleCount === 0) {\n                        console.log(\"\\uD83D\\uDCF8 No people detected in photo, but it can still be used for reference\");\n                    } else {\n                        console.log(\"⚠️ Photo analysis failed, but photo can still be used\");\n                    }\n                }).catch((error)=>{\n                    console.error(\"Failed to auto-analyze photo:\", error);\n                // Don't show error toast - silent failure is OK since analysis is optional\n                });\n            }\n        } catch (error) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Upload failed. Please try again.\");\n        } finally{\n            setIsUploading(false);\n        }\n    }, [\n        referenceImages.length\n    ]);\n    const handleRemoveReferenceImage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((index)=>{\n        const removedImage = referenceImages[index];\n        const removedUrl = referenceImageUrls[index];\n        setReferenceImages((prev)=>prev.filter((_, i)=>i !== index));\n        setReferenceImageUrls((prev)=>prev.filter((_, i)=>i !== index));\n        // Also remove associated photo analysis\n        setPhotoAnalyses((prev)=>prev.filter((_, i)=>i !== index));\n        console.log(\"\\uD83D\\uDD0D DEBUG: Reference image removed:\", {\n            fileName: removedImage === null || removedImage === void 0 ? void 0 : removedImage.name,\n            url: removedUrl,\n            remainingImages: referenceImages.length - 1\n        });\n        sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Reference image removed! \".concat(referenceImages.length - 1, \" photo\").concat(referenceImages.length - 1 !== 1 ? \"s\" : \"\", \" remaining.\"));\n    }, [\n        referenceImages,\n        referenceImageUrls\n    ]);\n    // Analyze a photo using AI vision\n    const analyzePhoto = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (imageUrl, imageIndex)=>{\n        console.log(\"\\uD83D\\uDCF8 Starting photo analysis for:\", imageUrl);\n        setIsAnalyzing(true);\n        try {\n            // Ensure the image URL is absolute\n            let fullImageUrl = imageUrl;\n            if (imageUrl.startsWith(\"/\")) {\n                fullImageUrl = \"\".concat(window.location.origin).concat(imageUrl);\n            }\n            console.log(\"\\uD83D\\uDCF8 Using full image URL:\", fullImageUrl);\n            const analysisPrompt = 'Analyze this photo and provide a detailed JSON response with the following structure:\\n{\\n  \"peopleCount\": <number of people in photo>,\\n  \"people\": [\\n    {\\n      \"id\": \"person-1\",\\n      \"position\": <one of: \"far-left\", \"left\", \"center-left\", \"center\", \"center-right\", \"right\", \"far-right\">,\\n      \"positionDescription\": <natural description like \"person on the far left wearing blue\">,\\n      \"description\": <overall appearance description>,\\n      \"apparentAge\": <age range like \"20-25\" or \"40s\">,\\n      \"gender\": <apparent gender if identifiable>,\\n      \"hairColor\": <hair color>,\\n      \"hairStyle\": <hair style/length>,\\n      \"distinguishingFeatures\": <notable features like glasses, beard, etc.>,\\n      \"clothing\": <what they\\'re wearing>,\\n      \"expression\": <facial expression/mood>\\n    }\\n  ],\\n  \"hasPets\": <boolean>,\\n  \"petDescription\": <description of pets if present>,\\n  \"backgroundDescription\": <description of the background/environment>,\\n  \"setting\": <type of setting like \"outdoor park\", \"beach\", \"indoor\", etc.>,\\n  \"overallMood\": <overall mood/atmosphere of the photo>,\\n  \"lighting\": <lighting conditions>\\n}\\n\\nFor each person:\\n1. Describe their position in the image using the enum values\\n2. Provide a brief description of their appearance  \\n3. Estimate their apparent age range\\n4. Note their hair color and style\\n5. Describe their clothing\\n6. Note any distinguishing features\\n7. Describe their expression/mood\\n\\nReturn ONLY the JSON response, no additional text.';\n            // Use the analyze_images tool through the MCP service\n            const response = await fetch(\"/internal/call_mcp_tool\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    tool_name: \"analyze_images\",\n                    arguments: {\n                        urls: [\n                            fullImageUrl\n                        ],\n                        analysis_prompt: analysisPrompt\n                    }\n                })\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"analyze_images error response:\", errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const data = await response.json();\n            console.log(\"\\uD83E\\uDD16 analyze_images response data:\", data);\n            if (data.error && data.error !== \"None\" && data.error !== null) {\n                throw new Error(data.error);\n            }\n            let result;\n            if (typeof data.result === \"string\") {\n                try {\n                    result = JSON.parse(data.result);\n                } catch (e) {\n                    result = {\n                        status: \"error\",\n                        message: \"Invalid JSON response from MCP\"\n                    };\n                }\n            } else {\n                result = data.result;\n            }\n            if (result.status === \"error\") {\n                throw new Error(result.message);\n            }\n            // Extract the analysis from the results array\n            if (result.results && result.results.length > 0) {\n                const imageResult = result.results[0];\n                if (imageResult.status === \"success\" && imageResult.analysis) {\n                    console.log(\"\\uD83D\\uDCF8 Raw analysis text:\", imageResult.analysis);\n                    // Try to parse the analysis as JSON\n                    try {\n                        // Extract JSON from the analysis text\n                        let jsonText = imageResult.analysis;\n                        // If the response contains markdown code blocks, extract the JSON\n                        const jsonMatch = jsonText.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n                        if (jsonMatch) {\n                            jsonText = jsonMatch[1];\n                        }\n                        // Parse the JSON\n                        const analysisData = JSON.parse(jsonText);\n                        console.log(\"\\uD83D\\uDCF8 Parsed analysis data:\", analysisData);\n                        // Ensure the data matches our expected structure\n                        if (typeof analysisData.peopleCount === \"number\" && Array.isArray(analysisData.people)) {\n                            setIsAnalyzing(false);\n                            return analysisData;\n                        } else {\n                            console.error(\"Analysis data doesn't match expected structure\");\n                            setIsAnalyzing(false);\n                            return null;\n                        }\n                    } catch (parseError) {\n                        console.error(\"Failed to parse analysis as JSON:\", parseError);\n                        console.error(\"Raw analysis:\", imageResult.analysis);\n                        setIsAnalyzing(false);\n                        return null;\n                    }\n                } else {\n                    console.error(\"Image analysis failed:\", imageResult.message);\n                    setIsAnalyzing(false);\n                    return null;\n                }\n            } else {\n                console.error(\"No results returned from analyze_images\");\n                setIsAnalyzing(false);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Failed to analyze photo:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to analyze photo. You can still use it without analysis.\");\n            setIsAnalyzing(false);\n            return null;\n        }\n    }, []);\n    // Save photo analysis results\n    const savePhotoAnalysis = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((analysis)=>{\n        setPhotoAnalyses((prev)=>{\n            const newAnalyses = [\n                ...prev\n            ];\n            newAnalyses[analysis.imageIndex] = analysis;\n            return newAnalyses;\n        });\n        setShowAnalysisModal(false);\n        setPendingAnalysisIndex(null);\n    }, []);\n    // Skip photo analysis\n    const skipPhotoAnalysis = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (pendingAnalysisIndex !== null) {\n            const skippedAnalysis = {\n                imageUrl: referenceImageUrls[pendingAnalysisIndex],\n                imageIndex: pendingAnalysisIndex,\n                analysisResult: {\n                    peopleCount: 0,\n                    people: [],\n                    hasPets: false,\n                    backgroundDescription: \"\",\n                    setting: \"\",\n                    overallMood: \"\",\n                    lighting: \"\"\n                },\n                selectedPeople: [],\n                includeEveryone: true,\n                excludedCount: 0,\n                analyzed: false,\n                analysisFailed: false\n            };\n            savePhotoAnalysis(skippedAnalysis);\n        }\n        setShowAnalysisModal(false);\n        setPendingAnalysisIndex(null);\n    }, [\n        pendingAnalysisIndex,\n        referenceImageUrls,\n        savePhotoAnalysis\n    ]);\n    // Get combined analysis for all photos\n    const getCombinedPhotoAnalysis = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const analyzedPhotos = photoAnalyses.filter((a)=>a.analyzed && !a.analysisFailed);\n        if (analyzedPhotos.length === 0) return null;\n        const allSelectedPeople = analyzedPhotos.flatMap((a)=>a.selectedPeople);\n        const totalPeopleCount = analyzedPhotos.reduce((sum, a)=>sum + a.analysisResult.peopleCount, 0);\n        const totalSelectedCount = allSelectedPeople.length;\n        const totalExcludedCount = totalPeopleCount - totalSelectedCount;\n        return {\n            analyzedPhotos,\n            allSelectedPeople,\n            totalPeopleCount,\n            totalSelectedCount,\n            totalExcludedCount,\n            hasMultiplePhotos: analyzedPhotos.length > 1\n        };\n    }, [\n        photoAnalyses\n    ]);\n    // Manually trigger photo analysis for a specific image\n    const triggerPhotoAnalysis = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((imageIndex)=>{\n        if (imageIndex >= 0 && imageIndex < referenceImageUrls.length) {\n            setPendingAnalysisIndex(imageIndex);\n            setShowAnalysisModal(true);\n        }\n    }, [\n        referenceImageUrls.length\n    ]);\n    return {\n        handwritingSample,\n        setHandwritingSample,\n        handwritingSampleUrl,\n        setHandwritingSampleUrl,\n        referenceImages,\n        setReferenceImages,\n        referenceImageUrls,\n        setReferenceImageUrls,\n        imageTransformation,\n        setImageTransformation,\n        isUploading,\n        setIsUploading,\n        handleFileUpload,\n        handleRemoveReferenceImage,\n        // Photo analysis\n        photoAnalyses,\n        setPhotoAnalyses,\n        isAnalyzing,\n        showAnalysisModal,\n        setShowAnalysisModal,\n        pendingAnalysisIndex,\n        setPendingAnalysisIndex,\n        analyzePhoto,\n        savePhotoAnalysis,\n        skipPhotoAnalysis,\n        getCombinedPhotoAnalysis,\n        triggerPhotoAnalysis\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/cardStudio/useFileHandling.ts\n"));

/***/ })

});