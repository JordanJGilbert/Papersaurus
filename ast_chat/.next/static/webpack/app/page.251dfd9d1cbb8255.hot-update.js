"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/cardStudio/useJobManagement.ts":
/*!**********************************************!*\
  !*** ./hooks/cardStudio/useJobManagement.ts ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useJobManagement: function() { return /* binding */ useJobManagement; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ useJobManagement auto */ \nfunction useJobManagement() {\n    const [currentJobId, setCurrentJobId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generationProgress, setGenerationProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [progressPercentage, setProgressPercentage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [generationStartTime, setGenerationStartTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [currentElapsedTime, setCurrentElapsedTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [elapsedTimeInterval, setElapsedTimeInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generationDuration, setGenerationDuration] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [currentJobType, setCurrentJobType] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Job management functions\n    const saveJobToStorage = (jobId, jobData)=>{\n        if (false) {}\n        try {\n            // Enhanced job data with progress, state, and expiration\n            const enhancedJobData = {\n                ...jobData,\n                id: jobId,\n                status: \"processing\",\n                createdAt: Date.now(),\n                expiresAt: Date.now() + 30 * 24 * 60 * 60 * 1000,\n                lastProgress: progressPercentage,\n                lastProgressText: generationProgress,\n                elapsedTime: currentElapsedTime\n            };\n            localStorage.setItem(\"cardJob_\".concat(jobId), JSON.stringify(enhancedJobData));\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            if (!pendingJobs.includes(jobId)) {\n                pendingJobs.push(jobId);\n                localStorage.setItem(\"pendingCardJobs\", JSON.stringify(pendingJobs));\n            }\n            // Run cleanup of expired jobs\n            cleanupExpiredJobs();\n        } catch (error) {\n            console.error(\"Failed to save job to localStorage:\", error);\n        }\n    };\n    // Update job progress in storage\n    const updateJobProgress = (jobId, progress, progressText)=>{\n        if (false) {}\n        try {\n            const jobData = localStorage.getItem(\"cardJob_\".concat(jobId));\n            if (!jobData) return;\n            const job = JSON.parse(jobData);\n            job.lastProgress = progress;\n            job.lastProgressText = progressText;\n            job.elapsedTime = currentElapsedTime;\n            job.lastUpdate = Date.now();\n            localStorage.setItem(\"cardJob_\".concat(jobId), JSON.stringify(job));\n        } catch (error) {\n            console.error(\"Failed to update job progress:\", error);\n        }\n    };\n    // Remove job from storage\n    const removeJobFromStorage = (jobId)=>{\n        if (false) {}\n        try {\n            localStorage.removeItem(\"cardJob_\".concat(jobId));\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            const updatedJobs = pendingJobs.filter((id)=>id !== jobId);\n            localStorage.setItem(\"pendingCardJobs\", JSON.stringify(updatedJobs));\n        } catch (error) {\n            console.error(\"Failed to remove job from localStorage:\", error);\n        }\n    };\n    // Cleanup expired jobs from localStorage\n    const cleanupExpiredJobs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (false) {}\n        const now = Date.now();\n        const keysToRemove = [];\n        // Check all localStorage keys\n        Object.keys(localStorage).forEach((key)=>{\n            if (key.startsWith(\"cardJob_\")) {\n                try {\n                    const jobData = localStorage.getItem(key);\n                    if (jobData) {\n                        const job = JSON.parse(jobData);\n                        // Remove if expired or corrupted data\n                        if (!job.expiresAt || job.expiresAt < now) {\n                            keysToRemove.push(key);\n                        }\n                    }\n                } catch (error) {\n                    // Remove corrupted data\n                    keysToRemove.push(key);\n                }\n            }\n        });\n        // Remove expired jobs\n        keysToRemove.forEach((key)=>{\n            localStorage.removeItem(key);\n            console.log(\"\\uD83E\\uDDF9 Removed expired job: \".concat(key));\n        });\n        // Update pending jobs list\n        if (keysToRemove.length > 0) {\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            const cleanedJobs = pendingJobs.filter((jobId)=>!keysToRemove.includes(\"cardJob_\".concat(jobId)));\n            localStorage.setItem(\"pendingCardJobs\", JSON.stringify(cleanedJobs));\n        }\n    }, []);\n    // Start elapsed time tracking\n    const startElapsedTimeTracking = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        let jobType = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"final\";\n        const start = Date.now();\n        setGenerationStartTime(start);\n        setCurrentElapsedTime(0);\n        setProgressPercentage(0);\n        setCurrentJobType(jobType);\n        if (elapsedTimeInterval) {\n            clearInterval(elapsedTimeInterval);\n        }\n        // Expected durations in seconds\n        const expectedDuration = jobType === \"draft\" ? 45 : 105; // 45s for draft, 105s for final\n        const interval = setInterval(()=>{\n            const elapsed = (Date.now() - start) / 1000;\n            setCurrentElapsedTime(elapsed);\n            // Calculate progress based on elapsed time\n            // Progress increases linearly up to 95% at expected duration\n            // Then slows down to reach 99% at 2x expected duration\n            let progress = 0;\n            if (elapsed < expectedDuration) {\n                // Linear progress up to 95%\n                progress = elapsed / expectedDuration * 95;\n            } else {\n                // Slow progress from 95% to 99% over the next expectedDuration seconds\n                const overtime = elapsed - expectedDuration;\n                const overtimeProgress = Math.min(overtime / expectedDuration, 1) * 4; // 4% more\n                progress = 95 + overtimeProgress;\n            }\n            setProgressPercentage(Math.min(Math.round(progress), 99));\n        }, 100); // Update every 100ms for smooth progress\n        setElapsedTimeInterval(interval);\n    }, [\n        elapsedTimeInterval\n    ]);\n    // Stop elapsed time tracking\n    const stopElapsedTimeTracking = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (elapsedTimeInterval) {\n            clearInterval(elapsedTimeInterval);\n            setElapsedTimeInterval(null);\n        }\n    }, [\n        elapsedTimeInterval\n    ]);\n    // Clear all job data from localStorage\n    const clearAllJobData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (false) {}\n        console.log(\"\\uD83E\\uDDF9 Clearing all job data from localStorage\");\n        // Get all keys\n        const keys = Object.keys(localStorage);\n        // Remove all job-related keys\n        keys.forEach((key)=>{\n            if (key.startsWith(\"cardJob_\") || key === \"pendingCardJobs\" || key === \"generation-start-time\") {\n                localStorage.removeItem(key);\n            }\n        });\n        // Reset state\n        setCurrentElapsedTime(0);\n        setProgressPercentage(0);\n        setGenerationStartTime(null);\n    }, []);\n    // Recovery function - resume WebSocket subscriptions for pending jobs\n    const checkPendingJobs = async ()=>{\n        if (false) {}\n        try {\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            const jobsData = [];\n            for (const jobId of pendingJobs){\n                const jobData = localStorage.getItem(\"cardJob_\".concat(jobId));\n                if (!jobData) continue;\n                const job = JSON.parse(jobData);\n                jobsData.push({\n                    jobId,\n                    job\n                });\n            }\n            return jobsData;\n        } catch (error) {\n            console.error(\"Failed to check pending jobs:\", error);\n            return [];\n        }\n    };\n    // Load most recent draft batch (5 cards)\n    const loadMostRecentDraftBatch = ()=>{\n        if (false) {}\n        try {\n            // Get all localStorage keys\n            const keys = Object.keys(localStorage);\n            const draftJobKeys = keys.filter((key)=>key.startsWith(\"cardJob_draft-\"));\n            console.log(\"\\uD83D\\uDD0D Found \".concat(draftJobKeys.length, \" draft job keys in localStorage\"));\n            const draftJobs = [];\n            // Find all draft job entries\n            for (const key of draftJobKeys){\n                const jobData = localStorage.getItem(key);\n                if (jobData) {\n                    try {\n                        var _job_draftCards;\n                        const job = JSON.parse(jobData);\n                        console.log(\"\\uD83D\\uDCC4 Checking \".concat(key, \":\"), {\n                            hasDraftCards: !!job.draftCards,\n                            cardCount: ((_job_draftCards = job.draftCards) === null || _job_draftCards === void 0 ? void 0 : _job_draftCards.length) || 0,\n                            createdAt: job.createdAt\n                        });\n                        if (job.draftCards && Array.isArray(job.draftCards) && job.draftCards.length > 0) {\n                            draftJobs.push({\n                                key,\n                                job,\n                                createdAt: job.createdAt || 0\n                            });\n                        }\n                    } catch (e) {\n                        console.error(\"Failed to parse \".concat(key, \":\"), e);\n                    }\n                }\n            }\n            // If no draft jobs found, return null\n            if (draftJobs.length === 0) return null;\n            // Sort by creation time (newest first)\n            draftJobs.sort((a, b)=>b.createdAt - a.createdAt);\n            // Get the most recent batch (they should all have similar timestamps)\n            const mostRecentTimestamp = draftJobs[0].createdAt;\n            const recentBatch = draftJobs.filter((job)=>{\n                // Consider jobs within 5 minutes of each other as the same batch\n                return Math.abs(job.createdAt - mostRecentTimestamp) < 5 * 60 * 1000;\n            });\n            // Collect all draft cards from the batch, avoiding duplicates\n            const draftCardMap = new Map();\n            for (const { job } of recentBatch){\n                if (job.draftCards && job.draftCards.length > 0) {\n                    var _draftCard_id_match;\n                    // Each job now stores only one draft card\n                    const draftCard = job.draftCards[0];\n                    const draftIndex = job.draftIndex !== undefined ? job.draftIndex : parseInt(((_draftCard_id_match = draftCard.id.match(/draft-(\\d+)-/)) === null || _draftCard_id_match === void 0 ? void 0 : _draftCard_id_match[1]) || \"0\") - 1;\n                    // Use draft index as key to avoid duplicates\n                    if (!draftCardMap.has(draftIndex)) {\n                        draftCardMap.set(draftIndex, draftCard);\n                    }\n                }\n            }\n            // Convert map to array and sort by draft index\n            const allDraftCards = Array.from(draftCardMap.entries()).sort((a, b)=>a[0] - b[0]).map((param)=>{\n                let [_, card] = param;\n                return card;\n            });\n            console.log(\"\\uD83D\\uDCCB Loaded \".concat(allDraftCards.length, \" unique draft cards from batch\"));\n            // Return the batch info\n            return {\n                cards: allDraftCards,\n                createdAt: mostRecentTimestamp,\n                count: allDraftCards.length\n            };\n        } catch (error) {\n            console.error(\"Failed to load recent draft batch:\", error);\n            return null;\n        }\n    };\n    // Run cleanup on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        cleanupExpiredJobs();\n    }, [\n        cleanupExpiredJobs\n    ]);\n    return {\n        currentJobId,\n        setCurrentJobId,\n        generationProgress,\n        setGenerationProgress,\n        progressPercentage,\n        setProgressPercentage,\n        generationStartTime,\n        setGenerationStartTime,\n        currentElapsedTime,\n        setCurrentElapsedTime,\n        elapsedTimeInterval,\n        setElapsedTimeInterval,\n        generationDuration,\n        setGenerationDuration,\n        saveJobToStorage,\n        updateJobProgress,\n        removeJobFromStorage,\n        startElapsedTimeTracking,\n        stopElapsedTimeTracking,\n        clearAllJobData,\n        checkPendingJobs,\n        loadMostRecentDraftBatch,\n        cleanupExpiredJobs\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/cardStudio/useJobManagement.ts\n"));

/***/ })

});