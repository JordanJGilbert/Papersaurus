"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/gallery/page",{

/***/ "(app-pages-browser)/./hooks/useCardCache.ts":
/*!*******************************!*\
  !*** ./hooks/useCardCache.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCardCache: function() { return /* binding */ useCardCache; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst CACHE_KEY = \"vibecarding_template_cache\";\nconst IMAGE_CACHE_KEY = \"vibecarding_image_cache\";\nconst CACHE_DURATION = 10 * 60 * 1000; // 10 minutes\nconst IMAGE_CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\nconst BACKEND_API_BASE_URL = \"https://vibecarding.com\" || 0;\nconst MAX_CONCURRENT_IMAGES = 3; // Netflix-style: Very conservative concurrent loads\n// Use the regular list endpoint - it's fast enough and always current\nconst CARDS_LIST_URL = \"\".concat(BACKEND_API_BASE_URL, \"/api/cards/list\");\n// Global cache state\nlet globalCache = null;\nlet isPreloading = false;\nconst cacheListeners = new Set();\nconst notifyListeners = ()=>{\n    cacheListeners.forEach((listener)=>listener());\n};\nconst useCardCache = ()=>{\n    const [cache, setCache] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(globalCache);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Subscribe to cache updates\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const updateCache = ()=>setCache(globalCache);\n        cacheListeners.add(updateCache);\n        return ()=>{\n            cacheListeners.delete(updateCache);\n        };\n    }, []);\n    // Load from localStorage on mount (after hydration)\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( false || globalCache) return;\n        try {\n            const stored = localStorage.getItem(CACHE_KEY);\n            if (stored) {\n                const parsed = JSON.parse(stored);\n                const isExpired = Date.now() - parsed.lastFetched > CACHE_DURATION;\n                if (!isExpired) {\n                    globalCache = parsed;\n                    setCache(parsed);\n                    console.log(\"\\uD83D\\uDCE6 Loaded cached template cards:\", parsed.cards.length);\n                } else {\n                    localStorage.removeItem(CACHE_KEY);\n                    console.log(\"\\uD83D\\uDDD1️ Expired cache removed\");\n                }\n            }\n        } catch (error) {\n            console.error(\"Failed to load cache:\", error);\n            if (true) {\n                localStorage.removeItem(CACHE_KEY);\n            }\n        }\n    }, []);\n    const loadCards = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async function() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, search = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\", reset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        // If we have complete cache and no search, return cached data immediately\n        if (!search && (globalCache === null || globalCache === void 0 ? void 0 : globalCache.isComplete) && !reset) {\n            const startIndex = (page - 1) * 40;\n            const endIndex = startIndex + 40;\n            return globalCache.cards.slice(startIndex, endIndex);\n        }\n        // For searches or when no cache, fetch from list endpoint\n        if (!search && (reset || !globalCache)) {\n            try {\n                // Fetch all cards with a large per_page to get everything at once\n                const response = await fetch(\"\".concat(CARDS_LIST_URL, \"?per_page=1000&template_mode=true\"));\n                if (response.ok) {\n                    const data = await response.json();\n                    if (data.status === \"success\" && data.cards && Array.isArray(data.cards)) {\n                        var _data_pagination;\n                        // Deduplicate cards by ID\n                        const uniqueCards = data.cards.filter((card, index, self)=>index === self.findIndex((c)=>c.id === card.id));\n                        // Update global cache\n                        globalCache = {\n                            cards: uniqueCards,\n                            totalCount: ((_data_pagination = data.pagination) === null || _data_pagination === void 0 ? void 0 : _data_pagination.total) || uniqueCards.length,\n                            lastFetched: Date.now(),\n                            isComplete: true\n                        };\n                        // Save to localStorage\n                        if (true) {\n                            try {\n                                localStorage.setItem(CACHE_KEY, JSON.stringify(globalCache));\n                            } catch (error) {\n                                console.warn(\"Failed to save cache to localStorage:\", error);\n                            }\n                        }\n                        notifyListeners();\n                        // Return requested page\n                        const startIndex = (page - 1) * 40;\n                        const endIndex = startIndex + 40;\n                        return data.cards.slice(startIndex, endIndex);\n                    }\n                }\n            } catch (error) {\n                console.warn(\"List endpoint failed, falling back to paginated API:\", error);\n            }\n        }\n        // Fallback to original paginated API\n        setIsLoading(true);\n        setError(null);\n        try {\n            const params = new URLSearchParams({\n                page: page.toString(),\n                per_page: \"40\",\n                ...search && {\n                    search\n                },\n                template_mode: \"true\"\n            });\n            const response = await fetch(\"\".concat(BACKEND_API_BASE_URL, \"/api/cards/list?\").concat(params));\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const data = await response.json();\n            if (data.status === \"success\") {\n                const newCards = data.cards;\n                // Update global cache for non-search queries\n                if (!search) {\n                    if (reset || !globalCache) {\n                        globalCache = {\n                            cards: newCards,\n                            totalCount: data.pagination.total,\n                            lastFetched: Date.now(),\n                            isComplete: !data.pagination.has_next\n                        };\n                    } else {\n                        // Append to existing cache\n                        const existingIds = new Set(globalCache.cards.map((card)=>card.id));\n                        const uniqueNewCards = newCards.filter((card)=>!existingIds.has(card.id));\n                        globalCache = {\n                            ...globalCache,\n                            cards: [\n                                ...globalCache.cards,\n                                ...uniqueNewCards\n                            ],\n                            lastFetched: Date.now(),\n                            isComplete: !data.pagination.has_next\n                        };\n                    }\n                    // Save to localStorage\n                    if (true) {\n                        try {\n                            localStorage.setItem(CACHE_KEY, JSON.stringify(globalCache));\n                        } catch (error) {\n                            console.warn(\"Failed to save cache to localStorage:\", error);\n                        }\n                    }\n                    notifyListeners();\n                }\n                return newCards;\n            } else {\n                throw new Error(data.message || \"Failed to load cards\");\n            }\n        } catch (error) {\n            console.error(\"Error loading cards:\", error);\n            setError(error instanceof Error ? error.message : \"Failed to load cards\");\n            return [];\n        } finally{\n            setIsLoading(false);\n        }\n    }, []);\n    const preloadAllCards = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (isPreloading) {\n            return;\n        }\n        // Check if we already have a complete cache that's fresh\n        if (globalCache === null || globalCache === void 0 ? void 0 : globalCache.isComplete) {\n            const cacheAge = Date.now() - globalCache.lastFetched;\n            if (cacheAge < CACHE_DURATION) {\n                console.log(\"⚡ Using fresh cached template data:\", globalCache.cards.length, \"cards\");\n                // No image preloading - instant response like reference site\n                console.log(\"⚡ Using fresh cached data, no preloading needed\");\n                return;\n            }\n        }\n        isPreloading = true;\n        console.log(\"\\uD83D\\uDE80 Starting immediate template preload on page load...\");\n        try {\n            // Load all cards from list endpoint (always current!)\n            const response = await fetch(\"\".concat(CARDS_LIST_URL, \"?per_page=1000&template_mode=true\"));\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const data = await response.json();\n            if (data.status === \"success\" && data.cards && Array.isArray(data.cards)) {\n                var _data_pagination;\n                // Update global cache with all cards at once\n                globalCache = {\n                    cards: data.cards,\n                    totalCount: ((_data_pagination = data.pagination) === null || _data_pagination === void 0 ? void 0 : _data_pagination.total) || data.cards.length,\n                    lastFetched: Date.now(),\n                    isComplete: true // We have all cards!\n                };\n                // Save to localStorage\n                if (true) {\n                    try {\n                        localStorage.setItem(CACHE_KEY, JSON.stringify(globalCache));\n                    } catch (error) {\n                        console.warn(\"Failed to save cache to localStorage:\", error);\n                    }\n                }\n                notifyListeners();\n                console.log(\"✅ Page load template preload complete:\", data.cards.length, \"cards\");\n                // Ultra-simple: No image preloading, let browser lazy loading handle it\n                console.log(\"✅ Cards loaded, letting browser handle image loading\");\n            }\n        } catch (error) {\n            console.error(\"❌ Static preload failed, falling back to paginated:\", error);\n            // Fallback to old method if static fails\n            await preloadAllCardsLegacy();\n        } finally{\n            isPreloading = false;\n        }\n    }, []);\n    // Legacy preload method as fallback\n    const preloadAllCardsLegacy = async ()=>{\n        try {\n            let page = 1;\n            let hasMore = true;\n            let allCards = [];\n            while(hasMore && page <= 5){\n                var _data_pagination;\n                const cards = await loadCards(page, \"\", page === 1);\n                allCards = page === 1 ? cards : [\n                    ...allCards,\n                    ...cards\n                ];\n                // Check if we have more pages\n                const response = await fetch(\"\".concat(BACKEND_API_BASE_URL, \"/api/cards/list?page=\").concat(page, \"&per_page=40&template_mode=true\"));\n                const data = await response.json();\n                hasMore = ((_data_pagination = data.pagination) === null || _data_pagination === void 0 ? void 0 : _data_pagination.has_next) || false;\n                page++;\n            }\n            console.log(\"✅ Legacy preload complete:\", allCards.length, \"cards\");\n            await preloadImages(allCards.slice(0, 20));\n        } catch (error) {\n            console.error(\"❌ Legacy preload failed:\", error);\n        }\n    };\n    const preloadImages = async (cards)=>{\n        // Disabled for instant loading like reference site\n        console.log(\"\\uD83D\\uDE80 Skipping image preloading for instant response\");\n        return;\n    };\n    const getCachedCards = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, itemsPerPage = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 40;\n        if (!globalCache) return [];\n        const startIndex = (page - 1) * itemsPerPage;\n        const endIndex = startIndex + itemsPerPage;\n        return globalCache.cards.slice(startIndex, endIndex);\n    }, []);\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        globalCache = null;\n        if (true) {\n            localStorage.removeItem(CACHE_KEY);\n        }\n        setCache(null);\n        notifyListeners();\n    }, []);\n    return {\n        cache,\n        isLoading,\n        error,\n        loadCards,\n        preloadAllCards,\n        getCachedCards,\n        clearCache,\n        hasCache: !!globalCache,\n        isComplete: (globalCache === null || globalCache === void 0 ? void 0 : globalCache.isComplete) || false,\n        totalCards: (globalCache === null || globalCache === void 0 ? void 0 : globalCache.totalCount) || 0\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useCardCache.ts\n"));

/***/ })

});