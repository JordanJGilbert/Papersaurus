"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/promptGenerator.ts":
/*!********************************!*\
  !*** ./lib/promptGenerator.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PromptGenerator: function() { return /* binding */ PromptGenerator; }\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n\n// Visual density recommendations by card type\nconst CARD_TYPE_DENSITIES = {\n    \"sympathy\": {\n        back: 5,\n        leftInterior: 20,\n        rightInterior: 10\n    },\n    \"get-well\": {\n        back: 10,\n        leftInterior: 30,\n        rightInterior: 15\n    },\n    \"thank-you\": {\n        back: 15,\n        leftInterior: 35,\n        rightInterior: 20\n    },\n    \"wedding\": {\n        back: 10,\n        leftInterior: 30,\n        rightInterior: 15\n    },\n    \"birthday\": {\n        back: 20,\n        leftInterior: 40,\n        rightInterior: 20\n    },\n    \"anniversary\": {\n        back: 15,\n        leftInterior: 35,\n        rightInterior: 15\n    },\n    \"congratulations\": {\n        back: 20,\n        leftInterior: 40,\n        rightInterior: 20\n    },\n    \"new-baby\": {\n        back: 15,\n        leftInterior: 35,\n        rightInterior: 20\n    },\n    \"holiday\": {\n        back: 20,\n        leftInterior: 40,\n        rightInterior: 25\n    },\n    \"default\": {\n        back: 15,\n        leftInterior: 35,\n        rightInterior: 20\n    }\n};\nclass PromptGenerator {\n    // Helper to get visual density for card type\n    static getVisualDensity(cardType) {\n        return CARD_TYPE_DENSITIES[cardType] || CARD_TYPE_DENSITIES.default;\n    }\n    static getEnhancedReferencePhotoInstructions(photoReferences) {\n        // If no photo references or descriptions, use basic instructions\n        if (!photoReferences || photoReferences.length === 0) {\n            return \"\\nREFERENCE PHOTO INSTRUCTIONS:\\n- Transform the people in the attached reference photos into cartoon/illustrated versions\\n- Characters MUST HIGHLY resemble the people in the reference photos\\n- Keep the SAME clothing they're wearing (omit any text/logos on clothing)\\n- Maintain exact hairstyles, facial features, and body proportions\\n- ONLY include the people shown in the reference photos\\n- Do NOT add any additional people or characters unless explicitly requested\".trim();\n        }\n        // Find photos with descriptions\n        const photosWithDescriptions = photoReferences.filter((ref)=>ref.description && ref.description.trim() !== \"\");\n        let instructions = \"\\nREFERENCE PHOTO INSTRUCTIONS:\";\n        // If user provided descriptions, use them directly\n        if (photosWithDescriptions.length > 0) {\n            instructions += \"\\n- Transform the following people from the reference photos into cartoon/illustrated versions:\";\n            photosWithDescriptions.forEach((ref, idx)=>{\n                instructions += \"\\n  - Photo \".concat(ref.imageIndex + 1, \": \").concat(ref.description);\n            });\n        } else {\n            instructions += \"\\n- Transform the people in the attached reference photos into cartoon/illustrated versions\";\n        }\n        instructions += \"\\n- Characters MUST HIGHLY resemble the people in the reference photos\\n- Keep the SAME clothing they're wearing (omit any text/logos on clothing)\\n- Maintain exact hairstyles, facial features, and body proportions\\n- ONLY include the people described or shown - do NOT add any additional characters\\n- Exception: Only add extra characters if explicitly requested in the card description\";\n        return instructions.trim();\n    }\n    // Generate prompts for all card sections with AI (includes images)\n    static async generateCardPromptsWithAI(config) {\n        // For now, just return the regular prompts\n        // TODO: Implement AI-powered prompt generation with images\n        return this.generateCardPrompts(config);\n    }\n    // Generate prompts for all card sections\n    static generateCardPrompts(config) {\n        var _config_artisticStyle, _config_artisticStyle1, _config_referenceImageUrls;\n        const cardTypeForPrompt = config.customCardType || config.cardType;\n        const effectivePrompt = config.theme || \"A beautiful \".concat(cardTypeForPrompt, \" card\");\n        const styleModifier = ((_config_artisticStyle = config.artisticStyle) === null || _config_artisticStyle === void 0 ? void 0 : _config_artisticStyle.promptModifier) || \"\";\n        // Generate unique UUID for this card generation to ensure variety\n        const uniqueId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        // Build base prompt context (not currently used, but kept for reference)\n        const baseContext = '\\nTheme: \"'.concat(effectivePrompt, '\"\\nStyle: ').concat(((_config_artisticStyle1 = config.artisticStyle) === null || _config_artisticStyle1 === void 0 ? void 0 : _config_artisticStyle1.label) || \"Default\", \"\\n\").concat(((_config_referenceImageUrls = config.referenceImageUrls) === null || _config_referenceImageUrls === void 0 ? void 0 : _config_referenceImageUrls.length) ? \"Reference Photos: \".concat(config.referenceImageUrls.length, \" photo(s) provided for character creation\") : \"\", \"\\nUnique ID: \").concat(uniqueId).trim();\n        // Generate individual section prompts\n        const frontCover = this.generateFrontCoverPrompt(cardTypeForPrompt, effectivePrompt, styleModifier, config);\n        const backCover = this.generateBackCoverPrompt(styleModifier, config.cardType);\n        const prompts = {\n            frontCover,\n            backCover\n        };\n        if (!config.isFrontBackOnly) {\n            prompts.leftInterior = this.generateLeftInteriorPrompt(styleModifier, config.cardType);\n            prompts.rightInterior = this.generateRightInteriorPrompt(config.message || \"\", config.isHandwrittenMessage || false, styleModifier, config.cardType);\n        }\n        return prompts;\n    }\n    // Generate prompt for draft cards (front cover only) - returns both prompt and images\n    static generateDraftPromptWithImages(config) {\n        const prompt = this.generateDraftPrompt(config);\n        return {\n            prompt,\n            images: config.referenceImageUrls || []\n        };\n    }\n    // Generate prompt for draft cards (front cover only)\n    static generateDraftPrompt(config) {\n        var _config_artisticStyle, _config_artisticStyle1, _config_referenceImageUrls, _config_referenceImageUrls1;\n        const cardTypeForPrompt = config.customCardType || config.cardType;\n        const effectivePrompt = config.theme || \"A beautiful \".concat(cardTypeForPrompt, \" card\");\n        let styleModifier = ((_config_artisticStyle = config.artisticStyle) === null || _config_artisticStyle === void 0 ? void 0 : _config_artisticStyle.promptModifier) || \"\";\n        // Generate unique UUID for this draft variation\n        const uniqueId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        // Override style for Smart Style variations\n        if (config.isDraftVariation && config.variationIndex !== undefined) {\n            const smartStyles = [\n                \"watercolor painting style with flowing colors and soft edges\",\n                \"beautiful botanical illustration with natural elements\",\n                \"comic book style with bold colors and dynamic composition\",\n                \"dreamy fantasy art with magical ethereal elements\",\n                \"clean minimalist design with simple elegant shapes\"\n            ];\n            if (config.variationIndex < smartStyles.length) {\n                styleModifier = smartStyles[config.variationIndex];\n            }\n        }\n        let prompt = \"You are an expert AI greeting card designer. Create a front cover prompt for a \".concat(cardTypeForPrompt, \" greeting card\").concat(config.toField ? \" for \".concat(config.toField) : \"\", '.\\n\\nTheme: \"').concat(effectivePrompt, '\"\\nStyle: ').concat(((_config_artisticStyle1 = config.artisticStyle) === null || _config_artisticStyle1 === void 0 ? void 0 : _config_artisticStyle1.label) || \"Default\", \"\\nTone: \").concat(config.toneLabel, \" - \").concat(config.toneDescription, \"\\n\").concat(((_config_referenceImageUrls = config.referenceImageUrls) === null || _config_referenceImageUrls === void 0 ? void 0 : _config_referenceImageUrls.length) ? \"Reference Photos: I have attached \".concat(config.referenceImageUrls.length, \" reference photo\").concat(config.referenceImageUrls.length > 1 ? \"s\" : \"\", \" for character creation.\") : \"\", \"\\nUnique ID: \").concat(uniqueId, \"\\n\\nFront Cover Requirements:\\n- Include appropriate greeting text for a \").concat(cardTypeForPrompt, \" card\").concat(config.toField ? ' (can optionally include \"'.concat(config.toField, '\" in the greeting)') : \"\", \"\\n- Position text safely in center area (avoid top/bottom 10%)\\n- Use beautiful, readable handwritten cursive script\\n- \").concat(((_config_referenceImageUrls1 = config.referenceImageUrls) === null || _config_referenceImageUrls1 === void 0 ? void 0 : _config_referenceImageUrls1.length) ? this.getEnhancedReferencePhotoInstructions(config.photoReferences) : \"Create charming cartoon-style figures if needed\", \"\\n- Be creative and unique, avoid generic designs\\n- Flat 2D artwork for printing\\n- Style: \").concat(styleModifier, '\\n- IMPORTANT: Do NOT include \"from\" or sender information on the front cover\\n\\nReturn ONLY the front cover prompt as plain text.');\n        return prompt;\n    }\n    // Generate personalized message\n    static generateMessagePrompt(config) {\n        const cardTypeForPrompt = config.customCardType || config.cardType;\n        const effectivePrompt = config.theme || \"A beautiful \".concat(cardTypeForPrompt, \" card with \").concat(config.toneDescription, \" style\");\n        // Build relationship context if available (for message tone/content)\n        let relationshipContext = \"\";\n        let contextParts = [];\n        // First, prioritize the explicit relationship field from the form\n        if (config.relationshipField && config.relationshipField.trim()) {\n            contextParts.push(\"Relationship: \".concat(config.toField || \"the recipient\", \" is the sender's \").concat(config.relationshipField));\n        }\n        // Then, add any additional context from photo analyses\n        if (config.photoAnalyses && config.photoAnalyses.length > 0) {\n            const selectedPeople = config.photoAnalyses.flatMap((analysis)=>analysis.selectedPeople || []);\n            if (selectedPeople.length > 0) {\n                // Get people with age info (but not relationships since we have explicit field)\n                const peopleWithAge = selectedPeople.filter((person)=>person.apparentAge).map((person)=>{\n                    const name = person.name || config.toField || \"the recipient\";\n                    return \"\".concat(name, \" (\").concat(person.apparentAge, \" years old)\");\n                });\n                if (peopleWithAge.length > 0 && !contextParts.some((part)=>part.includes(\"years old\"))) {\n                    contextParts.push(\"Age context: \".concat(peopleWithAge.join(\", \")));\n                }\n                // Add group relationship if specified\n                const groupRelationships = config.photoAnalyses.filter((a)=>a.groupRelationship).map((a)=>a.groupRelationship);\n                if (groupRelationships.length > 0) {\n                    contextParts.push(\"Group relationship: \".concat(groupRelationships.join(\", \")));\n                }\n                // Only include special instructions if they relate to relationships/message content\n                const specialInstructions = config.photoAnalyses.filter((a)=>a.specialInstructions).map((a)=>a.specialInstructions).filter((instruction)=>instruction.toLowerCase().includes(\"relationship\") || instruction.toLowerCase().includes(\"message\") || instruction.toLowerCase().includes(\"tone\"));\n                if (specialInstructions.length > 0) {\n                    contextParts.push(\"Special notes: \".concat(specialInstructions.join(\"; \")));\n                }\n            }\n        }\n        if (contextParts.length > 0) {\n            relationshipContext = \"\\n\\nRelationship Context:\\n\".concat(contextParts.join(\"\\n\"));\n        }\n        return \"Create a \".concat(config.toneDescription, \" message for a \").concat(cardTypeForPrompt, ' greeting card.\\n\\nCard Theme/Description: \"').concat(effectivePrompt, '\"\\n').concat(config.toField ? \"Recipient: \".concat(config.toField) : \"Recipient: [not specified]\", \"\\n\").concat(config.fromField ? \"Sender: \".concat(config.fromField) : \"Sender: [not specified]\", \"\\nCard Tone: \").concat(config.toneLabel, \" - \").concat(config.toneDescription).concat(relationshipContext, \"\\n\\nInstructions:\\n- Write a message that is \").concat(config.toneDescription, \" and feels personal and genuine\\n- \").concat(config.toField ? 'ALWAYS start with a greeting like \"Dear '.concat(config.toField, ',\" or \"').concat(config.toField, ',\" or \"Hey ').concat(config.toField, ',\" - choose the greeting style based on tone and relationship') : \"Start with an appropriate greeting (Dear [Name], Hi [Name], etc.)\", \"\\n- \").concat(config.fromField ? \"Write as if \".concat(config.fromField, \" is personally writing this message\") : \"Write in a \".concat(config.toneDescription, \" tone\"), \"\\n- Match the \").concat(config.toneDescription, \" tone and occasion of the \").concat(cardTypeForPrompt, ' card type\\n- Be inspired by the theme: \"').concat(effectivePrompt, '\"\\n').concat(relationshipContext ? \"- Use the relationship context to write an appropriate message (e.g., romantic for boyfriend/girlfriend, professional for coworkers, warm for family)\\n- The tone should reflect the nature of the relationship\" : \"\", \"\\n- Keep the body concise but meaningful (2-4 sentences ideal)\\n- Make it feel authentic, not generic\\n\").concat(this.SAFETY_REQUIREMENTS, \"\\n\").concat(this.getToneSpecificInstructions(config.tone), \"\\n- \").concat(config.toField && config.fromField ? \"Show the relationship between \".concat(config.fromField, \" and \").concat(config.toField, \" through the \").concat(config.toneDescription, \" message tone\") : \"\", \"\\n- \").concat(config.fromField ? 'ALWAYS end with an appropriate closing and signature. Examples:\\n  - Romantic: \"With all my love, '.concat(config.fromField, '\" or \"Forever yours, ').concat(config.fromField, '\"\\n  - Friendly: \"Best, ').concat(config.fromField, '\" or \"Cheers, ').concat(config.fromField, '\" or \"Your friend, ').concat(config.fromField, '\"\\n  - Family: \"Love, ').concat(config.fromField, '\" or \"Hugs, ').concat(config.fromField, '\"\\n  - Professional: \"Best regards, ').concat(config.fromField, '\" or \"Sincerely, ').concat(config.fromField, '\"\\n  - Funny: \"Your favorite troublemaker, ').concat(config.fromField, '\" or \"Stay awesome, ').concat(config.fromField, '\"') : \"End with an appropriate closing (Best wishes, Warm regards, etc.)\", \"\\n\\nReturn ONLY the message text that should appear inside the card - no quotes, no explanations, no markdown formatting (no *bold*, _italics_, or other markdown), just the complete \").concat(config.toneDescription, \" message in plain text.\\n\\nIMPORTANT: Wrap your final message in <MESSAGE> </MESSAGE> tags. Everything outside these tags will be ignored.\");\n    }\n    // Generate remaining prompts based on existing front cover\n    static generateFinalFromDraftPrompts(config) {\n        var _config_artisticStyle;\n        const cardTypeForPrompt = config.customCardType || config.cardType;\n        const effectivePrompt = config.theme || \"A beautiful \".concat(cardTypeForPrompt, \" card\");\n        const styleModifier = ((_config_artisticStyle = config.artisticStyle) === null || _config_artisticStyle === void 0 ? void 0 : _config_artisticStyle.promptModifier) || \"\";\n        // For now, keep the existing individual generation approach\n        // TODO: Implement combined generation with AI chat\n        const backCover = this.generateBackCoverPromptFromFront(config.frontCoverPrompt, styleModifier, config.cardType);\n        const prompts = {\n            frontCover: config.frontCoverPrompt,\n            backCover\n        };\n        if (!config.isFrontBackOnly) {\n            prompts.leftInterior = this.generateLeftInteriorPromptFromFront(config.frontCoverPrompt, styleModifier, config.cardType);\n            prompts.rightInterior = this.generateRightInteriorPromptFromFront(config.frontCoverPrompt, config.message || \"\", config.isHandwrittenMessage || false, styleModifier, config.cardType);\n        }\n        return prompts;\n    }\n    // Generate all non-front prompts in a single AI call for better cohesion\n    static async generateFinalFromDraftPromptsCombined(config) {\n        var _config_artisticStyle;\n        const cardTypeForPrompt = config.customCardType || config.cardType;\n        const density = this.getVisualDensity(config.cardType);\n        // Import chatWithAI dynamically to avoid circular dependencies\n        const { chatWithAI } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../hooks/cardStudio/utils */ \"(app-pages-browser)/./hooks/cardStudio/utils.ts\"));\n        const systemPrompt = \"You are an expert greeting card designer. Generate cohesive image prompts for the back cover, left interior, and right interior of a greeting card. The front cover has already been designed, and you need to create prompts that complement it while following specific design requirements.\";\n        const userMessage = \"Generate prompts for the remaining panels of a \".concat(cardTypeForPrompt, ' greeting card.\\n\\nCONTEXT - FRONT COVER (already designed):\\n\"').concat(config.frontCoverPrompt, '\"\\n\\nIMPORTANT: The above front cover description is provided as CONTEXT ONLY. You should extract the color palette, artistic style, and overall aesthetic from it, but DO NOT copy characters, people, or specific scenes to other panels.\\n\\nCARD DETAILS:\\n- Card Type: ').concat(cardTypeForPrompt, \"\\n- Message space needed: \").concat(config.isHandwrittenMessage ? \"Yes (blank space for handwriting)\" : \"Yes (for provided message)\", \"\\n- Style Modifier: \").concat(((_config_artisticStyle = config.artisticStyle) === null || _config_artisticStyle === void 0 ? void 0 : _config_artisticStyle.promptModifier) || \"Default style\", \"\\n\\nVISUAL DENSITY REQUIREMENTS:\\n- Back Cover: \").concat(density.back, \"% decoration (very minimal)\\n- Left Interior: \").concat(density.leftInterior, \"% decoration (subtle, complementary)\\n- Right Interior: \").concat(density.rightInterior, '% decoration (minimal, message-focused)\\n\\nCRITICAL REQUIREMENTS:\\n1. NO PEOPLE, CHARACTERS, OR FIGURES on any interior pages or back cover\\n2. NO GREETING TEXT (like \"Happy Birthday\", \"Thank You\", etc.) on back cover or left interior - only decorative elements\\n3. Extract ONLY colors and artistic style from the front cover context\\n4. Each panel should feel cohesive but serve its specific purpose\\n5. Back cover must leave bottom-right corner clear for QR code\\n6. Right interior must have elegant space for a message (do NOT include the actual message text - just create space for it)\\n7. NEVER include the card type greeting text anywhere except the front cover\\n\\n').concat(this.LAYOUT_REQUIREMENTS, \"\\n\").concat(this.SAFETY_REQUIREMENTS);\n        const jsonSchema = {\n            type: \"object\",\n            properties: {\n                backCover: {\n                    type: \"string\",\n                    description: \"Complete prompt for back cover image generation\"\n                },\n                leftInterior: {\n                    type: \"string\",\n                    description: \"Complete prompt for left interior image generation\"\n                },\n                rightInterior: {\n                    type: \"string\",\n                    description: \"Complete prompt for right interior image generation\"\n                }\n            },\n            required: [\n                \"backCover\",\n                \"leftInterior\",\n                \"rightInterior\"\n            ]\n        };\n        try {\n            const response = await chatWithAI(userMessage, {\n                systemPrompt,\n                model: \"gemini-2.5-pro\",\n                jsonSchema\n            });\n            // Response should already be parsed JSON due to jsonSchema\n            const prompts = {\n                frontCover: config.frontCoverPrompt,\n                backCover: response.backCover\n            };\n            if (!config.isFrontBackOnly) {\n                prompts.leftInterior = response.leftInterior;\n                prompts.rightInterior = response.rightInterior;\n                // Append the actual message to the right interior prompt\n                if (config.message && !config.isHandwrittenMessage) {\n                    prompts.rightInterior += '\\n\\nDisplay this exact text in elegant, clearly readable handwritten script: \"'.concat(config.message, '\"');\n                }\n            }\n            return prompts;\n        } catch (error) {\n            console.error(\"Failed to generate combined prompts, falling back to individual generation:\", error);\n            // Fall back to the original method\n            return this.generateFinalFromDraftPrompts(config);\n        }\n    }\n    // Private helper methods for generating individual sections\n    static generateFrontCoverPrompt(cardType, theme, styleModifier, config) {\n        var _config_referenceImageUrls;\n        // Generate unique ID for this specific panel\n        const uniqueId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        let prompt = \"Create a beautiful front cover for a \".concat(cardType, \" greeting card\").concat(config.toField ? \" for \".concat(config.toField) : \"\", \". \").concat(theme, \". Include appropriate greeting text for a \").concat(cardType, \" card\").concat(config.toField ? ' (can optionally include \"'.concat(config.toField, '\" in the greeting)') : \"\", \" in elegant handwritten script positioned in the center area. \").concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS, ' IMPORTANT: Do NOT include \"from\" or sender information on the front cover. Unique ID: ').concat(uniqueId);\n        if ((_config_referenceImageUrls = config.referenceImageUrls) === null || _config_referenceImageUrls === void 0 ? void 0 : _config_referenceImageUrls.length) {\n            prompt += \" \".concat(this.getEnhancedReferencePhotoInstructions(config.photoAnalyses));\n        }\n        return prompt;\n    }\n    static generateBackCoverPrompt(styleModifier, cardType) {\n        const density = this.getVisualDensity(cardType);\n        const uniqueId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        return \"Create a very minimal back cover design for a greeting card. Use only \".concat(density.back, \"% decoration - perhaps a single small motif, a subtle pattern border, or gentle color wash. The design should be understated and elegant, leaving most of the space clean and peaceful. Think of it as a quiet ending to the card experience. IMPORTANT: NO PEOPLE, NO CHARACTERS, NO FIGURES, NO TEXT, NO WORDS, NO GREETING - only minimal abstract decorative elements. \").concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS, \" \").concat(this.QR_CODE_SPACE, \" Unique ID: \").concat(uniqueId);\n    }\n    static generateLeftInteriorPrompt(styleModifier, cardType) {\n        const density = this.getVisualDensity(cardType);\n        const uniqueId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        return \"Create subtle, complementary decorative art for the left interior page of a greeting card. Use soft, muted versions of the card's color palette. Keep decoration minimal and elegant - think \".concat(density.leftInterior, \"% visual density compared to the front cover. Focus on gentle patterns, soft watercolor washes, delicate florals, or abstract elements that won't compete with the message on the facing page. IMPORTANT: NO PEOPLE, NO CHARACTERS, NO FIGURES, NO TEXT, NO WORDS, NO GREETING - only decorative and artistic elements. \").concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS, \" Unique ID: \").concat(uniqueId);\n    }\n    static generateRightInteriorPrompt(message, isHandwritten, styleModifier, cardType) {\n        const density = this.getVisualDensity(cardType);\n        const cleanSpace = 100 - density.rightInterior;\n        const uniqueId = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        if (isHandwritten) {\n            return \"Create an elegant writing space for the right interior page. Add very subtle decorative elements - perhaps just delicate corner flourishes or a faint border. Keep \".concat(cleanSpace, \"% of the page clean white/cream space for handwriting. The decoration should whisper, not shout. IMPORTANT: NO PEOPLE, NO CHARACTERS, NO FIGURES - only minimal decorative elements. \").concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS, \" Unique ID: \").concat(uniqueId);\n        }\n        return 'Create the right interior page with this exact message as the absolute focal point: \"'.concat(message, '\". \\n    \\n').concat(this.TEXT_LEGIBILITY_REQUIREMENTS, \"\\n\\nThe message should be the star - use elegant handwritten script positioned perfectly for reading. Add only minimal decoration (\").concat(density.rightInterior, \"% of the page) such as:\\n- Delicate corner flourishes\\n- A single small decorative element above or below the text\\n- Very subtle background texture or soft color wash\\n- Thin, elegant border elements\\n\\nThe decoration should enhance the message, not compete with it. Think of a premium wedding invitation - mostly white space with perfect typography. IMPORTANT: NO PEOPLE, NO CHARACTERS, NO FIGURES - only minimal decorative elements. \").concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS, \" Unique ID: \").concat(uniqueId);\n    }\n    // Methods for generating from existing front cover\n    static generateBackCoverPromptFromFront(frontPrompt, styleModifier, cardType) {\n        const density = this.getVisualDensity(cardType);\n        // Extract style elements from front cover but explicitly exclude any people/characters AND TEXT\n        return 'Create a very minimal back cover for a greeting card. Extract ONLY the color palette and artistic style from this description BUT create a much simpler design: \"'.concat(frontPrompt, '\". \\n    \\nUse only ').concat(density.back, \"% visual density - perhaps a single small element, subtle corner detail, or soft color gradient. Most of the back should be clean, peaceful space. Think elegant minimalism. IMPORTANT: DO NOT include any people, characters, figures, text, words, or greeting messages. NO TEXT AT ALL - only minimal decorative elements. \").concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS, \" \").concat(this.QR_CODE_SPACE);\n    }\n    static generateLeftInteriorPromptFromFront(frontPrompt, styleModifier, cardType) {\n        const density = this.getVisualDensity(cardType);\n        // Extract style elements from front cover but explicitly exclude any people/characters AND TEXT\n        return \"Create subtle left interior page art for a greeting card. Extract the color palette and artistic style from this description BUT create a much softer, more minimal design (\".concat(density.leftInterior, '% visual density): \"').concat(frontPrompt, '\". \\n    \\nUse muted, pastel versions of the colors. Focus on gentle elements like soft watercolor washes, delicate patterns, or subtle textures. This page should complement but not compete with the message on the facing page. IMPORTANT: NO PEOPLE, NO CHARACTERS, NO FIGURES, NO TEXT, NO WORDS, NO GREETING MESSAGES. Only decorative elements. ').concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS);\n    }\n    static generateRightInteriorPromptFromFront(frontPrompt, message, isHandwritten, styleModifier, cardType) {\n        if (isHandwritten) {\n            return 'Create an elegant, minimal writing space for the right interior of a greeting card. Extract ONLY subtle style hints from: \"'.concat(frontPrompt, '\". \\n      \\nKeep 80% of the page as clean white/cream space for handwriting. Add only whisper-light decoration - perhaps faint corner flourishes or a delicate border. The page should feel premium and understated. NO PEOPLE, NO CHARACTERS, NO FIGURES. ').concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS);\n        }\n        return 'Create a right interior page where this message is the absolute star: \"'.concat(message, '\". \\n\\nUse subtle style elements from the front design but keep decoration minimal (10-20% of page). Extract color hints from: \"').concat(frontPrompt, '\".\\n\\n').concat(this.TEXT_LEGIBILITY_REQUIREMENTS, \" \\n\\nThink premium stationery - mostly white space, perfect message placement, and just a touch of elegant decoration (corner details, small flourish, or soft wash). The message should dominate the visual hierarchy. NO PEOPLE, NO CHARACTERS, NO FIGURES. \").concat(styleModifier, \" \").concat(this.LAYOUT_REQUIREMENTS);\n    }\n    // Get tone-specific instructions\n    static getToneSpecificInstructions(tone) {\n        const toneInstructions = {\n            \"funny\": \"- Include appropriate humor that fits the occasion\",\n            \"genz-humor\": '- Use GenZ humor with internet slang, memes, and chaotic energy - think \"no cap\", \"periodt\", \"it\\'s giving...\", \"slay\", etc. Be unhinged but endearing',\n            \"professional\": \"- Keep it formal and business-appropriate\",\n            \"romantic\": \"- Include loving and romantic language\",\n            \"playful\": \"- Use fun and energetic language\"\n        };\n        return toneInstructions[tone] || \"\";\n    }\n    // Apply reference photo instructions if using GPT-1\n    static enhancePromptWithReferencePhotos(prompt, hasReferencePhotos, model) {\n        if (hasReferencePhotos && model === \"gpt-image-1\") {\n            return \"\".concat(prompt, \"\\n\\n\").concat(this.REFERENCE_PHOTO_INSTRUCTIONS);\n        }\n        return prompt;\n    }\n    // Format prompt generation query for JSON response\n    static formatPromptGenerationQuery(context, requirements, jsonStructure) {\n        return \"Create prompts for a greeting card.\\n\\n\".concat(context, \"\\n\\nRequirements:\\n\").concat(this.LAYOUT_REQUIREMENTS, \"\\n\").concat(this.SAFETY_REQUIREMENTS, \"\\n\").concat(requirements, \"\\n\\nReturn JSON:\\n\").concat(jsonStructure);\n    }\n}\n// Core requirements shared across all prompts\nPromptGenerator.SAFETY_REQUIREMENTS = \"\\n- SAFETY: Never include brand names, character names, trademarked terms, or inappropriate content\\n- Keep content family-friendly and appropriate for all ages\\n- If the theme references trademarked content, use generic alternatives or focus on the emotions/concepts instead\".trim();\nPromptGenerator.LAYOUT_REQUIREMENTS = '\\n- Flat 2D artwork for printing\\n- Full-bleed backgrounds extending to edges\\n- Keep text, faces, and key elements at least 10% away from top/bottom edges\\n- Keep text/faces 0.5\" from left/right edges for safe printing'.trim();\nPromptGenerator.REFERENCE_PHOTO_INSTRUCTIONS = \"\\n- Reference photos provided for character creation\\n- Characters should only appear on the front cover\\n- Transform real people into artistic cartoon/illustrated versions matching the style\\n- Maintain recognizable features while adapting to the artistic style\".trim();\nPromptGenerator.TEXT_LEGIBILITY_REQUIREMENTS = \"\\n- Reproduce every word exactly as written\\n- Use elegant, clearly readable handwritten script\\n- Ensure high contrast between text and background\\n- Make text large and well-spaced for easy reading\\n- Center the message in the optimal reading area\".trim();\nPromptGenerator.QR_CODE_SPACE = \"\\n- IMPORTANT: Leave the bottom-right corner area (approximately 1 inch square) completely clear and undecorated for QR code placement\".trim();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/promptGenerator.ts\n"));

/***/ })

});