"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/cardStudio/useDraftGeneration.ts":
/*!************************************************!*\
  !*** ./hooks/cardStudio/useDraftGeneration.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDraftGeneration: function() { return /* binding */ useDraftGeneration; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/promptGenerator */ \"(app-pages-browser)/./lib/promptGenerator.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./hooks/cardStudio/constants.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./hooks/cardStudio/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ useDraftGeneration auto */ \n\n\n\n\n\nfunction useDraftGeneration(props) {\n    // Draft mode state\n    const [isDraftMode, setIsDraftMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [draftCards, setDraftCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedDraftIndex, setSelectedDraftIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1);\n    const [isGeneratingFinalCard, setIsGeneratingFinalCard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [previewingDraftIndex, setPreviewingDraftIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1);\n    const [draftCompletionShown, setDraftCompletionShown] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [draftCompletionCount, setDraftCompletionCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isGenerating, setIsGenerating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [generationProgress, setGenerationProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [progressPercentage, setProgressPercentage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [generatedCard, setGeneratedCard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generatedCards, setGeneratedCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isCardCompleted, setIsCardCompleted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [currentJobId, setCurrentJobId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [progressInterval, setProgressInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Helper to clear progress interval\n    const clearProgressInterval = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (progressInterval) {\n            clearInterval(progressInterval);\n            setProgressInterval(null);\n        }\n    }, [\n        progressInterval\n    ]);\n    // Draft mode generation - creates 5 front cover variations\n    const handleGenerateDraftCards = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        const { userEmail, selectedArtisticStyle, customStyleDescription, referenceImageUrls, selectedDraftModel, selectedType, customCardType, selectedTone, prompt, toField, fromField, selectedPaperSize, saveJobToStorage, subscribeToJob, startElapsedTimeTracking } = props;\n        if (!userEmail.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter your email address\");\n            return;\n        }\n        // Basic email validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(userEmail)) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter a valid email address\");\n            return;\n        }\n        // Validate custom style if selected\n        if (selectedArtisticStyle === \"custom\" && !customStyleDescription.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please describe your custom artistic style\");\n            return;\n        }\n        // Validate reference images with model compatibility\n        if (referenceImageUrls.length > 0 && selectedDraftModel !== \"gpt-image-1\") {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Reference photos are only supported with GPT Image 1 model. Please switch to GPT Image 1 for draft mode or remove reference photos.\");\n            return;\n        }\n        // Stop any existing timers first\n        props.stopElapsedTimeTracking();\n        // Clear any existing progress interval\n        if (progressInterval) {\n            clearInterval(progressInterval);\n            setProgressInterval(null);\n        }\n        // Clear ALL WebSocket subscriptions before starting\n        if (props.unsubscribeFromAllJobs) {\n            props.unsubscribeFromAllJobs();\n        }\n        // Clear all old draft jobs from localStorage before starting new generation\n        if (true) {\n            console.log(\"\\uD83E\\uDDF9 Clearing old draft jobs before starting new generation\");\n            const keys = Object.keys(localStorage);\n            keys.forEach((key)=>{\n                if (key.startsWith(\"cardJob_draft-\")) {\n                    localStorage.removeItem(key);\n                }\n            });\n            // Also clear from pending jobs list\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            const filteredJobs = pendingJobs.filter((id)=>!id.startsWith(\"draft-\"));\n            localStorage.setItem(\"pendingCardJobs\", JSON.stringify(filteredJobs));\n        }\n        setIsDraftMode(true);\n        setIsGenerating(true);\n        startElapsedTimeTracking(\"draft\");\n        setGenerationProgress(\"\\uD83C\\uDFA8 Creating 5 front cover variations for you to choose from...\");\n        setProgressPercentage(0);\n        setDraftCards([\n            null,\n            null,\n            null,\n            null,\n            null\n        ]); // Initialize with 5 empty slots\n        setSelectedDraftIndex(-1);\n        setDraftCompletionShown(false);\n        setDraftCompletionCount(0);\n        // Clear any previous card state\n        setGeneratedCard(null);\n        setGeneratedCards([]);\n        setIsCardCompleted(false);\n        // Simple time-based progress - increases by ~2.2% per second (45 seconds to reach 100%)\n        const interval = setInterval(()=>{\n            setProgressPercentage((prev)=>{\n                const newProgress = prev + 2.2;\n                return newProgress >= 95 ? 95 : newProgress; // Cap at 95% until completion\n            });\n        }, 1000); // Update every second\n        setProgressInterval(interval);\n        try {\n            console.log(\"\\uD83D\\uDE80 Starting draft mode generation with 5 variations\");\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = _constants__WEBPACK_IMPORTED_MODULE_3__.cardTones.find((tone)=>tone.id === selectedTone);\n            const toneDescription = selectedToneObj ? selectedToneObj.description.toLowerCase() : \"heartfelt and sincere\";\n            const effectivePrompt = prompt.trim() || \"A beautiful \".concat(cardTypeForPrompt, \" card with \").concat(toneDescription, \" style\");\n            // Generate 5 draft variations\n            const draftPromises = Array.from({\n                length: 5\n            }, async (_, index)=>{\n                try {\n                    var _paperSizes_find, _paperSizes_find1;\n                    console.log(\"\\uD83C\\uDFA8 Starting draft variation \".concat(index + 1));\n                    // For smart style, use predefined styles\n                    let styleOverride = undefined;\n                    let styleLabel = undefined;\n                    if (selectedArtisticStyle === \"ai-smart-style\") {\n                        const predefinedStyles = [\n                            \"watercolor\",\n                            \"botanical\",\n                            \"comic-book\",\n                            \"dreamy-fantasy\",\n                            \"minimalist\"\n                        ];\n                        const styleLabels = [\n                            \"\\uD83C\\uDFA8 Watercolor\",\n                            \"\\uD83C\\uDF3F Botanical\",\n                            \"\\uD83D\\uDCA5 Comic Book\",\n                            \"\\uD83C\\uDF38 Dreamy Fantasy\",\n                            \"✨ Minimalist\"\n                        ];\n                        styleOverride = predefinedStyles[index];\n                        styleLabel = styleLabels[index];\n                    }\n                    // Generate front cover prompt\n                    const selectedStyle = _constants__WEBPACK_IMPORTED_MODULE_3__.artisticStyles.find((style)=>style.id === (styleOverride || selectedArtisticStyle));\n                    const draftConfig = {\n                        cardType: selectedType,\n                        customCardType: customCardType,\n                        tone: selectedTone,\n                        toneLabel: selectedToneObj ? selectedToneObj.label : \"Heartfelt\",\n                        toneDescription: toneDescription,\n                        theme: effectivePrompt,\n                        toField: toField,\n                        fromField: fromField,\n                        artisticStyle: selectedStyle,\n                        referenceImageUrls: referenceImageUrls,\n                        photoAnalyses: props.photoAnalyses,\n                        isDraftVariation: selectedArtisticStyle === \"smart\",\n                        variationIndex: index\n                    };\n                    const { prompt: frontCoverPromptQuery, images } = _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.generateDraftPromptWithImages(draftConfig);\n                    const frontCoverPrompt = await (0,_utils__WEBPACK_IMPORTED_MODULE_4__.chatWithAI)(frontCoverPromptQuery, {\n                        model: \"gemini-2.5-pro\",\n                        attachments: images\n                    });\n                    if (!(frontCoverPrompt === null || frontCoverPrompt === void 0 ? void 0 : frontCoverPrompt.trim())) {\n                        throw new Error(\"Failed to generate front cover prompt\");\n                    }\n                    // Enhance with reference image instructions\n                    let enhancedFrontCoverPrompt = frontCoverPrompt.trim();\n                    enhancedFrontCoverPrompt = _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.enhancePromptWithReferencePhotos(enhancedFrontCoverPrompt, referenceImageUrls.length > 0, selectedDraftModel);\n                    // Generate the image\n                    const jobId = \"draft-\".concat(index, \"-\").concat((0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])());\n                    const inputImages = [];\n                    if (referenceImageUrls.length > 0 && selectedDraftModel === \"gpt-image-1\") {\n                        inputImages.push(...referenceImageUrls);\n                    }\n                    const response = await fetch(\"/api/generate-card-async\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            jobId,\n                            prompts: {\n                                frontCover: enhancedFrontCoverPrompt\n                            },\n                            config: {\n                                userNumber: \"+17145986105\",\n                                modelVersion: selectedDraftModel,\n                                aspectRatio: ((_paperSizes_find = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find === void 0 ? void 0 : _paperSizes_find.aspectRatio) || \"9:16\",\n                                quality: \"low\",\n                                outputFormat: \"jpeg\",\n                                outputCompression: 100,\n                                moderation: \"low\",\n                                dimensions: ((_paperSizes_find1 = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find1 === void 0 ? void 0 : _paperSizes_find1.dimensions) || \"1024x1536\",\n                                isFrontBackOnly: true,\n                                userEmail,\n                                cardType: cardTypeForPrompt,\n                                toField,\n                                fromField,\n                                isDraftMode: true,\n                                ...inputImages.length > 0 && {\n                                    input_images: inputImages,\n                                    input_images_mode: \"front_cover_only\"\n                                }\n                            }\n                        })\n                    });\n                    if (!response.ok) {\n                        throw new Error(\"Server error: \".concat(response.status));\n                    }\n                    const result = await response.json();\n                    if (result.status !== \"processing\") {\n                        throw new Error(result.message || \"Failed to start draft generation\");\n                    }\n                    console.log(\"✅ Draft variation \".concat(index + 1, \" job started:\"), jobId);\n                    // Save draft job to storage for recovery\n                    saveJobToStorage(jobId, {\n                        isDraft: true,\n                        draftIndex: index,\n                        styleInfo: styleOverride ? {\n                            styleName: styleOverride,\n                            styleLabel: styleLabel\n                        } : undefined,\n                        frontCoverPrompt: enhancedFrontCoverPrompt,\n                        userEmail,\n                        selectedType,\n                        selectedTone,\n                        toField,\n                        fromField,\n                        draftCards: [] // Will be updated as drafts complete\n                    });\n                    // Subscribe to WebSocket updates\n                    subscribeToJob(jobId);\n                } catch (error) {\n                    console.error(\"❌ Draft variation \".concat(index + 1, \" failed:\"), error);\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Draft variation \".concat(index + 1, \" failed: \").concat(error instanceof Error ? error.message : \"Unknown error\"));\n                }\n            });\n            // Wait for all draft generations to start\n            await Promise.allSettled(draftPromises);\n            console.log(\"\\uD83D\\uDE80 All draft variations started\");\n        } catch (error) {\n            console.error(\"Draft card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to start draft generation: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n            setIsGenerating(false);\n            setIsDraftMode(false);\n            setDraftCompletionShown(false);\n            setDraftCompletionCount(0);\n            setGenerationProgress(\"\");\n            props.stopElapsedTimeTracking();\n            // Clear progress interval on error\n            if (progressInterval) {\n                clearInterval(progressInterval);\n                setProgressInterval(null);\n            }\n        }\n    }, [\n        props,\n        progressInterval\n    ]);\n    // Generate final high-quality card from selected draft\n    const handleGenerateFinalFromDraft = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (displayIndex)=>{\n        // Prevent duplicate calls\n        if (isGeneratingFinalCard) {\n            console.log(\"⚠️ Final card generation already in progress, skipping duplicate call\");\n            return;\n        }\n        const selectedDraft = draftCards[displayIndex];\n        if (!selectedDraft) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please wait for the draft to complete before selecting\");\n            return;\n        }\n        const { selectedType, customCardType, selectedTone, prompt, toField, fromField, finalCardMessage, isHandwrittenMessage, selectedArtisticStyle, customStyleDescription, isFrontBackOnly, selectedImageModel, selectedPaperSize, userEmail, referenceImageUrls, startElapsedTimeTracking, subscribeToJob } = props;\n        // Stop any existing timers first\n        props.stopElapsedTimeTracking();\n        // Clear any existing progress interval\n        clearProgressInterval();\n        setIsGeneratingFinalCard(true);\n        setIsDraftMode(false); // Switch out of draft mode for final generation\n        setSelectedDraftIndex(displayIndex);\n        startElapsedTimeTracking(\"final\");\n        setGenerationProgress(\"\\uD83C\\uDFA8 Creating high-quality version of your selected design...\");\n        setProgressPercentage(0);\n        // Simple time-based progress for final card - increases by ~1.1% per second (90 seconds to reach 100%)\n        const interval = setInterval(()=>{\n            setProgressPercentage((prev)=>{\n                const newProgress = prev + 1.1;\n                return newProgress >= 95 ? 95 : newProgress; // Cap at 95% until completion\n            });\n        }, 1000); // Update every second\n        setProgressInterval(interval);\n        try {\n            var _selectedDraft_generatedPrompts, _paperSizes_find, _paperSizes_find1;\n            const jobId = (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n            // Generate the missing prompts\n            const storedFrontCoverPrompt = (_selectedDraft_generatedPrompts = selectedDraft.generatedPrompts) === null || _selectedDraft_generatedPrompts === void 0 ? void 0 : _selectedDraft_generatedPrompts.frontCover;\n            if (!storedFrontCoverPrompt) {\n                throw new Error(\"Selected draft is missing frontCover prompt\");\n            }\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = _constants__WEBPACK_IMPORTED_MODULE_3__.cardTones.find((tone)=>tone.id === selectedTone);\n            const toneDescription = selectedToneObj ? selectedToneObj.description.toLowerCase() : \"heartfelt and sincere\";\n            const effectivePrompt = prompt.trim() || \"A beautiful \".concat(cardTypeForPrompt, \" card with \").concat(toneDescription, \" style\");\n            let messageContent = finalCardMessage;\n            if (isHandwrittenMessage) {\n                messageContent = \"[Blank space for handwritten message]\";\n            }\n            // Get style from the selected draft\n            const draftStyleInfo = selectedDraft.styleInfo;\n            let selectedStyle;\n            if (draftStyleInfo && draftStyleInfo.styleName) {\n                selectedStyle = _constants__WEBPACK_IMPORTED_MODULE_3__.artisticStyles.find((style)=>style.id === draftStyleInfo.styleName);\n            } else {\n                selectedStyle = _constants__WEBPACK_IMPORTED_MODULE_3__.artisticStyles.find((style)=>style.id === selectedArtisticStyle);\n            }\n            // Use PromptGenerator for final card from draft\n            const finalFromDraftConfig = {\n                frontCoverPrompt: storedFrontCoverPrompt,\n                cardType: selectedType,\n                customCardType: customCardType,\n                theme: effectivePrompt,\n                tone: selectedTone,\n                toneDescription: toneDescription,\n                toField: toField,\n                fromField: fromField,\n                message: messageContent,\n                isHandwrittenMessage: isHandwrittenMessage,\n                artisticStyle: selectedStyle,\n                isFrontBackOnly: isFrontBackOnly\n            };\n            const finalPrompts = await _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.generateFinalFromDraftPromptsCombined(finalFromDraftConfig);\n            if (!finalPrompts || !finalPrompts.frontCover || !finalPrompts.backCover) {\n                throw new Error(\"Failed to generate complete prompts for final card\");\n            }\n            // Prepare input images for final generation\n            const inputImages = [];\n            if (referenceImageUrls.length > 0 && selectedImageModel === \"gpt-image-1\") {\n                inputImages.push(...referenceImageUrls);\n            }\n            const response = await fetch(\"/api/generate-card-async\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    jobId,\n                    prompts: finalPrompts,\n                    config: {\n                        userNumber: \"+17145986105\",\n                        modelVersion: selectedImageModel,\n                        aspectRatio: ((_paperSizes_find = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find === void 0 ? void 0 : _paperSizes_find.aspectRatio) || \"9:16\",\n                        quality: \"high\",\n                        outputFormat: \"jpeg\",\n                        outputCompression: 100,\n                        moderation: \"low\",\n                        dimensions: ((_paperSizes_find1 = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find1 === void 0 ? void 0 : _paperSizes_find1.dimensions) || \"1024x1536\",\n                        isFrontBackOnly,\n                        userEmail,\n                        cardType: selectedType === \"custom\" ? customCardType : selectedType,\n                        toField,\n                        fromField,\n                        isDraftMode: false,\n                        ...inputImages.length > 0 && {\n                            input_images: inputImages,\n                            input_images_mode: \"front_cover_only\"\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server error: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status !== \"processing\") {\n                throw new Error(result.message || \"Failed to start final card generation\");\n            }\n            setCurrentJobId(jobId);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 Generating high-quality version of your selected design!\");\n            // Subscribe to WebSocket updates\n            subscribeToJob(jobId);\n        } catch (error) {\n            console.error(\"Final card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to generate final card. Please try again.\");\n            setIsGeneratingFinalCard(false);\n            setGenerationProgress(\"\");\n            setProgressPercentage(0);\n            props.stopElapsedTimeTracking();\n            clearProgressInterval(); // Clear time-based progress on error\n        }\n    }, [\n        draftCards,\n        isGeneratingFinalCard,\n        props\n    ]);\n    return {\n        isDraftMode,\n        setIsDraftMode,\n        draftCards,\n        setDraftCards,\n        selectedDraftIndex,\n        setSelectedDraftIndex,\n        isGeneratingFinalCard,\n        setIsGeneratingFinalCard,\n        previewingDraftIndex,\n        setPreviewingDraftIndex,\n        draftCompletionShown,\n        setDraftCompletionShown,\n        draftCompletionCount,\n        setDraftCompletionCount,\n        handleGenerateDraftCards,\n        handleGenerateFinalFromDraft,\n        isGenerating,\n        setIsGenerating,\n        generationProgress,\n        setGenerationProgress,\n        progressPercentage,\n        setProgressPercentage,\n        generatedCard,\n        setGeneratedCard,\n        generatedCards,\n        setGeneratedCards,\n        isCardCompleted,\n        setIsCardCompleted,\n        currentJobId,\n        setCurrentJobId,\n        clearProgressInterval\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL2NhcmRTdHVkaW8vdXNlRHJhZnRHZW5lcmF0aW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O3dFQUU4QztBQUNmO0FBQ0s7QUFDdUQ7QUFDTztBQUM3RDtBQThCOUIsU0FBU1UsbUJBQW1CQyxLQUEyQjtJQUM1RCxtQkFBbUI7SUFDbkIsTUFBTSxDQUFDQyxhQUFhQyxlQUFlLEdBQUdiLCtDQUFRQSxDQUFVO0lBQ3hELE1BQU0sQ0FBQ2MsWUFBWUMsY0FBYyxHQUFHZiwrQ0FBUUEsQ0FBMkIsRUFBRTtJQUN6RSxNQUFNLENBQUNnQixvQkFBb0JDLHNCQUFzQixHQUFHakIsK0NBQVFBLENBQVMsQ0FBQztJQUN0RSxNQUFNLENBQUNrQix1QkFBdUJDLHlCQUF5QixHQUFHbkIsK0NBQVFBLENBQVU7SUFDNUUsTUFBTSxDQUFDb0Isc0JBQXNCQyx3QkFBd0IsR0FBR3JCLCtDQUFRQSxDQUFTLENBQUM7SUFDMUUsTUFBTSxDQUFDc0Isc0JBQXNCQyx3QkFBd0IsR0FBR3ZCLCtDQUFRQSxDQUFVO0lBQzFFLE1BQU0sQ0FBQ3dCLHNCQUFzQkMsd0JBQXdCLEdBQUd6QiwrQ0FBUUEsQ0FBUztJQUN6RSxNQUFNLENBQUMwQixjQUFjQyxnQkFBZ0IsR0FBRzNCLCtDQUFRQSxDQUFDO0lBQ2pELE1BQU0sQ0FBQzRCLG9CQUFvQkMsc0JBQXNCLEdBQUc3QiwrQ0FBUUEsQ0FBQztJQUM3RCxNQUFNLENBQUM4QixvQkFBb0JDLHNCQUFzQixHQUFHL0IsK0NBQVFBLENBQUM7SUFDN0QsTUFBTSxDQUFDZ0MsZUFBZUMsaUJBQWlCLEdBQUdqQywrQ0FBUUEsQ0FBdUI7SUFDekUsTUFBTSxDQUFDa0MsZ0JBQWdCQyxrQkFBa0IsR0FBR25DLCtDQUFRQSxDQUFrQixFQUFFO0lBQ3hFLE1BQU0sQ0FBQ29DLGlCQUFpQkMsbUJBQW1CLEdBQUdyQywrQ0FBUUEsQ0FBQztJQUN2RCxNQUFNLENBQUNzQyxjQUFjQyxnQkFBZ0IsR0FBR3ZD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QztZQUVBbkgsZ0JBQWdCd0Y7WUFDaEI3SCx5Q0FBS0EsQ0FBQzZLLE9BQU8sQ0FBQztZQUVkLGlDQUFpQztZQUNqQ3JILGVBQWVxRTtRQUVqQixFQUFFLE9BQU9sRSxPQUFPO1lBQ2RNLFFBQVFOLEtBQUssQ0FBQyxnQ0FBZ0NBO1lBQzlDM0QseUNBQUtBLENBQUMyRCxLQUFLLENBQUM7WUFDWjFDLHlCQUF5QjtZQUN6QlUsc0JBQXNCO1lBQ3RCRSxzQkFBc0I7WUFDdEJwQixNQUFNc0QsdUJBQXVCO1lBQzdCdkIseUJBQXlCLHFDQUFxQztRQUNoRTtJQUNGLEdBQUc7UUFBQzVCO1FBQVlJO1FBQXVCUDtLQUFNO0lBRTdDLE9BQU87UUFDTEM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQW1CO1FBQ0FxSDtRQUNBdkk7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUc7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2hvb2tzL2NhcmRTdHVkaW8vdXNlRHJhZnRHZW5lcmF0aW9uLnRzPzRjNDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdG9hc3QgfSBmcm9tIFwic29ubmVyXCI7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IFByb21wdEdlbmVyYXRvciwgRHJhZnRDb25maWcsIEZpbmFsRnJvbURyYWZ0Q29uZmlnIH0gZnJvbSAnQC9saWIvcHJvbXB0R2VuZXJhdG9yJztcbmltcG9ydCB7IEdlbmVyYXRlZENhcmQsIGFydGlzdGljU3R5bGVzLCBwYXBlclNpemVzLCBjYXJkVG9uZXMsIFBob3RvQW5hbHlzaXMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjaGF0V2l0aEFJIH0gZnJvbSAnLi91dGlscyc7XG5cbmludGVyZmFjZSBEcmFmdEdlbmVyYXRpb25Qcm9wcyB7XG4gIC8vIEZvcm0gZGF0YVxuICBzZWxlY3RlZFR5cGU6IHN0cmluZztcbiAgY3VzdG9tQ2FyZFR5cGU6IHN0cmluZztcbiAgc2VsZWN0ZWRUb25lOiBzdHJpbmc7XG4gIHNlbGVjdGVkQXJ0aXN0aWNTdHlsZTogc3RyaW5nO1xuICBjdXN0b21TdHlsZURlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHNlbGVjdGVkRHJhZnRNb2RlbDogc3RyaW5nO1xuICBzZWxlY3RlZEltYWdlTW9kZWw6IHN0cmluZztcbiAgc2VsZWN0ZWRQYXBlclNpemU6IHN0cmluZztcbiAgcHJvbXB0OiBzdHJpbmc7XG4gIHRvRmllbGQ6IHN0cmluZztcbiAgZnJvbUZpZWxkOiBzdHJpbmc7XG4gIHVzZXJFbWFpbDogc3RyaW5nO1xuICBmaW5hbENhcmRNZXNzYWdlOiBzdHJpbmc7XG4gIGlzSGFuZHdyaXR0ZW5NZXNzYWdlOiBib29sZWFuO1xuICBpc0Zyb250QmFja09ubHk6IGJvb2xlYW47XG4gIHJlZmVyZW5jZUltYWdlVXJsczogc3RyaW5nW107XG4gIHBob3RvQW5hbHlzZXM/OiBQaG90b0FuYWx5c2lzW107XG4gIFxuICAvLyBKb2IgbWFuYWdlbWVudFxuICBzYXZlSm9iVG9TdG9yYWdlOiAoam9iSWQ6IHN0cmluZywgam9iRGF0YTogYW55KSA9PiB2b2lkO1xuICBzdWJzY3JpYmVUb0pvYjogKGpvYklkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHVuc3Vic2NyaWJlRnJvbUFsbEpvYnM/OiAoKSA9PiB2b2lkO1xuICBzdGFydEVsYXBzZWRUaW1lVHJhY2tpbmc6IChqb2JUeXBlPzogJ2RyYWZ0JyB8ICdmaW5hbCcpID0+IHZvaWQ7XG4gIHN0b3BFbGFwc2VkVGltZVRyYWNraW5nOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRHJhZnRHZW5lcmF0aW9uKHByb3BzOiBEcmFmdEdlbmVyYXRpb25Qcm9wcykge1xuICAvLyBEcmFmdCBtb2RlIHN0YXRlXG4gIGNvbnN0IFtpc0RyYWZ0TW9kZSwgc2V0SXNEcmFmdE1vZGVdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBbZHJhZnRDYXJkcywgc2V0RHJhZnRDYXJkc10gPSB1c2VTdGF0ZTwoR2VuZXJhdGVkQ2FyZCB8IG51bGwpW10+KFtdKTtcbiAgY29uc3QgW3NlbGVjdGVkRHJhZnRJbmRleCwgc2V0U2VsZWN0ZWREcmFmdEluZGV4XSA9IHVzZVN0YXRlPG51bWJlcj4oLTEpO1xuICBjb25zdCBbaXNHZW5lcmF0aW5nRmluYWxDYXJkLCBzZXRJc0dlbmVyYXRpbmdGaW5hbENhcmRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBbcHJldmlld2luZ0RyYWZ0SW5kZXgsIHNldFByZXZpZXdpbmdEcmFmdEluZGV4XSA9IHVzZVN0YXRlPG51bWJlcj4oLTEpO1xuICBjb25zdCBbZHJhZnRDb21wbGV0aW9uU2hvd24sIHNldERyYWZ0Q29tcGxldGlvblNob3duXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2RyYWZ0Q29tcGxldGlvbkNvdW50LCBzZXREcmFmdENvbXBsZXRpb25Db3VudF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBbaXNHZW5lcmF0aW5nLCBzZXRJc0dlbmVyYXRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZ2VuZXJhdGlvblByb2dyZXNzLCBzZXRHZW5lcmF0aW9uUHJvZ3Jlc3NdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtwcm9ncmVzc1BlcmNlbnRhZ2UsIHNldFByb2dyZXNzUGVyY2VudGFnZV0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW2dlbmVyYXRlZENhcmQsIHNldEdlbmVyYXRlZENhcmRdID0gdXNlU3RhdGU8R2VuZXJhdGVkQ2FyZCB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbZ2VuZXJhdGVkQ2FyZHMsIHNldEdlbmVyYXRlZENhcmRzXSA9IHVzZVN0YXRlPEdlbmVyYXRlZENhcmRbXT4oW10pO1xuICBjb25zdCBbaXNDYXJkQ29tcGxldGVkLCBzZXRJc0NhcmRDb21wbGV0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbY3VycmVudEpvYklkLCBzZXRDdXJyZW50Sm9iSWRdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtwcm9ncmVzc0ludGVydmFsLCBzZXRQcm9ncmVzc0ludGVydmFsXSA9IHVzZVN0YXRlPE5vZGVKUy5UaW1lb3V0IHwgbnVsbD4obnVsbCk7XG4gIFxuICAvLyBIZWxwZXIgdG8gY2xlYXIgcHJvZ3Jlc3MgaW50ZXJ2YWxcbiAgY29uc3QgY2xlYXJQcm9ncmVzc0ludGVydmFsID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChwcm9ncmVzc0ludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHByb2dyZXNzSW50ZXJ2YWwpO1xuICAgICAgc2V0UHJvZ3Jlc3NJbnRlcnZhbChudWxsKTtcbiAgICB9XG4gIH0sIFtwcm9ncmVzc0ludGVydmFsXSk7XG5cbiAgLy8gRHJhZnQgbW9kZSBnZW5lcmF0aW9uIC0gY3JlYXRlcyA1IGZyb250IGNvdmVyIHZhcmlhdGlvbnNcbiAgY29uc3QgaGFuZGxlR2VuZXJhdGVEcmFmdENhcmRzID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXJFbWFpbCxcbiAgICAgIHNlbGVjdGVkQXJ0aXN0aWNTdHlsZSxcbiAgICAgIGN1c3RvbVN0eWxlRGVzY3JpcHRpb24sXG4gICAgICByZWZlcmVuY2VJbWFnZVVybHMsXG4gICAgICBzZWxlY3RlZERyYWZ0TW9kZWwsXG4gICAgICBzZWxlY3RlZFR5cGUsXG4gICAgICBjdXN0b21DYXJkVHlwZSxcbiAgICAgIHNlbGVjdGVkVG9uZSxcbiAgICAgIHByb21wdCxcbiAgICAgIHRvRmllbGQsXG4gICAgICBmcm9tRmllbGQsXG4gICAgICBzZWxlY3RlZFBhcGVyU2l6ZSxcbiAgICAgIHNhdmVKb2JUb1N0b3JhZ2UsXG4gICAgICBzdWJzY3JpYmVUb0pvYixcbiAgICAgIHN0YXJ0RWxhcHNlZFRpbWVUcmFja2luZ1xuICAgIH0gPSBwcm9wcztcblxuICAgIGlmICghdXNlckVtYWlsLnRyaW0oKSkge1xuICAgICAgdG9hc3QuZXJyb3IoXCJQbGVhc2UgZW50ZXIgeW91ciBlbWFpbCBhZGRyZXNzXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEJhc2ljIGVtYWlsIHZhbGlkYXRpb25cbiAgICBjb25zdCBlbWFpbFJlZ2V4ID0gL15bXlxcc0BdK0BbXlxcc0BdK1xcLlteXFxzQF0rJC87XG4gICAgaWYgKCFlbWFpbFJlZ2V4LnRlc3QodXNlckVtYWlsKSkge1xuICAgICAgdG9hc3QuZXJyb3IoXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIGN1c3RvbSBzdHlsZSBpZiBzZWxlY3RlZFxuICAgIGlmIChzZWxlY3RlZEFydGlzdGljU3R5bGUgPT09IFwiY3VzdG9tXCIgJiYgIWN1c3RvbVN0eWxlRGVzY3JpcHRpb24udHJpbSgpKSB7XG4gICAgICB0b2FzdC5lcnJvcihcIlBsZWFzZSBkZXNjcmliZSB5b3VyIGN1c3RvbSBhcnRpc3RpYyBzdHlsZVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSByZWZlcmVuY2UgaW1hZ2VzIHdpdGggbW9kZWwgY29tcGF0aWJpbGl0eVxuICAgIGlmIChyZWZlcmVuY2VJbWFnZVVybHMubGVuZ3RoID4gMCAmJiBzZWxlY3RlZERyYWZ0TW9kZWwgIT09IFwiZ3B0LWltYWdlLTFcIikge1xuICAgICAgdG9hc3QuZXJyb3IoXCJSZWZlcmVuY2UgcGhvdG9zIGFyZSBvbmx5IHN1cHBvcnRlZCB3aXRoIEdQVCBJbWFnZSAxIG1vZGVsLiBQbGVhc2Ugc3dpdGNoIHRvIEdQVCBJbWFnZSAxIGZvciBkcmFmdCBtb2RlIG9yIHJlbW92ZSByZWZlcmVuY2UgcGhvdG9zLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTdG9wIGFueSBleGlzdGluZyB0aW1lcnMgZmlyc3RcbiAgICBwcm9wcy5zdG9wRWxhcHNlZFRpbWVUcmFja2luZygpO1xuICAgIFxuICAgIC8vIENsZWFyIGFueSBleGlzdGluZyBwcm9ncmVzcyBpbnRlcnZhbFxuICAgIGlmIChwcm9ncmVzc0ludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHByb2dyZXNzSW50ZXJ2YWwpO1xuICAgICAgc2V0UHJvZ3Jlc3NJbnRlcnZhbChudWxsKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2xlYXIgQUxMIFdlYlNvY2tldCBzdWJzY3JpcHRpb25zIGJlZm9yZSBzdGFydGluZ1xuICAgIGlmIChwcm9wcy51bnN1YnNjcmliZUZyb21BbGxKb2JzKSB7XG4gICAgICBwcm9wcy51bnN1YnNjcmliZUZyb21BbGxKb2JzKCk7XG4gICAgfVxuICAgIFxuICAgIC8vIENsZWFyIGFsbCBvbGQgZHJhZnQgam9icyBmcm9tIGxvY2FsU3RvcmFnZSBiZWZvcmUgc3RhcnRpbmcgbmV3IGdlbmVyYXRpb25cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn6e5IENsZWFyaW5nIG9sZCBkcmFmdCBqb2JzIGJlZm9yZSBzdGFydGluZyBuZXcgZ2VuZXJhdGlvbicpO1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSk7XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdjYXJkSm9iX2RyYWZ0LScpKSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBBbHNvIGNsZWFyIGZyb20gcGVuZGluZyBqb2JzIGxpc3RcbiAgICAgIGNvbnN0IHBlbmRpbmdKb2JzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGVuZGluZ0NhcmRKb2JzJykgfHwgJ1tdJyk7XG4gICAgICBjb25zdCBmaWx0ZXJlZEpvYnMgPSBwZW5kaW5nSm9icy5maWx0ZXIoKGlkOiBzdHJpbmcpID0+ICFpZC5zdGFydHNXaXRoKCdkcmFmdC0nKSk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGVuZGluZ0NhcmRKb2JzJywgSlNPTi5zdHJpbmdpZnkoZmlsdGVyZWRKb2JzKSk7XG4gICAgfVxuICAgIFxuICAgIHNldElzRHJhZnRNb2RlKHRydWUpO1xuICAgIHNldElzR2VuZXJhdGluZyh0cnVlKTtcbiAgICBzdGFydEVsYXBzZWRUaW1lVHJhY2tpbmcoJ2RyYWZ0Jyk7XG4gICAgc2V0R2VuZXJhdGlvblByb2dyZXNzKFwi8J+OqCBDcmVhdGluZyA1IGZyb250IGNvdmVyIHZhcmlhdGlvbnMgZm9yIHlvdSB0byBjaG9vc2UgZnJvbS4uLlwiKTtcbiAgICBzZXRQcm9ncmVzc1BlcmNlbnRhZ2UoMCk7XG4gICAgc2V0RHJhZnRDYXJkcyhbbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbF0pOyAvLyBJbml0aWFsaXplIHdpdGggNSBlbXB0eSBzbG90c1xuICAgIHNldFNlbGVjdGVkRHJhZnRJbmRleCgtMSk7XG4gICAgc2V0RHJhZnRDb21wbGV0aW9uU2hvd24oZmFsc2UpO1xuICAgIHNldERyYWZ0Q29tcGxldGlvbkNvdW50KDApO1xuICAgIFxuICAgIC8vIENsZWFyIGFueSBwcmV2aW91cyBjYXJkIHN0YXRlXG4gICAgc2V0R2VuZXJhdGVkQ2FyZChudWxsKTtcbiAgICBzZXRHZW5lcmF0ZWRDYXJkcyhbXSk7XG4gICAgc2V0SXNDYXJkQ29tcGxldGVkKGZhbHNlKTtcbiAgICBcbiAgICAvLyBTaW1wbGUgdGltZS1iYXNlZCBwcm9ncmVzcyAtIGluY3JlYXNlcyBieSB+Mi4yJSBwZXIgc2Vjb25kICg0NSBzZWNvbmRzIHRvIHJlYWNoIDEwMCUpXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBzZXRQcm9ncmVzc1BlcmNlbnRhZ2UocHJldiA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1Byb2dyZXNzID0gcHJldiArIDIuMjtcbiAgICAgICAgcmV0dXJuIG5ld1Byb2dyZXNzID49IDk1ID8gOTUgOiBuZXdQcm9ncmVzczsgLy8gQ2FwIGF0IDk1JSB1bnRpbCBjb21wbGV0aW9uXG4gICAgICB9KTtcbiAgICB9LCAxMDAwKTsgLy8gVXBkYXRlIGV2ZXJ5IHNlY29uZFxuICAgIFxuICAgIHNldFByb2dyZXNzSW50ZXJ2YWwoaW50ZXJ2YWwpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+agCBTdGFydGluZyBkcmFmdCBtb2RlIGdlbmVyYXRpb24gd2l0aCA1IHZhcmlhdGlvbnNcIik7XG4gICAgICBcbiAgICAgIGNvbnN0IGNhcmRUeXBlRm9yUHJvbXB0ID0gc2VsZWN0ZWRUeXBlID09PSBcImN1c3RvbVwiID8gY3VzdG9tQ2FyZFR5cGUgOiBzZWxlY3RlZFR5cGU7XG4gICAgICBjb25zdCBzZWxlY3RlZFRvbmVPYmogPSBjYXJkVG9uZXMuZmluZCh0b25lID0+IHRvbmUuaWQgPT09IHNlbGVjdGVkVG9uZSk7XG4gICAgICBjb25zdCB0b25lRGVzY3JpcHRpb24gPSBzZWxlY3RlZFRvbmVPYmogPyBzZWxlY3RlZFRvbmVPYmouZGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKSA6IFwiaGVhcnRmZWx0IGFuZCBzaW5jZXJlXCI7XG4gICAgICBjb25zdCBlZmZlY3RpdmVQcm9tcHQgPSBwcm9tcHQudHJpbSgpIHx8IGBBIGJlYXV0aWZ1bCAke2NhcmRUeXBlRm9yUHJvbXB0fSBjYXJkIHdpdGggJHt0b25lRGVzY3JpcHRpb259IHN0eWxlYDtcblxuICAgICAgLy8gR2VuZXJhdGUgNSBkcmFmdCB2YXJpYXRpb25zXG4gICAgICBjb25zdCBkcmFmdFByb21pc2VzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogNSB9LCBhc3luYyAoXywgaW5kZXgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+OqCBTdGFydGluZyBkcmFmdCB2YXJpYXRpb24gJHtpbmRleCArIDF9YCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRm9yIHNtYXJ0IHN0eWxlLCB1c2UgcHJlZGVmaW5lZCBzdHlsZXNcbiAgICAgICAgICBsZXQgc3R5bGVPdmVycmlkZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGxldCBzdHlsZUxhYmVsOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKHNlbGVjdGVkQXJ0aXN0aWNTdHlsZSA9PT0gXCJhaS1zbWFydC1zdHlsZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBwcmVkZWZpbmVkU3R5bGVzID0gW1wid2F0ZXJjb2xvclwiLCBcImJvdGFuaWNhbFwiLCBcImNvbWljLWJvb2tcIiwgXCJkcmVhbXktZmFudGFzeVwiLCBcIm1pbmltYWxpc3RcIl07XG4gICAgICAgICAgICBjb25zdCBzdHlsZUxhYmVscyA9IFtcIvCfjqggV2F0ZXJjb2xvclwiLCBcIvCfjL8gQm90YW5pY2FsXCIsIFwi8J+SpSBDb21pYyBCb29rXCIsIFwi8J+MuCBEcmVhbXkgRmFudGFzeVwiLCBcIuKcqCBNaW5pbWFsaXN0XCJdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzdHlsZU92ZXJyaWRlID0gcHJlZGVmaW5lZFN0eWxlc1tpbmRleF07XG4gICAgICAgICAgICBzdHlsZUxhYmVsID0gc3R5bGVMYWJlbHNbaW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBHZW5lcmF0ZSBmcm9udCBjb3ZlciBwcm9tcHRcbiAgICAgICAgICBjb25zdCBzZWxlY3RlZFN0eWxlID0gYXJ0aXN0aWNTdHlsZXMuZmluZChzdHlsZSA9PiBzdHlsZS5pZCA9PT0gKHN0eWxlT3ZlcnJpZGUgfHwgc2VsZWN0ZWRBcnRpc3RpY1N0eWxlKSk7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgZHJhZnRDb25maWc6IERyYWZ0Q29uZmlnID0ge1xuICAgICAgICAgICAgY2FyZFR5cGU6IHNlbGVjdGVkVHlwZSxcbiAgICAgICAgICAgIGN1c3RvbUNhcmRUeXBlOiBjdXN0b21DYXJkVHlwZSxcbiAgICAgICAgICAgIHRvbmU6IHNlbGVjdGVkVG9uZSxcbiAgICAgICAgICAgIHRvbmVMYWJlbDogc2VsZWN0ZWRUb25lT2JqID8gc2VsZWN0ZWRUb25lT2JqLmxhYmVsIDogXCJIZWFydGZlbHRcIixcbiAgICAgICAgICAgIHRvbmVEZXNjcmlwdGlvbjogdG9uZURlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdGhlbWU6IGVmZmVjdGl2ZVByb21wdCxcbiAgICAgICAgICAgIHRvRmllbGQ6IHRvRmllbGQsXG4gICAgICAgICAgICBmcm9tRmllbGQ6IGZyb21GaWVsZCxcbiAgICAgICAgICAgIGFydGlzdGljU3R5bGU6IHNlbGVjdGVkU3R5bGUsXG4gICAgICAgICAgICByZWZlcmVuY2VJbWFnZVVybHM6IHJlZmVyZW5jZUltYWdlVXJscyxcbiAgICAgICAgICAgIHBob3RvQW5hbHlzZXM6IHByb3BzLnBob3RvQW5hbHlzZXMsXG4gICAgICAgICAgICBpc0RyYWZ0VmFyaWF0aW9uOiBzZWxlY3RlZEFydGlzdGljU3R5bGUgPT09IFwic21hcnRcIixcbiAgICAgICAgICAgIHZhcmlhdGlvbkluZGV4OiBpbmRleFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCB7IHByb21wdDogZnJvbnRDb3ZlclByb21wdFF1ZXJ5LCBpbWFnZXMgfSA9IFByb21wdEdlbmVyYXRvci5nZW5lcmF0ZURyYWZ0UHJvbXB0V2l0aEltYWdlcyhkcmFmdENvbmZpZyk7XG4gICAgICAgICAgXG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgZnJvbnRDb3ZlclByb21wdCA9IGF3YWl0IGNoYXRXaXRoQUkoZnJvbnRDb3ZlclByb21wdFF1ZXJ5LCB7XG4gICAgICAgICAgICBtb2RlbDogXCJnZW1pbmktMi41LXByb1wiLFxuICAgICAgICAgICAgYXR0YWNobWVudHM6IGltYWdlc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFmcm9udENvdmVyUHJvbXB0Py50cmltKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZW5lcmF0ZSBmcm9udCBjb3ZlciBwcm9tcHRcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRW5oYW5jZSB3aXRoIHJlZmVyZW5jZSBpbWFnZSBpbnN0cnVjdGlvbnNcbiAgICAgICAgICBsZXQgZW5oYW5jZWRGcm9udENvdmVyUHJvbXB0ID0gZnJvbnRDb3ZlclByb21wdC50cmltKCk7XG4gICAgICAgICAgZW5oYW5jZWRGcm9udENvdmVyUHJvbXB0ID0gUHJvbXB0R2VuZXJhdG9yLmVuaGFuY2VQcm9tcHRXaXRoUmVmZXJlbmNlUGhvdG9zKFxuICAgICAgICAgICAgZW5oYW5jZWRGcm9udENvdmVyUHJvbXB0LFxuICAgICAgICAgICAgcmVmZXJlbmNlSW1hZ2VVcmxzLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICBzZWxlY3RlZERyYWZ0TW9kZWxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gR2VuZXJhdGUgdGhlIGltYWdlXG4gICAgICAgICAgY29uc3Qgam9iSWQgPSBgZHJhZnQtJHtpbmRleH0tJHt1dWlkdjQoKX1gO1xuICAgICAgICAgIGNvbnN0IGlucHV0SW1hZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgIGlmIChyZWZlcmVuY2VJbWFnZVVybHMubGVuZ3RoID4gMCAmJiBzZWxlY3RlZERyYWZ0TW9kZWwgPT09IFwiZ3B0LWltYWdlLTFcIikge1xuICAgICAgICAgICAgaW5wdXRJbWFnZXMucHVzaCguLi5yZWZlcmVuY2VJbWFnZVVybHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvZ2VuZXJhdGUtY2FyZC1hc3luYycsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIGpvYklkLFxuICAgICAgICAgICAgICBwcm9tcHRzOiB7IGZyb250Q292ZXI6IGVuaGFuY2VkRnJvbnRDb3ZlclByb21wdCB9LFxuICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICB1c2VyTnVtYmVyOiBcIisxNzE0NTk4NjEwNVwiLFxuICAgICAgICAgICAgICAgIG1vZGVsVmVyc2lvbjogc2VsZWN0ZWREcmFmdE1vZGVsLFxuICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiBwYXBlclNpemVzLmZpbmQoc2l6ZSA9PiBzaXplLmlkID09PSBzZWxlY3RlZFBhcGVyU2l6ZSk/LmFzcGVjdFJhdGlvIHx8IFwiOToxNlwiLFxuICAgICAgICAgICAgICAgIHF1YWxpdHk6IFwibG93XCIsXG4gICAgICAgICAgICAgICAgb3V0cHV0Rm9ybWF0OiBcImpwZWdcIixcbiAgICAgICAgICAgICAgICBvdXRwdXRDb21wcmVzc2lvbjogMTAwLFxuICAgICAgICAgICAgICAgIG1vZGVyYXRpb246IFwibG93XCIsXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uczogcGFwZXJTaXplcy5maW5kKHNpemUgPT4gc2l6ZS5pZCA9PT0gc2VsZWN0ZWRQYXBlclNpemUpPy5kaW1lbnNpb25zIHx8IFwiMTAyNHgxNTM2XCIsXG4gICAgICAgICAgICAgICAgaXNGcm9udEJhY2tPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZXJFbWFpbCxcbiAgICAgICAgICAgICAgICBjYXJkVHlwZTogY2FyZFR5cGVGb3JQcm9tcHQsXG4gICAgICAgICAgICAgICAgdG9GaWVsZCxcbiAgICAgICAgICAgICAgICBmcm9tRmllbGQsXG4gICAgICAgICAgICAgICAgaXNEcmFmdE1vZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgLi4uKGlucHV0SW1hZ2VzLmxlbmd0aCA+IDAgJiYgeyBcbiAgICAgICAgICAgICAgICAgIGlucHV0X2ltYWdlczogaW5wdXRJbWFnZXMsXG4gICAgICAgICAgICAgICAgICBpbnB1dF9pbWFnZXNfbW9kZTogXCJmcm9udF9jb3Zlcl9vbmx5XCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTZXJ2ZXIgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyAhPT0gJ3Byb2Nlc3NpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0Lm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBzdGFydCBkcmFmdCBnZW5lcmF0aW9uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc29sZS5sb2coYOKchSBEcmFmdCB2YXJpYXRpb24gJHtpbmRleCArIDF9IGpvYiBzdGFydGVkOmAsIGpvYklkKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTYXZlIGRyYWZ0IGpvYiB0byBzdG9yYWdlIGZvciByZWNvdmVyeVxuICAgICAgICAgIHNhdmVKb2JUb1N0b3JhZ2Uoam9iSWQsIHtcbiAgICAgICAgICAgIGlzRHJhZnQ6IHRydWUsXG4gICAgICAgICAgICBkcmFmdEluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIHN0eWxlSW5mbzogc3R5bGVPdmVycmlkZSA/IHsgc3R5bGVOYW1lOiBzdHlsZU92ZXJyaWRlLCBzdHlsZUxhYmVsOiBzdHlsZUxhYmVsIH0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmcm9udENvdmVyUHJvbXB0OiBlbmhhbmNlZEZyb250Q292ZXJQcm9tcHQsXG4gICAgICAgICAgICB1c2VyRW1haWwsXG4gICAgICAgICAgICBzZWxlY3RlZFR5cGUsXG4gICAgICAgICAgICBzZWxlY3RlZFRvbmUsXG4gICAgICAgICAgICB0b0ZpZWxkLFxuICAgICAgICAgICAgZnJvbUZpZWxkLFxuICAgICAgICAgICAgZHJhZnRDYXJkczogW10gIC8vIFdpbGwgYmUgdXBkYXRlZCBhcyBkcmFmdHMgY29tcGxldGVcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFN1YnNjcmliZSB0byBXZWJTb2NrZXQgdXBkYXRlc1xuICAgICAgICAgIHN1YnNjcmliZVRvSm9iKGpvYklkKTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBEcmFmdCB2YXJpYXRpb24gJHtpbmRleCArIDF9IGZhaWxlZDpgLCBlcnJvcik7XG4gICAgICAgICAgdG9hc3QuZXJyb3IoYERyYWZ0IHZhcmlhdGlvbiAke2luZGV4ICsgMX0gZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gV2FpdCBmb3IgYWxsIGRyYWZ0IGdlbmVyYXRpb25zIHRvIHN0YXJ0XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoZHJhZnRQcm9taXNlcyk7XG4gICAgICBjb25zb2xlLmxvZyhcIvCfmoAgQWxsIGRyYWZ0IHZhcmlhdGlvbnMgc3RhcnRlZFwiKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEcmFmdCBjYXJkIGdlbmVyYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdG9hc3QuZXJyb3IoYEZhaWxlZCB0byBzdGFydCBkcmFmdCBnZW5lcmF0aW9uOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgICAgXG4gICAgICBzZXRJc0dlbmVyYXRpbmcoZmFsc2UpO1xuICAgICAgc2V0SXNEcmFmdE1vZGUoZmFsc2UpO1xuICAgICAgc2V0RHJhZnRDb21wbGV0aW9uU2hvd24oZmFsc2UpO1xuICAgICAgc2V0RHJhZnRDb21wbGV0aW9uQ291bnQoMCk7XG4gICAgICBzZXRHZW5lcmF0aW9uUHJvZ3Jlc3MoXCJcIik7XG4gICAgICBwcm9wcy5zdG9wRWxhcHNlZFRpbWVUcmFja2luZygpO1xuICAgICAgXG4gICAgICAvLyBDbGVhciBwcm9ncmVzcyBpbnRlcnZhbCBvbiBlcnJvclxuICAgICAgaWYgKHByb2dyZXNzSW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9ncmVzc0ludGVydmFsKTtcbiAgICAgICAgc2V0UHJvZ3Jlc3NJbnRlcnZhbChudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtwcm9wcywgcHJvZ3Jlc3NJbnRlcnZhbF0pO1xuXG4gIC8vIEdlbmVyYXRlIGZpbmFsIGhpZ2gtcXVhbGl0eSBjYXJkIGZyb20gc2VsZWN0ZWQgZHJhZnRcbiAgY29uc3QgaGFuZGxlR2VuZXJhdGVGaW5hbEZyb21EcmFmdCA9IHVzZUNhbGxiYWNrKGFzeW5jIChkaXNwbGF5SW5kZXg6IG51bWJlcikgPT4ge1xuICAgIC8vIFByZXZlbnQgZHVwbGljYXRlIGNhbGxzXG4gICAgaWYgKGlzR2VuZXJhdGluZ0ZpbmFsQ2FyZCkge1xuICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyBGaW5hbCBjYXJkIGdlbmVyYXRpb24gYWxyZWFkeSBpbiBwcm9ncmVzcywgc2tpcHBpbmcgZHVwbGljYXRlIGNhbGwnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgc2VsZWN0ZWREcmFmdCA9IGRyYWZ0Q2FyZHNbZGlzcGxheUluZGV4XTtcbiAgICBpZiAoIXNlbGVjdGVkRHJhZnQpIHtcbiAgICAgIHRvYXN0LmVycm9yKFwiUGxlYXNlIHdhaXQgZm9yIHRoZSBkcmFmdCB0byBjb21wbGV0ZSBiZWZvcmUgc2VsZWN0aW5nXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHNlbGVjdGVkVHlwZSxcbiAgICAgIGN1c3RvbUNhcmRUeXBlLFxuICAgICAgc2VsZWN0ZWRUb25lLFxuICAgICAgcHJvbXB0LFxuICAgICAgdG9GaWVsZCxcbiAgICAgIGZyb21GaWVsZCxcbiAgICAgIGZpbmFsQ2FyZE1lc3NhZ2UsXG4gICAgICBpc0hhbmR3cml0dGVuTWVzc2FnZSxcbiAgICAgIHNlbGVjdGVkQXJ0aXN0aWNTdHlsZSxcbiAgICAgIGN1c3RvbVN0eWxlRGVzY3JpcHRpb24sXG4gICAgICBpc0Zyb250QmFja09ubHksXG4gICAgICBzZWxlY3RlZEltYWdlTW9kZWwsXG4gICAgICBzZWxlY3RlZFBhcGVyU2l6ZSxcbiAgICAgIHVzZXJFbWFpbCxcbiAgICAgIHJlZmVyZW5jZUltYWdlVXJscyxcbiAgICAgIHN0YXJ0RWxhcHNlZFRpbWVUcmFja2luZyxcbiAgICAgIHN1YnNjcmliZVRvSm9iXG4gICAgfSA9IHByb3BzO1xuXG4gICAgLy8gU3RvcCBhbnkgZXhpc3RpbmcgdGltZXJzIGZpcnN0XG4gICAgcHJvcHMuc3RvcEVsYXBzZWRUaW1lVHJhY2tpbmcoKTtcbiAgICBcbiAgICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgcHJvZ3Jlc3MgaW50ZXJ2YWxcbiAgICBjbGVhclByb2dyZXNzSW50ZXJ2YWwoKTtcbiAgICBcbiAgICBzZXRJc0dlbmVyYXRpbmdGaW5hbENhcmQodHJ1ZSk7XG4gICAgc2V0SXNEcmFmdE1vZGUoZmFsc2UpOyAvLyBTd2l0Y2ggb3V0IG9mIGRyYWZ0IG1vZGUgZm9yIGZpbmFsIGdlbmVyYXRpb25cbiAgICBzZXRTZWxlY3RlZERyYWZ0SW5kZXgoZGlzcGxheUluZGV4KTtcbiAgICBzdGFydEVsYXBzZWRUaW1lVHJhY2tpbmcoJ2ZpbmFsJyk7XG4gICAgc2V0R2VuZXJhdGlvblByb2dyZXNzKFwi8J+OqCBDcmVhdGluZyBoaWdoLXF1YWxpdHkgdmVyc2lvbiBvZiB5b3VyIHNlbGVjdGVkIGRlc2lnbi4uLlwiKTtcbiAgICBzZXRQcm9ncmVzc1BlcmNlbnRhZ2UoMCk7XG4gICAgXG4gICAgLy8gU2ltcGxlIHRpbWUtYmFzZWQgcHJvZ3Jlc3MgZm9yIGZpbmFsIGNhcmQgLSBpbmNyZWFzZXMgYnkgfjEuMSUgcGVyIHNlY29uZCAoOTAgc2Vjb25kcyB0byByZWFjaCAxMDAlKVxuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgc2V0UHJvZ3Jlc3NQZXJjZW50YWdlKHByZXYgPT4ge1xuICAgICAgICBjb25zdCBuZXdQcm9ncmVzcyA9IHByZXYgKyAxLjE7XG4gICAgICAgIHJldHVybiBuZXdQcm9ncmVzcyA+PSA5NSA/IDk1IDogbmV3UHJvZ3Jlc3M7IC8vIENhcCBhdCA5NSUgdW50aWwgY29tcGxldGlvblxuICAgICAgfSk7XG4gICAgfSwgMTAwMCk7IC8vIFVwZGF0ZSBldmVyeSBzZWNvbmRcbiAgICBcbiAgICBzZXRQcm9ncmVzc0ludGVydmFsKGludGVydmFsKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBqb2JJZCA9IHV1aWR2NCgpO1xuICAgICAgXG4gICAgICAvLyBHZW5lcmF0ZSB0aGUgbWlzc2luZyBwcm9tcHRzXG4gICAgICBjb25zdCBzdG9yZWRGcm9udENvdmVyUHJvbXB0ID0gc2VsZWN0ZWREcmFmdC5nZW5lcmF0ZWRQcm9tcHRzPy5mcm9udENvdmVyO1xuICAgICAgaWYgKCFzdG9yZWRGcm9udENvdmVyUHJvbXB0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlbGVjdGVkIGRyYWZ0IGlzIG1pc3NpbmcgZnJvbnRDb3ZlciBwcm9tcHRcIik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IGNhcmRUeXBlRm9yUHJvbXB0ID0gc2VsZWN0ZWRUeXBlID09PSBcImN1c3RvbVwiID8gY3VzdG9tQ2FyZFR5cGUgOiBzZWxlY3RlZFR5cGU7XG4gICAgICBjb25zdCBzZWxlY3RlZFRvbmVPYmogPSBjYXJkVG9uZXMuZmluZCh0b25lID0+IHRvbmUuaWQgPT09IHNlbGVjdGVkVG9uZSk7XG4gICAgICBjb25zdCB0b25lRGVzY3JpcHRpb24gPSBzZWxlY3RlZFRvbmVPYmogPyBzZWxlY3RlZFRvbmVPYmouZGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKSA6IFwiaGVhcnRmZWx0IGFuZCBzaW5jZXJlXCI7XG4gICAgICBjb25zdCBlZmZlY3RpdmVQcm9tcHQgPSBwcm9tcHQudHJpbSgpIHx8IGBBIGJlYXV0aWZ1bCAke2NhcmRUeXBlRm9yUHJvbXB0fSBjYXJkIHdpdGggJHt0b25lRGVzY3JpcHRpb259IHN0eWxlYDtcbiAgICAgIFxuICAgICAgbGV0IG1lc3NhZ2VDb250ZW50ID0gZmluYWxDYXJkTWVzc2FnZTtcbiAgICAgIGlmIChpc0hhbmR3cml0dGVuTWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlQ29udGVudCA9IFwiW0JsYW5rIHNwYWNlIGZvciBoYW5kd3JpdHRlbiBtZXNzYWdlXVwiO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBHZXQgc3R5bGUgZnJvbSB0aGUgc2VsZWN0ZWQgZHJhZnRcbiAgICAgIGNvbnN0IGRyYWZ0U3R5bGVJbmZvID0gc2VsZWN0ZWREcmFmdC5zdHlsZUluZm87XG4gICAgICBsZXQgc2VsZWN0ZWRTdHlsZTtcbiAgICAgIGlmIChkcmFmdFN0eWxlSW5mbyAmJiBkcmFmdFN0eWxlSW5mby5zdHlsZU5hbWUpIHtcbiAgICAgICAgc2VsZWN0ZWRTdHlsZSA9IGFydGlzdGljU3R5bGVzLmZpbmQoc3R5bGUgPT4gc3R5bGUuaWQgPT09IGRyYWZ0U3R5bGVJbmZvLnN0eWxlTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFN0eWxlID0gYXJ0aXN0aWNTdHlsZXMuZmluZChzdHlsZSA9PiBzdHlsZS5pZCA9PT0gc2VsZWN0ZWRBcnRpc3RpY1N0eWxlKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVXNlIFByb21wdEdlbmVyYXRvciBmb3IgZmluYWwgY2FyZCBmcm9tIGRyYWZ0XG4gICAgICBjb25zdCBmaW5hbEZyb21EcmFmdENvbmZpZzogRmluYWxGcm9tRHJhZnRDb25maWcgPSB7XG4gICAgICAgIGZyb250Q292ZXJQcm9tcHQ6IHN0b3JlZEZyb250Q292ZXJQcm9tcHQsXG4gICAgICAgIGNhcmRUeXBlOiBzZWxlY3RlZFR5cGUsXG4gICAgICAgIGN1c3RvbUNhcmRUeXBlOiBjdXN0b21DYXJkVHlwZSxcbiAgICAgICAgdGhlbWU6IGVmZmVjdGl2ZVByb21wdCxcbiAgICAgICAgdG9uZTogc2VsZWN0ZWRUb25lLFxuICAgICAgICB0b25lRGVzY3JpcHRpb246IHRvbmVEZXNjcmlwdGlvbixcbiAgICAgICAgdG9GaWVsZDogdG9GaWVsZCxcbiAgICAgICAgZnJvbUZpZWxkOiBmcm9tRmllbGQsXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VDb250ZW50LFxuICAgICAgICBpc0hhbmR3cml0dGVuTWVzc2FnZTogaXNIYW5kd3JpdHRlbk1lc3NhZ2UsXG4gICAgICAgIGFydGlzdGljU3R5bGU6IHNlbGVjdGVkU3R5bGUsXG4gICAgICAgIGlzRnJvbnRCYWNrT25seTogaXNGcm9udEJhY2tPbmx5XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBmaW5hbFByb21wdHMgPSBhd2FpdCBQcm9tcHRHZW5lcmF0b3IuZ2VuZXJhdGVGaW5hbEZyb21EcmFmdFByb21wdHNDb21iaW5lZChmaW5hbEZyb21EcmFmdENvbmZpZyk7XG5cbiAgICAgIGlmICghZmluYWxQcm9tcHRzIHx8ICFmaW5hbFByb21wdHMuZnJvbnRDb3ZlciB8fCAhZmluYWxQcm9tcHRzLmJhY2tDb3Zlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2VuZXJhdGUgY29tcGxldGUgcHJvbXB0cyBmb3IgZmluYWwgY2FyZFwiKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUHJlcGFyZSBpbnB1dCBpbWFnZXMgZm9yIGZpbmFsIGdlbmVyYXRpb25cbiAgICAgIGNvbnN0IGlucHV0SW1hZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgaWYgKHJlZmVyZW5jZUltYWdlVXJscy5sZW5ndGggPiAwICYmIHNlbGVjdGVkSW1hZ2VNb2RlbCA9PT0gXCJncHQtaW1hZ2UtMVwiKSB7XG4gICAgICAgIGlucHV0SW1hZ2VzLnB1c2goLi4ucmVmZXJlbmNlSW1hZ2VVcmxzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9nZW5lcmF0ZS1jYXJkLWFzeW5jJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBqb2JJZCxcbiAgICAgICAgICBwcm9tcHRzOiBmaW5hbFByb21wdHMsXG4gICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICB1c2VyTnVtYmVyOiBcIisxNzE0NTk4NjEwNVwiLFxuICAgICAgICAgICAgbW9kZWxWZXJzaW9uOiBzZWxlY3RlZEltYWdlTW9kZWwsXG4gICAgICAgICAgICBhc3BlY3RSYXRpbzogcGFwZXJTaXplcy5maW5kKHNpemUgPT4gc2l6ZS5pZCA9PT0gc2VsZWN0ZWRQYXBlclNpemUpPy5hc3BlY3RSYXRpbyB8fCBcIjk6MTZcIixcbiAgICAgICAgICAgIHF1YWxpdHk6IFwiaGlnaFwiLFxuICAgICAgICAgICAgb3V0cHV0Rm9ybWF0OiBcImpwZWdcIixcbiAgICAgICAgICAgIG91dHB1dENvbXByZXNzaW9uOiAxMDAsXG4gICAgICAgICAgICBtb2RlcmF0aW9uOiBcImxvd1wiLFxuICAgICAgICAgICAgZGltZW5zaW9uczogcGFwZXJTaXplcy5maW5kKHNpemUgPT4gc2l6ZS5pZCA9PT0gc2VsZWN0ZWRQYXBlclNpemUpPy5kaW1lbnNpb25zIHx8IFwiMTAyNHgxNTM2XCIsXG4gICAgICAgICAgICBpc0Zyb250QmFja09ubHksXG4gICAgICAgICAgICB1c2VyRW1haWwsXG4gICAgICAgICAgICBjYXJkVHlwZTogc2VsZWN0ZWRUeXBlID09PSBcImN1c3RvbVwiID8gY3VzdG9tQ2FyZFR5cGUgOiBzZWxlY3RlZFR5cGUsXG4gICAgICAgICAgICB0b0ZpZWxkLFxuICAgICAgICAgICAgZnJvbUZpZWxkLFxuICAgICAgICAgICAgaXNEcmFmdE1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgLi4uKGlucHV0SW1hZ2VzLmxlbmd0aCA+IDAgJiYgeyBcbiAgICAgICAgICAgICAgaW5wdXRfaW1hZ2VzOiBpbnB1dEltYWdlcyxcbiAgICAgICAgICAgICAgaW5wdXRfaW1hZ2VzX21vZGU6IFwiZnJvbnRfY292ZXJfb25seVwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmVyIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgXG4gICAgICBpZiAocmVzdWx0LnN0YXR1cyAhPT0gJ3Byb2Nlc3NpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHN0YXJ0IGZpbmFsIGNhcmQgZ2VuZXJhdGlvbicpO1xuICAgICAgfVxuXG4gICAgICBzZXRDdXJyZW50Sm9iSWQoam9iSWQpO1xuICAgICAgdG9hc3Quc3VjY2VzcyhcIvCfjqggR2VuZXJhdGluZyBoaWdoLXF1YWxpdHkgdmVyc2lvbiBvZiB5b3VyIHNlbGVjdGVkIGRlc2lnbiFcIik7XG4gICAgICBcbiAgICAgIC8vIFN1YnNjcmliZSB0byBXZWJTb2NrZXQgdXBkYXRlc1xuICAgICAgc3Vic2NyaWJlVG9Kb2Ioam9iSWQpO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZpbmFsIGNhcmQgZ2VuZXJhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgICB0b2FzdC5lcnJvcihcIkZhaWxlZCB0byBnZW5lcmF0ZSBmaW5hbCBjYXJkLiBQbGVhc2UgdHJ5IGFnYWluLlwiKTtcbiAgICAgIHNldElzR2VuZXJhdGluZ0ZpbmFsQ2FyZChmYWxzZSk7XG4gICAgICBzZXRHZW5lcmF0aW9uUHJvZ3Jlc3MoXCJcIik7XG4gICAgICBzZXRQcm9ncmVzc1BlcmNlbnRhZ2UoMCk7XG4gICAgICBwcm9wcy5zdG9wRWxhcHNlZFRpbWVUcmFja2luZygpO1xuICAgICAgY2xlYXJQcm9ncmVzc0ludGVydmFsKCk7IC8vIENsZWFyIHRpbWUtYmFzZWQgcHJvZ3Jlc3Mgb24gZXJyb3JcbiAgICB9XG4gIH0sIFtkcmFmdENhcmRzLCBpc0dlbmVyYXRpbmdGaW5hbENhcmQsIHByb3BzXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBpc0RyYWZ0TW9kZSxcbiAgICBzZXRJc0RyYWZ0TW9kZSxcbiAgICBkcmFmdENhcmRzLFxuICAgIHNldERyYWZ0Q2FyZHMsXG4gICAgc2VsZWN0ZWREcmFmdEluZGV4LFxuICAgIHNldFNlbGVjdGVkRHJhZnRJbmRleCxcbiAgICBpc0dlbmVyYXRpbmdGaW5hbENhcmQsXG4gICAgc2V0SXNHZW5lcmF0aW5nRmluYWxDYXJkLFxuICAgIHByZXZpZXdpbmdEcmFmdEluZGV4LFxuICAgIHNldFByZXZpZXdpbmdEcmFmdEluZGV4LFxuICAgIGRyYWZ0Q29tcGxldGlvblNob3duLFxuICAgIHNldERyYWZ0Q29tcGxldGlvblNob3duLFxuICAgIGRyYWZ0Q29tcGxldGlvbkNvdW50LFxuICAgIHNldERyYWZ0Q29tcGxldGlvbkNvdW50LFxuICAgIGhhbmRsZUdlbmVyYXRlRHJhZnRDYXJkcyxcbiAgICBoYW5kbGVHZW5lcmF0ZUZpbmFsRnJvbURyYWZ0LFxuICAgIGlzR2VuZXJhdGluZyxcbiAgICBzZXRJc0dlbmVyYXRpbmcsXG4gICAgZ2VuZXJhdGlvblByb2dyZXNzLFxuICAgIHNldEdlbmVyYXRpb25Qcm9ncmVzcyxcbiAgICBwcm9ncmVzc1BlcmNlbnRhZ2UsXG4gICAgc2V0UHJvZ3Jlc3NQZXJjZW50YWdlLFxuICAgIGdlbmVyYXRlZENhcmQsXG4gICAgc2V0R2VuZXJhdGVkQ2FyZCxcbiAgICBnZW5lcmF0ZWRDYXJkcyxcbiAgICBzZXRHZW5lcmF0ZWRDYXJkcyxcbiAgICBpc0NhcmRDb21wbGV0ZWQsXG4gICAgc2V0SXNDYXJkQ29tcGxldGVkLFxuICAgIGN1cnJlbnRKb2JJZCxcbiAgICBzZXRDdXJyZW50Sm9iSWQsXG4gICAgY2xlYXJQcm9ncmVzc0ludGVydmFsXG4gIH07XG59Il0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJ0b2FzdCIsInY0IiwidXVpZHY0IiwiUHJvbXB0R2VuZXJhdG9yIiwiYXJ0aXN0aWNTdHlsZXMiLCJwYXBlclNpemVzIiwiY2FyZFRvbmVzIiwiY2hhdFdpdGhBSSIsInVzZURyYWZ0R2VuZXJhdGlvbiIsInByb3BzIiwiaXNEcmFmdE1vZGUiLCJzZXRJc0RyYWZ0TW9kZSIsImRyYWZ0Q2FyZHMiLCJzZXREcmFmdENhcmRzIiwic2VsZWN0ZWREcmFmdEluZGV4Iiwic2V0U2VsZWN0ZWREcmFmdEluZGV4IiwiaXNHZW5lcmF0aW5nRmluYWxDYXJkIiwic2V0SXNHZW5lcmF0aW5nRmluYWxDYXJkIiwicHJldmlld2luZ0RyYWZ0SW5kZXgiLCJzZXRQcmV2aWV3aW5nRHJhZnRJbmRleCIsImRyYWZ0Q29tcGxldGlvblNob3duIiwic2V0RHJhZnRDb21wbGV0aW9uU2hvd24iLCJkcmFmdENvbXBsZXRpb25Db3VudCIsInNldERyYWZ0Q29tcGxldGlvbkNvdW50IiwiaXNHZW5lcmF0aW5nIiwic2V0SXNHZW5lcmF0aW5nIiwiZ2VuZXJhdGlvblByb2dyZXNzIiwic2V0R2VuZXJhdGlvblByb2dyZXNzIiwicHJvZ3Jlc3NQZXJjZW50YWdlIiwic2V0UHJvZ3Jlc3NQZXJjZW50YWdlIiwiZ2VuZXJhdGVkQ2FyZCIsInNldEdlbmVyYXRlZENhcmQiLCJnZW5lcmF0ZWRDYXJkcyIsInNldEdlbmVyYXRlZENhcmRzIiwiaXNDYXJkQ29tcGxldGVkIiwic2V0SXNDYXJkQ29tcGxldGVkIiwiY3VycmVudEpvYklkIiwic2V0Q3VycmVudEpvYklkIiwicHJvZ3Jlc3NJbnRlcnZhbCIsInNldFByb2dyZXNzSW50ZXJ2YWwiLCJjbGVhclByb2dyZXNzSW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaGFuZGxlR2VuZXJhdGVEcmFmdENhcmRzIiwidXNlckVtYWlsIiwic2VsZWN0ZWRBcnRpc3RpY1N0eWxlIiwiY3VzdG9tU3R5bGVEZXNjcmlwdGlvbiIsInJlZmVyZW5jZUltYWdlVXJscyIsInNlbGVjdGVkRHJhZnRNb2RlbCIsInNlbGVjdGVkVHlwZSIsImN1c3RvbUNhcmRUeXBlIiwic2VsZWN0ZWRUb25lIiwicHJvbXB0IiwidG9GaWVsZCIsImZyb21GaWVsZCIsInNlbGVjdGVkUGFwZXJTaXplIiwic2F2ZUpvYlRvU3RvcmFnZSIsInN1YnNjcmliZVRvSm9iIiwic3RhcnRFbGFwc2VkVGltZVRyYWNraW5nIiwidHJpbSIsImVycm9yIiwiZW1haWxSZWdleCIsInRlc3QiLCJsZW5ndGgiLCJzdG9wRWxhcHNlZFRpbWVUcmFja2luZyIsInVuc3Vic2NyaWJlRnJvbUFsbEpvYnMiLCJjb25zb2xlIiwibG9nIiwia2V5cyIsIk9iamVjdCIsImxvY2FsU3RvcmFnZSIsImZvckVhY2giLCJrZXkiLCJzdGFydHNXaXRoIiwicmVtb3ZlSXRlbSIsInBlbmRpbmdKb2JzIiwiSlNPTiIsInBhcnNlIiwiZ2V0SXRlbSIsImZpbHRlcmVkSm9icyIsImZpbHRlciIsImlkIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJwcmV2IiwibmV3UHJvZ3Jlc3MiLCJjYXJkVHlwZUZvclByb21wdCIsInNlbGVjdGVkVG9uZU9iaiIsImZpbmQiLCJ0b25lIiwidG9uZURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJ0b0xvd2VyQ2FzZSIsImVmZmVjdGl2ZVByb21wdCIsImRyYWZ0UHJvbWlzZXMiLCJBcnJheSIsImZyb20iLCJfIiwiaW5kZXgiLCJzdHlsZU92ZXJyaWRlIiwidW5kZWZpbmVkIiwic3R5bGVMYWJlbCIsInByZWRlZmluZWRTdHlsZXMiLCJzdHlsZUxhYmVscyIsInNlbGVjdGVkU3R5bGUiLCJzdHlsZSIsImRyYWZ0Q29uZmlnIiwiY2FyZFR5cGUiLCJ0b25lTGFiZWwiLCJsYWJlbCIsInRoZW1lIiwiYXJ0aXN0aWNTdHlsZSIsInBob3RvQW5hbHlzZXMiLCJpc0RyYWZ0VmFyaWF0aW9uIiwidmFyaWF0aW9uSW5kZXgiLCJmcm9udENvdmVyUHJvbXB0UXVlcnkiLCJpbWFnZXMiLCJnZW5lcmF0ZURyYWZ0UHJvbXB0V2l0aEltYWdlcyIsImZyb250Q292ZXJQcm9tcHQiLCJtb2RlbCIsImF0dGFjaG1lbnRzIiwiRXJyb3IiLCJlbmhhbmNlZEZyb250Q292ZXJQcm9tcHQiLCJlbmhhbmNlUHJvbXB0V2l0aFJlZmVyZW5jZVBob3RvcyIsImpvYklkIiwiaW5wdXRJbWFnZXMiLCJwdXNoIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwicHJvbXB0cyIsImZyb250Q292ZXIiLCJjb25maWciLCJ1c2VyTnVtYmVyIiwibW9kZWxWZXJzaW9uIiwiYXNwZWN0UmF0aW8iLCJzaXplIiwicXVhbGl0eSIsIm91dHB1dEZvcm1hdCIsIm91dHB1dENvbXByZXNzaW9uIiwibW9kZXJhdGlvbiIsImRpbWVuc2lvbnMiLCJpc0Zyb250QmFja09ubHkiLCJpbnB1dF9pbWFnZXMiLCJpbnB1dF9pbWFnZXNfbW9kZSIsIm9rIiwic3RhdHVzIiwicmVzdWx0IiwianNvbiIsIm1lc3NhZ2UiLCJpc0RyYWZ0IiwiZHJhZnRJbmRleCIsInN0eWxlSW5mbyIsInN0eWxlTmFtZSIsIlByb21pc2UiLCJhbGxTZXR0bGVkIiwiaGFuZGxlR2VuZXJhdGVGaW5hbEZyb21EcmFmdCIsImRpc3BsYXlJbmRleCIsInNlbGVjdGVkRHJhZnQiLCJmaW5hbENhcmRNZXNzYWdlIiwiaXNIYW5kd3JpdHRlbk1lc3NhZ2UiLCJzZWxlY3RlZEltYWdlTW9kZWwiLCJzdG9yZWRGcm9udENvdmVyUHJvbXB0IiwiZ2VuZXJhdGVkUHJvbXB0cyIsIm1lc3NhZ2VDb250ZW50IiwiZHJhZnRTdHlsZUluZm8iLCJmaW5hbEZyb21EcmFmdENvbmZpZyIsImZpbmFsUHJvbXB0cyIsImdlbmVyYXRlRmluYWxGcm9tRHJhZnRQcm9tcHRzQ29tYmluZWQiLCJiYWNrQ292ZXIiLCJzdWNjZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/cardStudio/useDraftGeneration.ts\n"));

/***/ })

});