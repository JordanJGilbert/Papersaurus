"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/wizard/page",{

/***/ "(app-pages-browser)/./hooks/useCardStudioRefactored.ts":
/*!******************************************!*\
  !*** ./hooks/useCardStudioRefactored.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCardStudio: function() { return /* binding */ useCardStudio; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var _cardStudio_useWebSocket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cardStudio/useWebSocket */ \"(app-pages-browser)/./hooks/cardStudio/useWebSocket.ts\");\n/* harmony import */ var _cardStudio_useJobManagementSimplified__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cardStudio/useJobManagementSimplified */ \"(app-pages-browser)/./hooks/cardStudio/useJobManagementSimplified.ts\");\n/* harmony import */ var _cardStudio_useMessageGeneration__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cardStudio/useMessageGeneration */ \"(app-pages-browser)/./hooks/cardStudio/useMessageGeneration.ts\");\n/* harmony import */ var _cardStudio_useFileHandling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cardStudio/useFileHandling */ \"(app-pages-browser)/./hooks/cardStudio/useFileHandling.ts\");\n/* harmony import */ var _cardStudio_useDraftGeneration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cardStudio/useDraftGeneration */ \"(app-pages-browser)/./hooks/cardStudio/useDraftGeneration.ts\");\n/* harmony import */ var _cardStudio_useCardGeneration__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cardStudio/useCardGeneration */ \"(app-pages-browser)/./hooks/cardStudio/useCardGeneration.ts\");\n/* harmony import */ var _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cardStudio/constants */ \"(app-pages-browser)/./hooks/cardStudio/constants.ts\");\n/* harmony import */ var _cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cardStudio/utils */ \"(app-pages-browser)/./hooks/cardStudio/utils.ts\");\n/* harmony import */ var _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/lib/storageManager */ \"(app-pages-browser)/./lib/storageManager.ts\");\n/* __next_internal_client_entry_do_not_use__ useCardStudio auto */ \n\n// Import modular hooks\n\n\n\n\n\n\n// Import constants and utils\n\n\n\nfunction useCardStudio() {\n    // Core form state\n    const [prompt, setPrompt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [toField, setToField] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [fromField, setFromField] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [relationshipField, setRelationshipField] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [personalTraits, setPersonalTraits] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedType, setSelectedType] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"birthday\");\n    const [customCardType, setCustomCardType] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedTone, setSelectedTone] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"funny\");\n    // Advanced options state\n    const [showAdvanced, setShowAdvanced] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [selectedArtisticStyle, setSelectedArtisticStyle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"ai-smart-style\");\n    const [customStyleDescription, setCustomStyleDescription] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedImageModel, setSelectedImageModel] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"gpt-image-1\");\n    const [selectedDraftModel, setSelectedDraftModel] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"gpt-image-1\");\n    const [fastPreviewMode, setFastPreviewMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    // Email state\n    const [userEmail, setUserEmail] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    // Card options\n    const [numberOfCards, setNumberOfCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const [isHandwrittenMessage, setIsHandwrittenMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isFrontBackOnly, setIsFrontBackOnly] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [selectedPaperSize, setSelectedPaperSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"standard\");\n    // UI state\n    const [isTextareaExpanded, setIsTextareaExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isMessageExpanded, setIsMessageExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showSettings, setShowSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showTemplateGallery, setShowTemplateGallery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showPrintConfirmation, setShowPrintConfirmation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showTemplateCustomization, setShowTemplateCustomization] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Restoration state\n    const [isRestoringJobs, setIsRestoringJobs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [selectedTemplate, setSelectedTemplate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isInitialLoadComplete, setIsInitialLoadComplete] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Template state\n    const [templateSearchQuery, setTemplateSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [isSearchingTemplates, setIsSearchingTemplates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [aiFilteredCards, setAiFilteredCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [searchMode, setSearchMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"text\");\n    const [textFilteredCards, setTextFilteredCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [showPrompts, setShowPrompts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [printOption, setPrintOption] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"physical\");\n    // Template customization state\n    const [templateCustomizations, setTemplateCustomizations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        promptChanges: \"\",\n        messageChanges: \"\",\n        useReferenceImage: false,\n        referenceImageFile: null,\n        referenceImageUrls: [],\n        referenceImageTransformation: \"\"\n    });\n    // Section loading states\n    const [sectionLoadingStates, setSectionLoadingStates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        frontCover: \"idle\",\n        backCover: \"idle\",\n        leftInterior: \"idle\",\n        rightInterior: \"idle\"\n    });\n    // Countdown state\n    const [countdown, setCountdown] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [countdownInterval, setCountdownInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Use modular hooks\n    const webSocket = (0,_cardStudio_useWebSocket__WEBPACK_IMPORTED_MODULE_2__.useWebSocket)();\n    const jobManagement = (0,_cardStudio_useJobManagementSimplified__WEBPACK_IMPORTED_MODULE_3__.useJobManagement)();\n    const fileHandling = (0,_cardStudio_useFileHandling__WEBPACK_IMPORTED_MODULE_5__.useFileHandling)();\n    const messageGeneration = (0,_cardStudio_useMessageGeneration__WEBPACK_IMPORTED_MODULE_4__.useMessageGeneration)(selectedType, customCardType, selectedTone, prompt, toField, fromField, relationshipField, fileHandling.photoReferences);\n    // Draft generation props\n    const draftGenerationProps = {\n        selectedType,\n        customCardType,\n        selectedTone,\n        selectedArtisticStyle,\n        customStyleDescription,\n        selectedDraftModel,\n        selectedImageModel,\n        selectedPaperSize,\n        prompt,\n        personalTraits,\n        toField,\n        fromField,\n        userEmail,\n        finalCardMessage: messageGeneration.finalCardMessage,\n        isHandwrittenMessage,\n        isFrontBackOnly,\n        referenceImageUrls: fileHandling.referenceImageUrls,\n        photoReferences: fileHandling.photoReferences,\n        relationshipField,\n        saveJobToStorage: jobManagement.saveJobToStorage,\n        subscribeToJob: webSocket.subscribeToJob,\n        unsubscribeFromAllJobs: webSocket.unsubscribeFromAllJobs,\n        startElapsedTimeTracking: jobManagement.startElapsedTimeTracking,\n        stopElapsedTimeTracking: jobManagement.stopElapsedTimeTracking,\n        setProgressPercentage: jobManagement.setProgressPercentage\n    };\n    const draftGeneration = (0,_cardStudio_useDraftGeneration__WEBPACK_IMPORTED_MODULE_6__.useDraftGeneration)(draftGenerationProps);\n    // Card generation props\n    const cardGenerationProps = {\n        selectedType,\n        customCardType,\n        selectedTone,\n        selectedArtisticStyle,\n        customStyleDescription,\n        selectedImageModel,\n        selectedPaperSize,\n        prompt,\n        personalTraits,\n        toField,\n        fromField,\n        userEmail,\n        finalCardMessage: messageGeneration.finalCardMessage,\n        isHandwrittenMessage,\n        isFrontBackOnly,\n        referenceImageUrls: fileHandling.referenceImageUrls,\n        photoReferences: fileHandling.photoReferences,\n        relationshipField,\n        numberOfCards,\n        saveJobToStorage: jobManagement.saveJobToStorage,\n        removeJobFromStorage: jobManagement.removeJobFromStorage,\n        subscribeToJob: webSocket.subscribeToJob,\n        startElapsedTimeTracking: jobManagement.startElapsedTimeTracking,\n        stopElapsedTimeTracking: jobManagement.stopElapsedTimeTracking,\n        setCurrentJobId: jobManagement.setCurrentJobId,\n        setIsDraftMode: draftGeneration.setIsDraftMode,\n        setDraftCards: draftGeneration.setDraftCards,\n        setSelectedDraftIndex: draftGeneration.setSelectedDraftIndex,\n        setIsGeneratingFinalCard: draftGeneration.setIsGeneratingFinalCard,\n        setPreviewingDraftIndex: draftGeneration.setPreviewingDraftIndex,\n        setDraftCompletionShown: draftGeneration.setDraftCompletionShown,\n        setDraftCompletionCount: draftGeneration.setDraftCompletionCount\n    };\n    const cardGeneration = (0,_cardStudio_useCardGeneration__WEBPACK_IMPORTED_MODULE_7__.useCardGeneration)(cardGenerationProps);\n    // Handle job updates from WebSocket\n    const handleJobUpdate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((data)=>{\n        const { job_id, status, progress, cardData, error, completedAt } = data;\n        if (!job_id) return;\n        // Skip updates if we're still restoring jobs from localStorage\n        if (isRestoringJobs) {\n            console.log(\"⏳ Skipping job update during restoration:\", job_id);\n            return;\n        }\n        // Check if this is a draft job\n        const isDraftJob = job_id.startsWith(\"draft-\");\n        const draftIndex = isDraftJob ? parseInt(job_id.split(\"-\")[1]) : -1;\n        // Filter out updates from wrong job type\n        // If we're in draft mode, only process draft jobs\n        // If we're in final mode, only process non-draft jobs\n        const isInDraftMode = draftGeneration.isDraftMode;\n        if (isInDraftMode && !isDraftJob) {\n            console.log(\"\\uD83D\\uDEAB Ignoring non-draft job update in draft mode:\", job_id);\n            return;\n        }\n        if (!isInDraftMode && isDraftJob) {\n            console.log(\"\\uD83D\\uDEAB Ignoring draft job update in final mode:\", job_id);\n            return;\n        }\n        console.log(\"\\uD83D\\uDD04 Processing job update:\", {\n            job_id,\n            status,\n            isDraftJob,\n            draftIndex,\n            progress\n        });\n        // Handle status transitions\n        if (status === \"processing\" && !cardGeneration.isGenerating && !draftGeneration.isGenerating) {\n            console.log(\"\\uD83D\\uDD04 Job is processing, setting generation state\");\n            if (isDraftJob) {\n                draftGeneration.setIsGenerating(true);\n                draftGeneration.setIsDraftMode(true);\n                jobManagement.startElapsedTimeTracking(\"draft\");\n            } else {\n                cardGeneration.setIsGenerating(true);\n                jobManagement.startElapsedTimeTracking(\"final\");\n            }\n        }\n        // Update progress if provided\n        if (progress) {\n            // IMPORTANT: Don't show \"Generation complete!\" until we've actually processed the card\n            // This prevents the UI from showing completion before the card is ready\n            if (progress.includes(\"Generation complete!\") && status === \"completed\" && !isDraftJob) {\n                console.log('⏸️ Holding \"Generation complete!\" message until card is processed');\n            // Don't update the progress message yet - it will be set in handleFinalCardCompletion\n            } else {\n                cardGeneration.setGenerationProgress(progress);\n                draftGeneration.setGenerationProgress(progress);\n                console.log(\"\\uD83D\\uDCCA Progress message: \".concat(progress));\n            }\n        }\n        if (status === \"completed\" && cardData) {\n            console.log(\"\\uD83C\\uDF89 Job completed! Card data:\", cardData, \"isDraftJob:\", isDraftJob);\n            // Normalize field names to handle backend inconsistencies\n            const normalizedCardData = {\n                ...cardData,\n                leftInterior: cardData.leftInterior || cardData.leftPage || cardData.left_interior || cardData.left_page,\n                rightInterior: cardData.rightInterior || cardData.rightPage || cardData.right_interior || cardData.right_page,\n                frontCover: cardData.frontCover || cardData.front_cover || cardData.front,\n                backCover: cardData.backCover || cardData.back_cover || cardData.back,\n                // Keep original fields for backward compatibility\n                leftPage: cardData.leftPage || cardData.leftInterior || cardData.left_page || cardData.left_interior,\n                rightPage: cardData.rightPage || cardData.rightInterior || cardData.right_page || cardData.right_interior\n            };\n            // Validate that we have the minimum required fields for a complete card\n            const hasRequiredFields = normalizedCardData.frontCover && (isDraftJob || (isFrontBackOnly ? normalizedCardData.backCover : normalizedCardData.backCover && normalizedCardData.leftInterior && normalizedCardData.rightInterior));\n            if (!hasRequiredFields) {\n                console.warn(\"⚠️ Card data missing required fields:\", {\n                    frontCover: !!normalizedCardData.frontCover,\n                    backCover: !!normalizedCardData.backCover,\n                    leftInterior: !!normalizedCardData.leftInterior,\n                    rightInterior: !!normalizedCardData.rightInterior\n                });\n            }\n            // If this is the first update for a recovery job, ensure generation state is set properly\n            if (isDraftJob && !draftGeneration.isGenerating && draftGeneration.draftCards.filter(Boolean).length === 0) {\n                console.log(\"\\uD83D\\uDCE5 Recovered completed draft job - not setting as generating\");\n            // Don't set isGenerating for already completed jobs during recovery\n            }\n            if (isDraftJob && draftIndex >= 0) {\n                var _cardData_generatedPrompts, _cardData_generatedPrompts1, _cardData_generatedPrompts2, _cardData_generatedPrompts3;\n                // Handle draft card completion\n                console.log(\"\\uD83C\\uDFA8 Draft variation \".concat(draftIndex + 1, \" completed!\"));\n                // Get style info for smart style mode\n                let styleInfo = undefined;\n                if (selectedArtisticStyle === \"ai-smart-style\") {\n                    const predefinedStyles = [\n                        \"watercolor\",\n                        \"botanical\",\n                        \"comic-book\",\n                        \"dreamy-fantasy\",\n                        \"minimalist\"\n                    ];\n                    const styleLabels = [\n                        \"\\uD83C\\uDFA8 Watercolor\",\n                        \"\\uD83C\\uDF3F Botanical\",\n                        \"\\uD83D\\uDCA5 Comic Book\",\n                        \"\\uD83C\\uDF38 Dreamy Fantasy\",\n                        \"✨ Minimalist\"\n                    ];\n                    if (draftIndex >= 0 && draftIndex < predefinedStyles.length) {\n                        styleInfo = {\n                            styleName: predefinedStyles[draftIndex],\n                            styleLabel: styleLabels[draftIndex]\n                        };\n                    }\n                }\n                const draftCard = {\n                    id: \"draft-\".concat(draftIndex + 1, \"-\").concat(Date.now()),\n                    prompt: normalizedCardData.prompt || \"Draft Variation \".concat(draftIndex + 1),\n                    frontCover: normalizedCardData.frontCover || \"\",\n                    backCover: normalizedCardData.backCover || \"\",\n                    leftPage: normalizedCardData.leftInterior || \"\",\n                    rightPage: normalizedCardData.rightInterior || \"\",\n                    createdAt: new Date(),\n                    generatedPrompts: normalizedCardData.generatedPrompts || {\n                        frontCover: ((_cardData_generatedPrompts = cardData.generatedPrompts) === null || _cardData_generatedPrompts === void 0 ? void 0 : _cardData_generatedPrompts.frontCover) || \"\",\n                        backCover: ((_cardData_generatedPrompts1 = cardData.generatedPrompts) === null || _cardData_generatedPrompts1 === void 0 ? void 0 : _cardData_generatedPrompts1.backCover) || \"\",\n                        leftInterior: ((_cardData_generatedPrompts2 = cardData.generatedPrompts) === null || _cardData_generatedPrompts2 === void 0 ? void 0 : _cardData_generatedPrompts2.leftInterior) || \"\",\n                        rightInterior: ((_cardData_generatedPrompts3 = cardData.generatedPrompts) === null || _cardData_generatedPrompts3 === void 0 ? void 0 : _cardData_generatedPrompts3.rightInterior) || \"\"\n                    },\n                    styleInfo: styleInfo\n                };\n                // Simplified draft tracking - use fixed array positions\n                draftGeneration.setDraftCards((prev)=>{\n                    const updated = [\n                        ...prev\n                    ];\n                    // Ensure array has 5 slots\n                    while(updated.length < 5){\n                        updated.push(null);\n                    }\n                    // Place draft at its correct index\n                    updated[draftIndex] = draftCard;\n                    console.log(\"✅ Draft \".concat(draftIndex + 1, \" completed and stored at index \").concat(draftIndex));\n                    // No longer save individual drafts to localStorage\n                    return updated;\n                });\n                // Simplified completion tracking - count the updated array including the new draft\n                const updatedDrafts = [\n                    ...draftGeneration.draftCards\n                ];\n                updatedDrafts[draftIndex] = draftCard;\n                const completedCount = updatedDrafts.filter(Boolean).length;\n                console.log(\"\\uD83D\\uDCCA Draft progress: \".concat(completedCount, \"/5 variations complete\"));\n                // Update progress\n                const progressMsg = completedCount === 5 ? \"All 5 variations ready! Choose your favorite below.\" : \"\".concat(completedCount, \"/5 variations complete...\").concat(completedCount >= 2 ? \" You can select one now!\" : \"\");\n                draftGeneration.setGenerationProgress(progressMsg);\n                // Override time-based progress with real progress when drafts complete\n                // Don't override time-based progress\n                console.log(\"\\uD83C\\uDFA8 Draft \".concat(completedCount, \"/5 completed\"));\n                // Handle milestones\n                if (completedCount === 1) {\n                    (0,_cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__.scrollToCardPreview)();\n                }\n                if (completedCount === 5 && !draftGeneration.isGeneratingFinalCard) {\n                    draftGeneration.setIsGenerating(false);\n                    jobManagement.stopElapsedTimeTracking();\n                    // Clear recovery data for completed draft jobs\n                    _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__.storage.clearRecovery();\n                    console.log(\"\\uD83E\\uDDF9 Cleared recovery data for completed draft job\");\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 All 5 front cover variations ready! Choose your favorite below.\");\n                }\n                // Keep draft jobs in storage for later retrieval\n                // Only unsubscribe from WebSocket\n                webSocket.unsubscribeFromJob(job_id);\n                console.log(\"✅ Keeping draft job \".concat(job_id, \" in storage for future access\"));\n            } else {\n                // Handle final card completion\n                console.log(\"\\uD83D\\uDD0D Final card completion detected. Card data structure:\", {\n                    hasCardData: !!cardData,\n                    cardDataKeys: Object.keys(cardData || {}),\n                    frontCover: (cardData === null || cardData === void 0 ? void 0 : cardData.frontCover) ? \"Present\" : \"Missing\",\n                    backCover: (cardData === null || cardData === void 0 ? void 0 : cardData.backCover) ? \"Present\" : \"Missing\",\n                    leftInterior: (cardData === null || cardData === void 0 ? void 0 : cardData.leftInterior) ? \"Present\" : \"Missing\",\n                    rightInterior: (cardData === null || cardData === void 0 ? void 0 : cardData.rightInterior) ? \"Present\" : \"Missing\",\n                    leftPage: (cardData === null || cardData === void 0 ? void 0 : cardData.leftPage) ? \"Present\" : \"Missing\",\n                    rightPage: (cardData === null || cardData === void 0 ? void 0 : cardData.rightPage) ? \"Present\" : \"Missing\"\n                });\n                console.log(\"\\uD83D\\uDCDD Full card data:\", JSON.stringify(normalizedCardData, null, 2));\n                // Use the already normalized card data\n                const mappedCardData = normalizedCardData;\n                console.log(\"\\uD83D\\uDD04 Normalized card data for frontend:\", {\n                    frontCover: mappedCardData.frontCover ? \"Present\" : \"Missing\",\n                    backCover: mappedCardData.backCover ? \"Present\" : \"Missing\",\n                    leftInterior: mappedCardData.leftInterior ? \"Present\" : \"Missing\",\n                    rightInterior: mappedCardData.rightInterior ? \"Present\" : \"Missing\",\n                    hasAllRequiredFields: hasRequiredFields\n                });\n                // Only process completion if we have all required fields\n                if (hasRequiredFields) {\n                    // Call the completion handler\n                    console.log(\"\\uD83D\\uDE80 Calling handleFinalCardCompletion...\");\n                    cardGeneration.handleFinalCardCompletion(mappedCardData);\n                } else {\n                    console.error(\"❌ Cannot complete card - missing required fields\");\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Card generation incomplete - missing some panels. Please try again.\");\n                    // Force clear the loading state\n                    cardGeneration.setIsGenerating(false);\n                    draftGeneration.setIsGeneratingFinalCard(false);\n                    jobManagement.stopElapsedTimeTracking();\n                    jobManagement.setGenerationProgress(\"\");\n                }\n                // Card is automatically added to recent cards by markJobComplete\n                // Only clear recovery if we're not in the middle of restoring\n                if (!isRestoringJobs) {\n                    jobManagement.removeJobFromStorage(job_id);\n                }\n                jobManagement.setCurrentJobId(null);\n                webSocket.unsubscribeFromJob(job_id);\n            }\n        } else if (status === \"failed\") {\n            console.error(\"❌ Job failed:\", error);\n            if (isDraftJob && draftIndex >= 0) {\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Draft variation \".concat(draftIndex + 1, \" failed. Continuing with others...\"));\n            } else {\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"❌ Card generation failed. Please try again.\");\n                cardGeneration.setIsGenerating(false);\n                draftGeneration.setIsGeneratingFinalCard(false);\n                jobManagement.stopElapsedTimeTracking();\n                cardGeneration.setGenerationProgress(\"\");\n                // Don't reset progress - let time-based progress continue\n                // jobManagement.setProgressPercentage(0);\n                jobManagement.setCurrentJobId(null);\n                webSocket.unsubscribeFromJob(job_id);\n            }\n            // Only clear recovery if we're not in the middle of restoring\n            if (!isRestoringJobs) {\n                jobManagement.removeJobFromStorage(job_id);\n            }\n        } else if (status === \"not_found\") {\n            console.warn(\"⚠️ Job not found on server, cleaning up stale reference:\", job_id);\n            // Clean up stale job reference\n            if (webSocket.currentJobRef.current === job_id) {\n                webSocket.currentJobRef.current = null;\n            }\n            // Reset UI state if this was the current job\n            if (jobManagement.currentJobId === job_id) {\n                jobManagement.setCurrentJobId(null);\n                cardGeneration.setIsGenerating(false);\n                draftGeneration.setIsGeneratingFinalCard(false);\n                cardGeneration.setGenerationProgress(\"\");\n                // Don't reset progress - let time-based progress continue\n                // jobManagement.setProgressPercentage(0);\n                jobManagement.stopElapsedTimeTracking();\n            }\n            // Clean up storage\n            // Only clear recovery if we're not in the middle of restoring\n            if (!isRestoringJobs) {\n                jobManagement.removeJobFromStorage(job_id);\n            }\n            webSocket.unsubscribeFromJob(job_id);\n        }\n    }, [\n        selectedArtisticStyle,\n        draftGeneration,\n        cardGeneration,\n        jobManagement,\n        webSocket,\n        isRestoringJobs\n    ]);\n    // Set up WebSocket job update handler\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        webSocket.setJobUpdateHandler(handleJobUpdate);\n    }, [\n        webSocket,\n        handleJobUpdate\n    ]);\n    // Track if we've already logged the stale job message\n    const staleJobLoggedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Auto-reconnect WebSocket if disconnected during active generation\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!webSocket.isSocketConnected && (cardGeneration.isGenerating || draftGeneration.isGeneratingFinalCard) && webSocket.currentJobRef.current) {\n            // Check if the generation has been running for more than 5 minutes\n            if (jobManagement.generationStartTime) {\n                const jobAge = Date.now() - jobManagement.generationStartTime;\n                if (jobAge > 5 * 60 * 1000) {\n                    if (!staleJobLoggedRef.current) {\n                        console.log(\"⏰ Job is older than 5 minutes, stopping reconnection attempts\");\n                        staleJobLoggedRef.current = true;\n                        // Clean up stale job\n                        const jobId = webSocket.currentJobRef.current;\n                        if (jobId) {\n                            console.log(\"\\uD83E\\uDDF9 Cleaning up stale job:\", jobId);\n                            // Remove from localStorage (only if not a draft job)\n                            if (!jobId.startsWith(\"draft-\")) {\n                                jobManagement.removeJobFromStorage(jobId);\n                            }\n                            // Reset generation states\n                            cardGeneration.setIsGenerating(false);\n                            draftGeneration.setIsGeneratingFinalCard(false);\n                            draftGeneration.setIsDraftMode(false);\n                            draftGeneration.setDraftCards([]);\n                            draftGeneration.setDraftCompletionCount(0);\n                            draftGeneration.setDraftCompletionShown(false);\n                            jobManagement.setCurrentJobId(null);\n                            jobManagement.setGenerationProgress(\"\");\n                            // Don't reset progress - let time-based progress continue\n                            // jobManagement.setProgressPercentage(0);\n                            jobManagement.stopElapsedTimeTracking();\n                            // Unsubscribe from job\n                            webSocket.unsubscribeFromJob(jobId);\n                            // Show error toast\n                            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Card generation timed out. Please try again.\");\n                        }\n                    }\n                    return;\n                }\n            }\n            console.log(\"\\uD83D\\uDD04 WebSocket disconnected during generation, attempting reconnect...\");\n            const reconnectTimer = setTimeout(()=>{\n                webSocket.connectWebSocket();\n                // Re-subscribe to current job after reconnection\n                const jobId = webSocket.currentJobRef.current;\n                if (jobId) {\n                    setTimeout(()=>{\n                        console.log(\"\\uD83D\\uDCE1 Re-subscribing to job after reconnect:\", jobId);\n                        webSocket.subscribeToJob(jobId);\n                    }, 1000);\n                }\n            }, 2000);\n            return ()=>clearTimeout(reconnectTimer);\n        }\n    }, [\n        webSocket,\n        cardGeneration.isGenerating,\n        draftGeneration.isGeneratingFinalCard,\n        jobManagement.generationStartTime\n    ]);\n    // Reset stale job flag when generation starts\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (cardGeneration.isGenerating || draftGeneration.isGeneratingFinalCard) {\n            staleJobLoggedRef.current = false;\n        }\n    }, [\n        cardGeneration.isGenerating,\n        draftGeneration.isGeneratingFinalCard\n    ]);\n    // Monitor for stale job updates\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ((cardGeneration.isGenerating || draftGeneration.isGeneratingFinalCard) && webSocket.currentJobRef.current) {\n            const checkInterval = setInterval(async ()=>{\n                const timeSinceLastUpdate = Date.now() - webSocket.lastJobUpdateRef.current;\n                const jobId = webSocket.currentJobRef.current;\n                // Very aggressive checking when at 95%+ progress\n                if (jobManagement.progressPercentage >= 95 && timeSinceLastUpdate > 5000) {\n                    console.warn(\"⚠️ No updates for \".concat(Math.round(timeSinceLastUpdate / 1000), \"s at \").concat(jobManagement.progressPercentage, \"% progress - checking job status...\"));\n                    if (jobId) {\n                        try {\n                            const response = await fetch(\"/api/job-status/\".concat(jobId));\n                            if (response.ok) {\n                                const jobStatus = await response.json();\n                                console.log(\"\\uD83D\\uDCCA Direct job status check:\", jobStatus);\n                                if (jobStatus.status === \"completed\" && jobStatus.cardData) {\n                                    console.log(\"✅ Job is actually completed! Processing result...\");\n                                    handleJobUpdate({\n                                        job_id: jobId,\n                                        status: \"completed\",\n                                        progress: \"Card generation complete!\",\n                                        cardData: jobStatus.cardData\n                                    });\n                                    return; // Exit early on completion\n                                }\n                            }\n                        } catch (error) {\n                            console.error(\"Failed to check job status:\", error);\n                        }\n                    }\n                } else if (jobManagement.progressPercentage >= 90 && timeSinceLastUpdate > 10000) {\n                    console.warn(\"⚠️ No updates for \".concat(Math.round(timeSinceLastUpdate / 1000), \"s at \").concat(jobManagement.progressPercentage, \"% progress\"));\n                    if (jobId) {\n                        try {\n                            const response = await fetch(\"/api/job-status/\".concat(jobId));\n                            if (response.ok) {\n                                const jobStatus = await response.json();\n                                console.log(\"\\uD83D\\uDCCA Direct job status check:\", jobStatus);\n                                if (jobStatus.status === \"completed\" && jobStatus.cardData) {\n                                    console.log(\"✅ Job is actually completed! Processing result...\");\n                                    handleJobUpdate({\n                                        job_id: jobId,\n                                        status: \"completed\",\n                                        progress: \"Card generation complete!\",\n                                        cardData: jobStatus.cardData\n                                    });\n                                    return; // Exit early on completion\n                                }\n                            }\n                        } catch (error) {\n                            console.error(\"Failed to check job status:\", error);\n                        }\n                    }\n                }\n                // Standard stale update check\n                if (timeSinceLastUpdate > 30000) {\n                    console.warn(\"⚠️ No job updates for 30 seconds, checking connection...\");\n                    if (!webSocket.isSocketConnected) {\n                        console.log(\"\\uD83D\\uDD04 WebSocket disconnected, reconnecting...\");\n                        webSocket.connectWebSocket();\n                    } else if (jobId) {\n                        console.log(\"\\uD83D\\uDCE1 Re-subscribing to job due to stale updates:\", jobId);\n                        webSocket.subscribeToJob(jobId);\n                    }\n                    // Reset the timer\n                    webSocket.lastJobUpdateRef.current = Date.now();\n                }\n            }, 3000); // Check every 3 seconds for faster detection at high progress\n            return ()=>clearInterval(checkInterval);\n        }\n    }, [\n        cardGeneration.isGenerating,\n        draftGeneration.isGeneratingFinalCard,\n        webSocket,\n        jobManagement.progressPercentage,\n        handleJobUpdate\n    ]);\n    // Simplified job restoration using new storage manager\n    const checkPendingJobs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        var _recovery_jobId;\n        console.log(\"\\uD83D\\uDD04 Checking for recovery data...\");\n        setIsRestoringJobs(true);\n        // Check for active recovery job\n        const recovery = _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__.storage.getRecovery();\n        if (!recovery) {\n            console.log(\"✅ No active job to recover\");\n            setIsRestoringJobs(false);\n            return;\n        }\n        console.log(\"\\uD83D\\uDD04 Found recovery data:\", recovery);\n        // In our simplified system, we only track one active job at a time\n        // Recovery is meant for browser crashes during generation\n        const isRecoveryDraft = (_recovery_jobId = recovery.jobId) === null || _recovery_jobId === void 0 ? void 0 : _recovery_jobId.startsWith(\"draft-\");\n        if (isRecoveryDraft) {\n            console.log(\"\\uD83C\\uDFA8 Recovering from draft generation\");\n            // For draft recovery, we can't restore the exact state\n            // User will need to restart the draft generation\n            setIsRestoringJobs(false);\n            return;\n        }\n        // For final card recovery, we can try to restore the job\n        console.log(\"\\uD83C\\uDFAF Recovering from final card generation\");\n        // Restore generation state\n        jobManagement.setCurrentJobId(recovery.jobId);\n        cardGeneration.setIsGenerating(true);\n        cardGeneration.setGenerationProgress(\"\\uD83D\\uDD04 Resuming generation...\");\n        jobManagement.startElapsedTimeTracking(\"final\");\n        // Subscribe to the job to get updates\n        webSocket.subscribeToJob(recovery.jobId);\n        setIsRestoringJobs(false);\n    }, [\n        webSocket,\n        _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__.storage\n    ]);\n    // Load recovery data on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDE80 useCardStudio mounted, checking for recovery...\");\n        // Check for active recovery job\n        const recovery = _lib_storageManager__WEBPACK_IMPORTED_MODULE_10__.storage.getRecovery();\n        console.log(\"\\uD83D\\uDCE6 Recovery data:\", recovery);\n        if (recovery) {\n            console.log(\"\\uD83D\\uDD04 Found active job to recover:\", recovery.jobId);\n            // For draft jobs, check if we already have completed drafts\n            const isDraft = recovery.jobId.startsWith(\"draft-\");\n            if (isDraft) {\n                // Check if we already have completed draft cards\n                const hasCompletedDrafts = draftGeneration.draftCards.filter((card)=>card !== null).length > 0;\n                if (hasCompletedDrafts) {\n                    console.log(\"✅ Draft job already completed, not setting as generating\");\n                    // Just restore the job ID for reference, but don't set as generating\n                    jobManagement.setCurrentJobId(recovery.jobId);\n                    draftGeneration.setIsDraftMode(true);\n                } else {\n                    console.log(\"\\uD83C\\uDFA8 Resuming incomplete draft generation\");\n                    // Subscribe to the job to check its status\n                    jobManagement.setCurrentJobId(recovery.jobId);\n                    webSocket.subscribeToJob(recovery.jobId);\n                    draftGeneration.setIsDraftMode(true);\n                    // Don't set as generating yet - wait for WebSocket to tell us the actual status\n                    // This prevents navigation to Step 5 for already completed jobs\n                    console.log(\"⏳ Waiting for job status update before setting generation state...\");\n                }\n            } else {\n                // For final card recovery, check if already completed\n                if (cardGeneration.generatedCard && cardGeneration.isCardCompleted) {\n                    console.log(\"✅ Final card already completed, not setting as generating\");\n                    jobManagement.setCurrentJobId(recovery.jobId);\n                } else {\n                    console.log(\"\\uD83C\\uDFAF Resuming incomplete final card generation\");\n                    jobManagement.setCurrentJobId(recovery.jobId);\n                    webSocket.subscribeToJob(recovery.jobId);\n                    cardGeneration.setIsGenerating(true);\n                    cardGeneration.setGenerationProgress(\"\\uD83C\\uDFA8 Resuming card generation...\");\n                    jobManagement.startElapsedTimeTracking(\"final\");\n                    // If this is a final card generation from a draft, set the appropriate state\n                    if (recovery.formData && recovery.formData.selectedDraftIndex !== undefined) {\n                        draftGeneration.setIsGeneratingFinalCard(true);\n                        draftGeneration.setSelectedDraftIndex(recovery.formData.selectedDraftIndex);\n                    }\n                }\n            }\n        }\n        // Always mark restoration as complete\n        setIsRestoringJobs(false);\n        // Mark restoration as complete after a small delay\n        setTimeout(()=>{\n            setIsRestoringJobs(false);\n        }, 100);\n    }, []);\n    // Return all the state and functions that the UI needs\n    return {\n        // Core state\n        prompt,\n        setPrompt,\n        finalCardMessage: messageGeneration.finalCardMessage,\n        setFinalCardMessage: messageGeneration.setFinalCardMessage,\n        toField,\n        setToField,\n        fromField,\n        setFromField,\n        relationshipField,\n        setRelationshipField,\n        personalTraits,\n        setPersonalTraits,\n        selectedType,\n        setSelectedType,\n        customCardType,\n        setCustomCardType,\n        selectedTone,\n        setSelectedTone,\n        isGenerating: cardGeneration.isGenerating || draftGeneration.isGenerating,\n        setIsGenerating: cardGeneration.setIsGenerating,\n        isGeneratingMessage: messageGeneration.isGeneratingMessage,\n        setIsGeneratingMessage: messageGeneration.setIsGeneratingMessage,\n        generatedCard: cardGeneration.generatedCard,\n        setGeneratedCard: cardGeneration.setGeneratedCard,\n        numberOfCards,\n        setNumberOfCards,\n        generatedCards: cardGeneration.generatedCards,\n        setGeneratedCards: cardGeneration.setGeneratedCards,\n        selectedCardIndex: cardGeneration.selectedCardIndex,\n        setSelectedCardIndex: cardGeneration.setSelectedCardIndex,\n        // Advanced options\n        showAdvanced,\n        setShowAdvanced,\n        selectedArtisticStyle,\n        setSelectedArtisticStyle,\n        customStyleDescription,\n        setCustomStyleDescription,\n        selectedImageModel,\n        setSelectedImageModel,\n        selectedDraftModel,\n        setSelectedDraftModel,\n        // Draft mode\n        isDraftMode: draftGeneration.isDraftMode,\n        setIsDraftMode: draftGeneration.setIsDraftMode,\n        draftCards: draftGeneration.draftCards,\n        setDraftCards: draftGeneration.setDraftCards,\n        selectedDraftIndex: draftGeneration.selectedDraftIndex,\n        setSelectedDraftIndex: draftGeneration.setSelectedDraftIndex,\n        isGeneratingFinalCard: draftGeneration.isGeneratingFinalCard,\n        setIsGeneratingFinalCard: draftGeneration.setIsGeneratingFinalCard,\n        previewingDraftIndex: draftGeneration.previewingDraftIndex,\n        setPreviewingDraftIndex: draftGeneration.setPreviewingDraftIndex,\n        draftCompletionShown: draftGeneration.draftCompletionShown,\n        setDraftCompletionShown: draftGeneration.setDraftCompletionShown,\n        draftCompletionCount: draftGeneration.draftCompletionCount,\n        setDraftCompletionCount: draftGeneration.setDraftCompletionCount,\n        // Progress tracking\n        generationProgress: draftGeneration.isGenerating ? draftGeneration.generationProgress : cardGeneration.generationProgress,\n        setGenerationProgress: cardGeneration.setGenerationProgress,\n        progressPercentage: jobManagement.progressPercentage,\n        setProgressPercentage: jobManagement.setProgressPercentage,\n        isCardCompleted: cardGeneration.isCardCompleted,\n        setIsCardCompleted: cardGeneration.setIsCardCompleted,\n        // Upload and personalization\n        referenceImages: fileHandling.referenceImages,\n        setReferenceImages: fileHandling.setReferenceImages,\n        referenceImageUrls: fileHandling.referenceImageUrls,\n        setReferenceImageUrls: fileHandling.setReferenceImageUrls,\n        isUploading: fileHandling.isUploading,\n        setIsUploading: fileHandling.setIsUploading,\n        // Email and settings\n        userEmail,\n        setUserEmail,\n        isHandwrittenMessage,\n        setIsHandwrittenMessage,\n        isFrontBackOnly,\n        setIsFrontBackOnly,\n        selectedPaperSize,\n        setSelectedPaperSize,\n        // UI state\n        isTextareaExpanded,\n        setIsTextareaExpanded,\n        isMessageExpanded,\n        setIsMessageExpanded,\n        showSettings,\n        setShowSettings,\n        showTemplateGallery,\n        setShowTemplateGallery,\n        showPrintConfirmation,\n        setShowPrintConfirmation,\n        // Generation time\n        generationDuration: cardGeneration.generationDuration,\n        setGenerationDuration: cardGeneration.setGenerationDuration,\n        currentElapsedTime: jobManagement.currentElapsedTime,\n        // Helper functions\n        formatGenerationTime: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.formatGenerationTime,\n        formatCountdown: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.formatCountdown,\n        sendThankYouEmail: _cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__.sendThankYouEmail,\n        chatWithAI: _cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__.chatWithAI,\n        scrollToCardPreview: _cardStudio_utils__WEBPACK_IMPORTED_MODULE_9__.scrollToCardPreview,\n        // Time tracking functions\n        startElapsedTimeTracking: jobManagement.startElapsedTimeTracking,\n        stopElapsedTimeTracking: jobManagement.stopElapsedTimeTracking,\n        // File handling functions\n        handleFileUpload: fileHandling.handleFileUpload,\n        handleRemoveReferenceImage: fileHandling.handleRemoveReferenceImage,\n        // Simplified photo references\n        photoReferences: fileHandling.photoReferences,\n        setPhotoReferences: fileHandling.setPhotoReferences,\n        updatePhotoDescription: fileHandling.updatePhotoDescription,\n        // Message functions\n        handleGetMessageHelp: messageGeneration.handleGetMessageHelp,\n        addMessageToHistory: messageGeneration.addMessageToHistory,\n        undoMessage: messageGeneration.undoMessage,\n        redoMessage: messageGeneration.redoMessage,\n        // Job management\n        saveJobToStorage: jobManagement.saveJobToStorage,\n        removeJobFromStorage: jobManagement.removeJobFromStorage,\n        checkPendingJobs,\n        isRestoringJobs,\n        // Main generation functions\n        handleGenerateDraftCards: draftGeneration.handleGenerateDraftCards,\n        handleGenerateFinalFromDraft: draftGeneration.handleGenerateFinalFromDraft,\n        // Additional state for message refinement\n        messageHistory: messageGeneration.messageHistory,\n        setMessageHistory: messageGeneration.setMessageHistory,\n        currentMessageIndex: messageGeneration.currentMessageIndex,\n        setCurrentMessageIndex: messageGeneration.setCurrentMessageIndex,\n        refinementPrompt: messageGeneration.refinementPrompt,\n        setRefinementPrompt: messageGeneration.setRefinementPrompt,\n        isRefiningMessage: messageGeneration.isRefiningMessage,\n        setIsRefiningMessage: messageGeneration.setIsRefiningMessage,\n        showRefinementBox: messageGeneration.showRefinementBox,\n        setShowRefinementBox: messageGeneration.setShowRefinementBox,\n        // Template state\n        showTemplateCustomization,\n        setShowTemplateCustomization,\n        selectedTemplate,\n        setSelectedTemplate,\n        templateCustomizations,\n        setTemplateCustomizations,\n        templateSearchQuery,\n        setTemplateSearchQuery,\n        isSearchingTemplates,\n        setIsSearchingTemplates,\n        aiFilteredCards,\n        setAiFilteredCards,\n        searchMode,\n        setSearchMode,\n        textFilteredCards,\n        setTextFilteredCards,\n        showPrompts,\n        setShowPrompts,\n        // Print state\n        printOption,\n        setPrintOption,\n        // Additional draft mode state\n        handwritingSample: fileHandling.handwritingSample,\n        setHandwritingSample: fileHandling.setHandwritingSample,\n        handwritingSampleUrl: fileHandling.handwritingSampleUrl,\n        setHandwritingSampleUrl: fileHandling.setHandwritingSampleUrl,\n        // Job tracking\n        currentJobId: jobManagement.currentJobId,\n        setCurrentJobId: jobManagement.setCurrentJobId,\n        countdown,\n        setCountdown,\n        countdownInterval,\n        setCountdownInterval,\n        // Section loading states\n        sectionLoadingStates,\n        setSectionLoadingStates,\n        // Fast preview mode\n        fastPreviewMode,\n        setFastPreviewMode,\n        // Additional tracking\n        currentCardId: cardGeneration.currentCardId,\n        setCurrentCardId: cardGeneration.setCurrentCardId,\n        isInitialLoadComplete,\n        setIsInitialLoadComplete,\n        // Elapsed time tracking\n        generationStartTime: jobManagement.generationStartTime,\n        // Constants for UI\n        cardTones: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.cardTones,\n        artisticStyles: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.artisticStyles,\n        paperSizes: _cardStudio_constants__WEBPACK_IMPORTED_MODULE_8__.paperSizes,\n        // WebSocket functions and state\n        isSocketConnected: webSocket.isSocketConnected,\n        connectWebSocket: webSocket.connectWebSocket,\n        disconnectWebSocket: webSocket.disconnectWebSocket,\n        subscribeToJob: webSocket.subscribeToJob,\n        unsubscribeFromJob: webSocket.unsubscribeFromJob,\n        unsubscribeFromAllJobs: webSocket.unsubscribeFromAllJobs,\n        handleJobUpdate,\n        handleFinalCardCompletion: cardGeneration.handleFinalCardCompletion\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZUNhcmRTdHVkaW9SZWZhY3RvcmVkLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7bUVBRWlFO0FBQ2xDO0FBRy9CLHVCQUF1QjtBQUNrQztBQUNrQjtBQUNGO0FBQ1Y7QUFDTTtBQUNGO0FBRW5FLDZCQUE2QjtBQVFHO0FBQ3dEO0FBQ3pDO0FBRXhDLFNBQVNvQjtJQUNkLGtCQUFrQjtJQUNsQixNQUFNLENBQUNDLFFBQVFDLFVBQVUsR0FBR3RCLCtDQUFRQSxDQUFDO0lBQ3JDLE1BQU0sQ0FBQ3VCLFNBQVNDLFdBQVcsR0FBR3hCLCtDQUFRQSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQ3lCLFdBQVdDLGFBQWEsR0FBRzFCLCtDQUFRQSxDQUFDO0lBQzNDLE1BQU0sQ0FBQzJCLG1CQUFtQkMscUJBQXFCLEdBQUc1QiwrQ0FBUUEsQ0FBQztJQUMzRCxNQUFNLENBQUM2QixnQkFBZ0JDLGtCQUFrQixHQUFHOUIsK0NBQVFBLENBQUM7SUFDckQsTUFBTSxDQUFDK0IsY0FBY0MsZ0JBQWdCLEdBQUdoQywrQ0FBUUEsQ0FBUztJQUN6RCxNQUFNLENBQUNpQyxnQkFBZ0JDLGtCQUFrQixHQUFHbEMsK0NBQVFBLENBQVM7SUFDN0QsTUFBTSxDQUFDbUMsY0FBY0MsZ0JBQWdCLEdBQUdwQywrQ0FBUUEsQ0FBUztJQUV6RCx5QkFBeUI7SUFDekIsTUFBTSxDQUFDcUMsY0FBY0MsZ0JBQWdCLEdBQUd0QywrQ0FBUUEsQ0FBQztJQUNqRCxNQUFNLENBQUN1Qyx1QkFBdUJDLHlCQUF5QixHQUFHeEMsK0NBQVFBLENBQVM7SUFDM0UsTUFBTSxDQUFDeUMsd0JBQXdCQywwQkFBMEIsR0FBRzFDLCtDQUFRQSxDQUFTO0lBQzdFLE1BQU0sQ0FBQzJDLG9CQUFvQkMsc0JBQXNCLEdBQUc1QywrQ0FBUUEsQ0FBUztJQUNyRSxNQUFNLENBQUM2QyxvQkFBb0JDLHNCQUFzQixHQUFHOUMsK0NBQVFBLENBQVM7SUFDckUsTUFBTSxD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QkFBc0IzSyxhQUFhMkssb0JBQW9CO1FBQ3ZEQyxzQkFBc0I1SyxhQUFhNEssb0JBQW9CO1FBQ3ZEQyx5QkFBeUI3SyxhQUFhNkssdUJBQXVCO1FBRTdELGVBQWU7UUFDZi9FLGNBQWMvRixjQUFjK0YsWUFBWTtRQUN4Q2hGLGlCQUFpQmYsY0FBY2UsZUFBZTtRQUM5Q3BCO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBRUEseUJBQXlCO1FBQ3pCVDtRQUNBQztRQUVBLG9CQUFvQjtRQUNwQnJEO1FBQ0FDO1FBRUEsc0JBQXNCO1FBQ3RCNk8sZUFBZXhKLGVBQWV3SixhQUFhO1FBQzNDQyxrQkFBa0J6SixlQUFleUosZ0JBQWdCO1FBQ2pEbk47UUFDQUM7UUFFQSx3QkFBd0I7UUFDeEJxSSxxQkFBcUJuRyxjQUFjbUcsbUJBQW1CO1FBRXRELG1CQUFtQjtRQUNuQnRNLFNBQVNBLDhEQUFBQTtRQUNUQyxjQUFjQSxtRUFBQUE7UUFDZEMsVUFBVUEsK0RBQUFBO1FBRVYsZ0NBQWdDO1FBQ2hDbU0sbUJBQW1CbkcsVUFBVW1HLGlCQUFpQjtRQUM5Q00sa0JBQWtCekcsVUFBVXlHLGdCQUFnQjtRQUM1Q3lFLHFCQUFxQmxMLFVBQVVrTCxtQkFBbUI7UUFDbEQxSyxnQkFBZ0JSLFVBQVVRLGNBQWM7UUFDeEM0RSxvQkFBb0JwRixVQUFVb0Ysa0JBQWtCO1FBQ2hEM0Usd0JBQXdCVCxVQUFVUyxzQkFBc0I7UUFDeERnQjtRQUNBb0UsMkJBQTJCckUsZUFBZXFFLHlCQUF5QjtJQUNyRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2hvb2tzL3VzZUNhcmRTdHVkaW9SZWZhY3RvcmVkLnRzPzljYzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHRvYXN0IH0gZnJvbSBcInNvbm5lclwiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5cbi8vIEltcG9ydCBtb2R1bGFyIGhvb2tzXG5pbXBvcnQgeyB1c2VXZWJTb2NrZXQgfSBmcm9tICcuL2NhcmRTdHVkaW8vdXNlV2ViU29ja2V0JztcbmltcG9ydCB7IHVzZUpvYk1hbmFnZW1lbnQgfSBmcm9tICcuL2NhcmRTdHVkaW8vdXNlSm9iTWFuYWdlbWVudFNpbXBsaWZpZWQnO1xuaW1wb3J0IHsgdXNlTWVzc2FnZUdlbmVyYXRpb24gfSBmcm9tICcuL2NhcmRTdHVkaW8vdXNlTWVzc2FnZUdlbmVyYXRpb24nO1xuaW1wb3J0IHsgdXNlRmlsZUhhbmRsaW5nIH0gZnJvbSAnLi9jYXJkU3R1ZGlvL3VzZUZpbGVIYW5kbGluZyc7XG5pbXBvcnQgeyB1c2VEcmFmdEdlbmVyYXRpb24gfSBmcm9tICcuL2NhcmRTdHVkaW8vdXNlRHJhZnRHZW5lcmF0aW9uJztcbmltcG9ydCB7IHVzZUNhcmRHZW5lcmF0aW9uIH0gZnJvbSAnLi9jYXJkU3R1ZGlvL3VzZUNhcmRHZW5lcmF0aW9uJztcblxuLy8gSW1wb3J0IGNvbnN0YW50cyBhbmQgdXRpbHNcbmltcG9ydCB7IFxuICBjYXJkVG9uZXMsIFxuICBhcnRpc3RpY1N0eWxlcywgXG4gIHBhcGVyU2l6ZXMsIFxuICBmb3JtYXRHZW5lcmF0aW9uVGltZSwgXG4gIGZvcm1hdENvdW50ZG93bixcbiAgR2VuZXJhdGVkQ2FyZCBcbn0gZnJvbSAnLi9jYXJkU3R1ZGlvL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBzZW5kVGhhbmtZb3VFbWFpbCwgY2hhdFdpdGhBSSwgc2Nyb2xsVG9DYXJkUHJldmlldyB9IGZyb20gJy4vY2FyZFN0dWRpby91dGlscyc7XG5pbXBvcnQgeyBzdG9yYWdlIH0gZnJvbSAnQC9saWIvc3RvcmFnZU1hbmFnZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FyZFN0dWRpbygpIHtcbiAgLy8gQ29yZSBmb3JtIHN0YXRlXG4gIGNvbnN0IFtwcm9tcHQsIHNldFByb21wdF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW3RvRmllbGQsIHNldFRvRmllbGRdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtmcm9tRmllbGQsIHNldEZyb21GaWVsZF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW3JlbGF0aW9uc2hpcEZpZWxkLCBzZXRSZWxhdGlvbnNoaXBGaWVsZF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW3BlcnNvbmFsVHJhaXRzLCBzZXRQZXJzb25hbFRyYWl0c10gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW3NlbGVjdGVkVHlwZSwgc2V0U2VsZWN0ZWRUeXBlXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJiaXJ0aGRheVwiKTtcbiAgY29uc3QgW2N1c3RvbUNhcmRUeXBlLCBzZXRDdXN0b21DYXJkVHlwZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KFwiXCIpO1xuICBjb25zdCBbc2VsZWN0ZWRUb25lLCBzZXRTZWxlY3RlZFRvbmVdID0gdXNlU3RhdGU8c3RyaW5nPihcImZ1bm55XCIpO1xuICBcbiAgLy8gQWR2YW5jZWQgb3B0aW9ucyBzdGF0ZVxuICBjb25zdCBbc2hvd0FkdmFuY2VkLCBzZXRTaG93QWR2YW5jZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2VsZWN0ZWRBcnRpc3RpY1N0eWxlLCBzZXRTZWxlY3RlZEFydGlzdGljU3R5bGVdID0gdXNlU3RhdGU8c3RyaW5nPihcImFpLXNtYXJ0LXN0eWxlXCIpO1xuICBjb25zdCBbY3VzdG9tU3R5bGVEZXNjcmlwdGlvbiwgc2V0Q3VzdG9tU3R5bGVEZXNjcmlwdGlvbl0gPSB1c2VTdGF0ZTxzdHJpbmc+KFwiXCIpO1xuICBjb25zdCBbc2VsZWN0ZWRJbWFnZU1vZGVsLCBzZXRTZWxlY3RlZEltYWdlTW9kZWxdID0gdXNlU3RhdGU8c3RyaW5nPihcImdwdC1pbWFnZS0xXCIpO1xuICBjb25zdCBbc2VsZWN0ZWREcmFmdE1vZGVsLCBzZXRTZWxlY3RlZERyYWZ0TW9kZWxdID0gdXNlU3RhdGU8c3RyaW5nPihcImdwdC1pbWFnZS0xXCIpO1xuICBjb25zdCBbZmFzdFByZXZpZXdNb2RlLCBzZXRGYXN0UHJldmlld01vZGVdID0gdXNlU3RhdGU8Ym9vbGVhbj4odHJ1ZSk7XG4gIFxuICAvLyBFbWFpbCBzdGF0ZVxuICBjb25zdCBbdXNlckVtYWlsLCBzZXRVc2VyRW1haWxdID0gdXNlU3RhdGU8c3RyaW5nPihcIlwiKTtcbiAgXG4gIC8vIENhcmQgb3B0aW9uc1xuICBjb25zdCBbbnVtYmVyT2ZDYXJkcywgc2V0TnVtYmVyT2ZDYXJkc10gPSB1c2VTdGF0ZTxudW1iZXI+KDEpO1xuICBjb25zdCBbaXNIYW5kd3JpdHRlbk1lc3NhZ2UsIHNldElzSGFuZHdyaXR0ZW5NZXNzYWdlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2lzRnJvbnRCYWNrT25seSwgc2V0SXNGcm9udEJhY2tPbmx5XSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3NlbGVjdGVkUGFwZXJTaXplLCBzZXRTZWxlY3RlZFBhcGVyU2l6ZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KFwic3RhbmRhcmRcIik7XG4gIFxuICAvLyBVSSBzdGF0ZVxuICBjb25zdCBbaXNUZXh0YXJlYUV4cGFuZGVkLCBzZXRJc1RleHRhcmVhRXhwYW5kZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbaXNNZXNzYWdlRXhwYW5kZWQsIHNldElzTWVzc2FnZUV4cGFuZGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Nob3dTZXR0aW5ncywgc2V0U2hvd1NldHRpbmdzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Nob3dUZW1wbGF0ZUdhbGxlcnksIHNldFNob3dUZW1wbGF0ZUdhbGxlcnldID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2hvd1ByaW50Q29uZmlybWF0aW9uLCBzZXRTaG93UHJpbnRDb25maXJtYXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2hvd1RlbXBsYXRlQ3VzdG9taXphdGlvbiwgc2V0U2hvd1RlbXBsYXRlQ3VzdG9taXphdGlvbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIFxuICAvLyBSZXN0b3JhdGlvbiBzdGF0ZVxuICBjb25zdCBbaXNSZXN0b3JpbmdKb2JzLCBzZXRJc1Jlc3RvcmluZ0pvYnNdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtzZWxlY3RlZFRlbXBsYXRlLCBzZXRTZWxlY3RlZFRlbXBsYXRlXSA9IHVzZVN0YXRlPEdlbmVyYXRlZENhcmQgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzSW5pdGlhbExvYWRDb21wbGV0ZSwgc2V0SXNJbml0aWFsTG9hZENvbXBsZXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgXG4gIC8vIFRlbXBsYXRlIHN0YXRlXG4gIGNvbnN0IFt0ZW1wbGF0ZVNlYXJjaFF1ZXJ5LCBzZXRUZW1wbGF0ZVNlYXJjaFF1ZXJ5XSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbaXNTZWFyY2hpbmdUZW1wbGF0ZXMsIHNldElzU2VhcmNoaW5nVGVtcGxhdGVzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FpRmlsdGVyZWRDYXJkcywgc2V0QWlGaWx0ZXJlZENhcmRzXSA9IHVzZVN0YXRlPGFueVtdPihbXSk7XG4gIGNvbnN0IFtzZWFyY2hNb2RlLCBzZXRTZWFyY2hNb2RlXSA9IHVzZVN0YXRlPCd0ZXh0JyB8ICdhaScgfCAnaHlicmlkJz4oJ3RleHQnKTtcbiAgY29uc3QgW3RleHRGaWx0ZXJlZENhcmRzLCBzZXRUZXh0RmlsdGVyZWRDYXJkc10gPSB1c2VTdGF0ZTxhbnlbXT4oW10pO1xuICBjb25zdCBbc2hvd1Byb21wdHMsIHNldFNob3dQcm9tcHRzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3ByaW50T3B0aW9uLCBzZXRQcmludE9wdGlvbl0gPSB1c2VTdGF0ZTwncGh5c2ljYWwnIHwgJ2VtYWlsJz4oJ3BoeXNpY2FsJyk7XG4gIFxuICAvLyBUZW1wbGF0ZSBjdXN0b21pemF0aW9uIHN0YXRlXG4gIGNvbnN0IFt0ZW1wbGF0ZUN1c3RvbWl6YXRpb25zLCBzZXRUZW1wbGF0ZUN1c3RvbWl6YXRpb25zXSA9IHVzZVN0YXRlKHtcbiAgICBwcm9tcHRDaGFuZ2VzOiBcIlwiLFxuICAgIG1lc3NhZ2VDaGFuZ2VzOiBcIlwiLFxuICAgIHVzZVJlZmVyZW5jZUltYWdlOiBmYWxzZSxcbiAgICByZWZlcmVuY2VJbWFnZUZpbGU6IG51bGwgYXMgRmlsZSB8IG51bGwsXG4gICAgcmVmZXJlbmNlSW1hZ2VVcmxzOiBbXSBhcyBzdHJpbmdbXSxcbiAgICByZWZlcmVuY2VJbWFnZVRyYW5zZm9ybWF0aW9uOiBcIlwiXG4gIH0pO1xuICBcbiAgLy8gU2VjdGlvbiBsb2FkaW5nIHN0YXRlc1xuICBjb25zdCBbc2VjdGlvbkxvYWRpbmdTdGF0ZXMsIHNldFNlY3Rpb25Mb2FkaW5nU3RhdGVzXSA9IHVzZVN0YXRlPHtcbiAgICBmcm9udENvdmVyOiAnaWRsZScgfCAnbG9hZGluZycgfCAnY29tcGxldGVkJyB8ICdlcnJvcic7XG4gICAgYmFja0NvdmVyOiAnaWRsZScgfCAnbG9hZGluZycgfCAnY29tcGxldGVkJyB8ICdlcnJvcic7XG4gICAgbGVmdEludGVyaW9yOiAnaWRsZScgfCAnbG9hZGluZycgfCAnY29tcGxldGVkJyB8ICdlcnJvcic7XG4gICAgcmlnaHRJbnRlcmlvcjogJ2lkbGUnIHwgJ2xvYWRpbmcnIHwgJ2NvbXBsZXRlZCcgfCAnZXJyb3InO1xuICB9Pih7XG4gICAgZnJvbnRDb3ZlcjogJ2lkbGUnLFxuICAgIGJhY2tDb3ZlcjogJ2lkbGUnLFxuICAgIGxlZnRJbnRlcmlvcjogJ2lkbGUnLFxuICAgIHJpZ2h0SW50ZXJpb3I6ICdpZGxlJyxcbiAgfSk7XG4gIFxuICAvLyBDb3VudGRvd24gc3RhdGVcbiAgY29uc3QgW2NvdW50ZG93biwgc2V0Q291bnRkb3duXSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFtjb3VudGRvd25JbnRlcnZhbCwgc2V0Q291bnRkb3duSW50ZXJ2YWxdID0gdXNlU3RhdGU8Tm9kZUpTLlRpbWVvdXQgfCBudWxsPihudWxsKTtcblxuICAvLyBVc2UgbW9kdWxhciBob29rc1xuICBjb25zdCB3ZWJTb2NrZXQgPSB1c2VXZWJTb2NrZXQoKTtcbiAgY29uc3Qgam9iTWFuYWdlbWVudCA9IHVzZUpvYk1hbmFnZW1lbnQoKTtcbiAgY29uc3QgZmlsZUhhbmRsaW5nID0gdXNlRmlsZUhhbmRsaW5nKCk7XG4gIGNvbnN0IG1lc3NhZ2VHZW5lcmF0aW9uID0gdXNlTWVzc2FnZUdlbmVyYXRpb24oXG4gICAgc2VsZWN0ZWRUeXBlLFxuICAgIGN1c3RvbUNhcmRUeXBlLFxuICAgIHNlbGVjdGVkVG9uZSxcbiAgICBwcm9tcHQsXG4gICAgdG9GaWVsZCxcbiAgICBmcm9tRmllbGQsXG4gICAgcmVsYXRpb25zaGlwRmllbGQsXG4gICAgZmlsZUhhbmRsaW5nLnBob3RvUmVmZXJlbmNlc1xuICApO1xuICBcbiAgLy8gRHJhZnQgZ2VuZXJhdGlvbiBwcm9wc1xuICBjb25zdCBkcmFmdEdlbmVyYXRpb25Qcm9wcyA9IHtcbiAgICBzZWxlY3RlZFR5cGUsXG4gICAgY3VzdG9tQ2FyZFR5cGUsXG4gICAgc2VsZWN0ZWRUb25lLFxuICAgIHNlbGVjdGVkQXJ0aXN0aWNTdHlsZSxcbiAgICBjdXN0b21TdHlsZURlc2NyaXB0aW9uLFxuICAgIHNlbGVjdGVkRHJhZnRNb2RlbCxcbiAgICBzZWxlY3RlZEltYWdlTW9kZWwsXG4gICAgc2VsZWN0ZWRQYXBlclNpemUsXG4gICAgcHJvbXB0LFxuICAgIHBlcnNvbmFsVHJhaXRzLFxuICAgIHRvRmllbGQsXG4gICAgZnJvbUZpZWxkLFxuICAgIHVzZXJFbWFpbCxcbiAgICBmaW5hbENhcmRNZXNzYWdlOiBtZXNzYWdlR2VuZXJhdGlvbi5maW5hbENhcmRNZXNzYWdlLFxuICAgIGlzSGFuZHdyaXR0ZW5NZXNzYWdlLFxuICAgIGlzRnJvbnRCYWNrT25seSxcbiAgICByZWZlcmVuY2VJbWFnZVVybHM6IGZpbGVIYW5kbGluZy5yZWZlcmVuY2VJbWFnZVVybHMsXG4gICAgcGhvdG9SZWZlcmVuY2VzOiBmaWxlSGFuZGxpbmcucGhvdG9SZWZlcmVuY2VzLFxuICAgIHJlbGF0aW9uc2hpcEZpZWxkLFxuICAgIHNhdmVKb2JUb1N0b3JhZ2U6IGpvYk1hbmFnZW1lbnQuc2F2ZUpvYlRvU3RvcmFnZSxcbiAgICBzdWJzY3JpYmVUb0pvYjogd2ViU29ja2V0LnN1YnNjcmliZVRvSm9iLFxuICAgIHVuc3Vic2NyaWJlRnJvbUFsbEpvYnM6IHdlYlNvY2tldC51bnN1YnNjcmliZUZyb21BbGxKb2JzLFxuICAgIHN0YXJ0RWxhcHNlZFRpbWVUcmFja2luZzogam9iTWFuYWdlbWVudC5zdGFydEVsYXBzZWRUaW1lVHJhY2tpbmcsXG4gICAgc3RvcEVsYXBzZWRUaW1lVHJhY2tpbmc6IGpvYk1hbmFnZW1lbnQuc3RvcEVsYXBzZWRUaW1lVHJhY2tpbmcsXG4gICAgc2V0UHJvZ3Jlc3NQZXJjZW50YWdlOiBqb2JNYW5hZ2VtZW50LnNldFByb2dyZXNzUGVyY2VudGFnZSxcbiAgfTtcbiAgXG4gIGNvbnN0IGRyYWZ0R2VuZXJhdGlvbiA9IHVzZURyYWZ0R2VuZXJhdGlvbihkcmFmdEdlbmVyYXRpb25Qcm9wcyk7XG4gIFxuICAvLyBDYXJkIGdlbmVyYXRpb24gcHJvcHNcbiAgY29uc3QgY2FyZEdlbmVyYXRpb25Qcm9wcyA9IHtcbiAgICBzZWxlY3RlZFR5cGUsXG4gICAgY3VzdG9tQ2FyZFR5cGUsXG4gICAgc2VsZWN0ZWRUb25lLFxuICAgIHNlbGVjdGVkQXJ0aXN0aWNTdHlsZSxcbiAgICBjdXN0b21TdHlsZURlc2NyaXB0aW9uLFxuICAgIHNlbGVjdGVkSW1hZ2VNb2RlbCxcbiAgICBzZWxlY3RlZFBhcGVyU2l6ZSxcbiAgICBwcm9tcHQsXG4gICAgcGVyc29uYWxUcmFpdHMsXG4gICAgdG9GaWVsZCxcbiAgICBmcm9tRmllbGQsXG4gICAgdXNlckVtYWlsLFxuICAgIGZpbmFsQ2FyZE1lc3NhZ2U6IG1lc3NhZ2VHZW5lcmF0aW9uLmZpbmFsQ2FyZE1lc3NhZ2UsXG4gICAgaXNIYW5kd3JpdHRlbk1lc3NhZ2UsXG4gICAgaXNGcm9udEJhY2tPbmx5LFxuICAgIHJlZmVyZW5jZUltYWdlVXJsczogZmlsZUhhbmRsaW5nLnJlZmVyZW5jZUltYWdlVXJscyxcbiAgICBwaG90b1JlZmVyZW5jZXM6IGZpbGVIYW5kbGluZy5waG90b1JlZmVyZW5jZXMsXG4gICAgcmVsYXRpb25zaGlwRmllbGQsXG4gICAgbnVtYmVyT2ZDYXJkcyxcbiAgICBzYXZlSm9iVG9TdG9yYWdlOiBqb2JNYW5hZ2VtZW50LnNhdmVKb2JUb1N0b3JhZ2UsXG4gICAgcmVtb3ZlSm9iRnJvbVN0b3JhZ2U6IGpvYk1hbmFnZW1lbnQucmVtb3ZlSm9iRnJvbVN0b3JhZ2UsXG4gICAgc3Vic2NyaWJlVG9Kb2I6IHdlYlNvY2tldC5zdWJzY3JpYmVUb0pvYixcbiAgICBzdGFydEVsYXBzZWRUaW1lVHJhY2tpbmc6IGpvYk1hbmFnZW1lbnQuc3RhcnRFbGFwc2VkVGltZVRyYWNraW5nLFxuICAgIHN0b3BFbGFwc2VkVGltZVRyYWNraW5nOiBqb2JNYW5hZ2VtZW50LnN0b3BFbGFwc2VkVGltZVRyYWNraW5nLFxuICAgIHNldEN1cnJlbnRKb2JJZDogam9iTWFuYWdlbWVudC5zZXRDdXJyZW50Sm9iSWQsXG4gICAgc2V0SXNEcmFmdE1vZGU6IGRyYWZ0R2VuZXJhdGlvbi5zZXRJc0RyYWZ0TW9kZSxcbiAgICBzZXREcmFmdENhcmRzOiBkcmFmdEdlbmVyYXRpb24uc2V0RHJhZnRDYXJkcyxcbiAgICBzZXRTZWxlY3RlZERyYWZ0SW5kZXg6IGRyYWZ0R2VuZXJhdGlvbi5zZXRTZWxlY3RlZERyYWZ0SW5kZXgsXG4gICAgc2V0SXNHZW5lcmF0aW5nRmluYWxDYXJkOiBkcmFmdEdlbmVyYXRpb24uc2V0SXNHZW5lcmF0aW5nRmluYWxDYXJkLFxuICAgIHNldFByZXZpZXdpbmdEcmFmdEluZGV4OiBkcmFmdEdlbmVyYXRpb24uc2V0UHJldmlld2luZ0RyYWZ0SW5kZXgsXG4gICAgc2V0RHJhZnRDb21wbGV0aW9uU2hvd246IGRyYWZ0R2VuZXJhdGlvbi5zZXREcmFmdENvbXBsZXRpb25TaG93bixcbiAgICBzZXREcmFmdENvbXBsZXRpb25Db3VudDogZHJhZnRHZW5lcmF0aW9uLnNldERyYWZ0Q29tcGxldGlvbkNvdW50LFxuICB9O1xuICBcbiAgY29uc3QgY2FyZEdlbmVyYXRpb24gPSB1c2VDYXJkR2VuZXJhdGlvbihjYXJkR2VuZXJhdGlvblByb3BzKTtcblxuICAvLyBIYW5kbGUgam9iIHVwZGF0ZXMgZnJvbSBXZWJTb2NrZXRcbiAgY29uc3QgaGFuZGxlSm9iVXBkYXRlID0gdXNlQ2FsbGJhY2soKGRhdGE6IGFueSkgPT4ge1xuICAgIGNvbnN0IHsgam9iX2lkLCBzdGF0dXMsIHByb2dyZXNzLCBjYXJkRGF0YSwgZXJyb3IsIGNvbXBsZXRlZEF0IH0gPSBkYXRhO1xuICAgIFxuICAgIGlmICgham9iX2lkKSByZXR1cm47XG4gICAgXG4gICAgLy8gU2tpcCB1cGRhdGVzIGlmIHdlJ3JlIHN0aWxsIHJlc3RvcmluZyBqb2JzIGZyb20gbG9jYWxTdG9yYWdlXG4gICAgaWYgKGlzUmVzdG9yaW5nSm9icykge1xuICAgICAgY29uc29sZS5sb2coJ+KPsyBTa2lwcGluZyBqb2IgdXBkYXRlIGR1cmluZyByZXN0b3JhdGlvbjonLCBqb2JfaWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgZHJhZnQgam9iXG4gICAgY29uc3QgaXNEcmFmdEpvYiA9IGpvYl9pZC5zdGFydHNXaXRoKCdkcmFmdC0nKTtcbiAgICBjb25zdCBkcmFmdEluZGV4ID0gaXNEcmFmdEpvYiA/IHBhcnNlSW50KGpvYl9pZC5zcGxpdCgnLScpWzFdKSA6IC0xO1xuICAgIFxuICAgIC8vIEZpbHRlciBvdXQgdXBkYXRlcyBmcm9tIHdyb25nIGpvYiB0eXBlXG4gICAgLy8gSWYgd2UncmUgaW4gZHJhZnQgbW9kZSwgb25seSBwcm9jZXNzIGRyYWZ0IGpvYnNcbiAgICAvLyBJZiB3ZSdyZSBpbiBmaW5hbCBtb2RlLCBvbmx5IHByb2Nlc3Mgbm9uLWRyYWZ0IGpvYnNcbiAgICBjb25zdCBpc0luRHJhZnRNb2RlID0gZHJhZnRHZW5lcmF0aW9uLmlzRHJhZnRNb2RlO1xuICAgIGlmIChpc0luRHJhZnRNb2RlICYmICFpc0RyYWZ0Sm9iKSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+aqyBJZ25vcmluZyBub24tZHJhZnQgam9iIHVwZGF0ZSBpbiBkcmFmdCBtb2RlOicsIGpvYl9pZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXNJbkRyYWZ0TW9kZSAmJiBpc0RyYWZ0Sm9iKSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+aqyBJZ25vcmluZyBkcmFmdCBqb2IgdXBkYXRlIGluIGZpbmFsIG1vZGU6Jywgam9iX2lkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/CflIQgUHJvY2Vzc2luZyBqb2IgdXBkYXRlOicsIHsgam9iX2lkLCBzdGF0dXMsIGlzRHJhZnRKb2IsIGRyYWZ0SW5kZXgsIHByb2dyZXNzIH0pO1xuICAgIFxuICAgIC8vIEhhbmRsZSBzdGF0dXMgdHJhbnNpdGlvbnNcbiAgICBpZiAoc3RhdHVzID09PSAncHJvY2Vzc2luZycgJiYgIWNhcmRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZyAmJiAhZHJhZnRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZykge1xuICAgICAgY29uc29sZS5sb2coJ/CflIQgSm9iIGlzIHByb2Nlc3NpbmcsIHNldHRpbmcgZ2VuZXJhdGlvbiBzdGF0ZScpO1xuICAgICAgaWYgKGlzRHJhZnRKb2IpIHtcbiAgICAgICAgZHJhZnRHZW5lcmF0aW9uLnNldElzR2VuZXJhdGluZyh0cnVlKTtcbiAgICAgICAgZHJhZnRHZW5lcmF0aW9uLnNldElzRHJhZnRNb2RlKHRydWUpO1xuICAgICAgICBqb2JNYW5hZ2VtZW50LnN0YXJ0RWxhcHNlZFRpbWVUcmFja2luZygnZHJhZnQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcmRHZW5lcmF0aW9uLnNldElzR2VuZXJhdGluZyh0cnVlKTtcbiAgICAgICAgam9iTWFuYWdlbWVudC5zdGFydEVsYXBzZWRUaW1lVHJhY2tpbmcoJ2ZpbmFsJyk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSBwcm9ncmVzcyBpZiBwcm92aWRlZFxuICAgIGlmIChwcm9ncmVzcykge1xuICAgICAgLy8gSU1QT1JUQU5UOiBEb24ndCBzaG93IFwiR2VuZXJhdGlvbiBjb21wbGV0ZSFcIiB1bnRpbCB3ZSd2ZSBhY3R1YWxseSBwcm9jZXNzZWQgdGhlIGNhcmRcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgdGhlIFVJIGZyb20gc2hvd2luZyBjb21wbGV0aW9uIGJlZm9yZSB0aGUgY2FyZCBpcyByZWFkeVxuICAgICAgaWYgKHByb2dyZXNzLmluY2x1ZGVzKCdHZW5lcmF0aW9uIGNvbXBsZXRlIScpICYmIHN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgJiYgIWlzRHJhZnRKb2IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPuO+4jyBIb2xkaW5nIFwiR2VuZXJhdGlvbiBjb21wbGV0ZSFcIiBtZXNzYWdlIHVudGlsIGNhcmQgaXMgcHJvY2Vzc2VkJyk7XG4gICAgICAgIC8vIERvbid0IHVwZGF0ZSB0aGUgcHJvZ3Jlc3MgbWVzc2FnZSB5ZXQgLSBpdCB3aWxsIGJlIHNldCBpbiBoYW5kbGVGaW5hbENhcmRDb21wbGV0aW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJkR2VuZXJhdGlvbi5zZXRHZW5lcmF0aW9uUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuICAgICAgICBkcmFmdEdlbmVyYXRpb24uc2V0R2VuZXJhdGlvblByb2dyZXNzKHByb2dyZXNzKTtcbiAgICAgICAgY29uc29sZS5sb2coYPCfk4ogUHJvZ3Jlc3MgbWVzc2FnZTogJHtwcm9ncmVzc31gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKHN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgJiYgY2FyZERhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn46JIEpvYiBjb21wbGV0ZWQhIENhcmQgZGF0YTonLCBjYXJkRGF0YSwgJ2lzRHJhZnRKb2I6JywgaXNEcmFmdEpvYik7XG4gICAgICBcbiAgICAgIC8vIE5vcm1hbGl6ZSBmaWVsZCBuYW1lcyB0byBoYW5kbGUgYmFja2VuZCBpbmNvbnNpc3RlbmNpZXNcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRDYXJkRGF0YSA9IHtcbiAgICAgICAgLi4uY2FyZERhdGEsXG4gICAgICAgIGxlZnRJbnRlcmlvcjogY2FyZERhdGEubGVmdEludGVyaW9yIHx8IGNhcmREYXRhLmxlZnRQYWdlIHx8IGNhcmREYXRhLmxlZnRfaW50ZXJpb3IgfHwgY2FyZERhdGEubGVmdF9wYWdlLFxuICAgICAgICByaWdodEludGVyaW9yOiBjYXJkRGF0YS5yaWdodEludGVyaW9yIHx8IGNhcmREYXRhLnJpZ2h0UGFnZSB8fCBjYXJkRGF0YS5yaWdodF9pbnRlcmlvciB8fCBjYXJkRGF0YS5yaWdodF9wYWdlLFxuICAgICAgICBmcm9udENvdmVyOiBjYXJkRGF0YS5mcm9udENvdmVyIHx8IGNhcmREYXRhLmZyb250X2NvdmVyIHx8IGNhcmREYXRhLmZyb250LFxuICAgICAgICBiYWNrQ292ZXI6IGNhcmREYXRhLmJhY2tDb3ZlciB8fCBjYXJkRGF0YS5iYWNrX2NvdmVyIHx8IGNhcmREYXRhLmJhY2ssXG4gICAgICAgIC8vIEtlZXAgb3JpZ2luYWwgZmllbGRzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICAgIGxlZnRQYWdlOiBjYXJkRGF0YS5sZWZ0UGFnZSB8fCBjYXJkRGF0YS5sZWZ0SW50ZXJpb3IgfHwgY2FyZERhdGEubGVmdF9wYWdlIHx8IGNhcmREYXRhLmxlZnRfaW50ZXJpb3IsXG4gICAgICAgIHJpZ2h0UGFnZTogY2FyZERhdGEucmlnaHRQYWdlIHx8IGNhcmREYXRhLnJpZ2h0SW50ZXJpb3IgfHwgY2FyZERhdGEucmlnaHRfcGFnZSB8fCBjYXJkRGF0YS5yaWdodF9pbnRlcmlvclxuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gVmFsaWRhdGUgdGhhdCB3ZSBoYXZlIHRoZSBtaW5pbXVtIHJlcXVpcmVkIGZpZWxkcyBmb3IgYSBjb21wbGV0ZSBjYXJkXG4gICAgICBjb25zdCBoYXNSZXF1aXJlZEZpZWxkcyA9IG5vcm1hbGl6ZWRDYXJkRGF0YS5mcm9udENvdmVyICYmIFxuICAgICAgICAoaXNEcmFmdEpvYiB8fCAoXG4gICAgICAgICAgaXNGcm9udEJhY2tPbmx5IFxuICAgICAgICAgICAgPyBub3JtYWxpemVkQ2FyZERhdGEuYmFja0NvdmVyIFxuICAgICAgICAgICAgOiAobm9ybWFsaXplZENhcmREYXRhLmJhY2tDb3ZlciAmJiBub3JtYWxpemVkQ2FyZERhdGEubGVmdEludGVyaW9yICYmIG5vcm1hbGl6ZWRDYXJkRGF0YS5yaWdodEludGVyaW9yKVxuICAgICAgICApKTtcbiAgICAgIFxuICAgICAgaWYgKCFoYXNSZXF1aXJlZEZpZWxkcykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBDYXJkIGRhdGEgbWlzc2luZyByZXF1aXJlZCBmaWVsZHM6Jywge1xuICAgICAgICAgIGZyb250Q292ZXI6ICEhbm9ybWFsaXplZENhcmREYXRhLmZyb250Q292ZXIsXG4gICAgICAgICAgYmFja0NvdmVyOiAhIW5vcm1hbGl6ZWRDYXJkRGF0YS5iYWNrQ292ZXIsXG4gICAgICAgICAgbGVmdEludGVyaW9yOiAhIW5vcm1hbGl6ZWRDYXJkRGF0YS5sZWZ0SW50ZXJpb3IsXG4gICAgICAgICAgcmlnaHRJbnRlcmlvcjogISFub3JtYWxpemVkQ2FyZERhdGEucmlnaHRJbnRlcmlvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdXBkYXRlIGZvciBhIHJlY292ZXJ5IGpvYiwgZW5zdXJlIGdlbmVyYXRpb24gc3RhdGUgaXMgc2V0IHByb3Blcmx5XG4gICAgICBpZiAoaXNEcmFmdEpvYiAmJiAhZHJhZnRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZyAmJiBkcmFmdEdlbmVyYXRpb24uZHJhZnRDYXJkcy5maWx0ZXIoQm9vbGVhbikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OlIFJlY292ZXJlZCBjb21wbGV0ZWQgZHJhZnQgam9iIC0gbm90IHNldHRpbmcgYXMgZ2VuZXJhdGluZycpO1xuICAgICAgICAvLyBEb24ndCBzZXQgaXNHZW5lcmF0aW5nIGZvciBhbHJlYWR5IGNvbXBsZXRlZCBqb2JzIGR1cmluZyByZWNvdmVyeVxuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAoaXNEcmFmdEpvYiAmJiBkcmFmdEluZGV4ID49IDApIHtcbiAgICAgICAgLy8gSGFuZGxlIGRyYWZ0IGNhcmQgY29tcGxldGlvblxuICAgICAgICBjb25zb2xlLmxvZyhg8J+OqCBEcmFmdCB2YXJpYXRpb24gJHtkcmFmdEluZGV4ICsgMX0gY29tcGxldGVkIWApO1xuICAgICAgICBcbiAgICAgICAgLy8gR2V0IHN0eWxlIGluZm8gZm9yIHNtYXJ0IHN0eWxlIG1vZGVcbiAgICAgICAgbGV0IHN0eWxlSW5mbzogeyBzdHlsZU5hbWU6IHN0cmluZzsgc3R5bGVMYWJlbDogc3RyaW5nIH0gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzZWxlY3RlZEFydGlzdGljU3R5bGUgPT09IFwiYWktc21hcnQtc3R5bGVcIikge1xuICAgICAgICAgIGNvbnN0IHByZWRlZmluZWRTdHlsZXMgPSBbXG4gICAgICAgICAgICBcIndhdGVyY29sb3JcIiwgXCJib3RhbmljYWxcIiwgXCJjb21pYy1ib29rXCIsIFwiZHJlYW15LWZhbnRhc3lcIiwgXCJtaW5pbWFsaXN0XCJcbiAgICAgICAgICBdO1xuICAgICAgICAgIGNvbnN0IHN0eWxlTGFiZWxzID0gW1xuICAgICAgICAgICAgXCLwn46oIFdhdGVyY29sb3JcIiwgXCLwn4y/IEJvdGFuaWNhbFwiLCBcIvCfkqUgQ29taWMgQm9va1wiLCBcIvCfjLggRHJlYW15IEZhbnRhc3lcIiwgXCLinKggTWluaW1hbGlzdFwiXG4gICAgICAgICAgXTtcbiAgICAgICAgICBpZiAoZHJhZnRJbmRleCA+PSAwICYmIGRyYWZ0SW5kZXggPCBwcmVkZWZpbmVkU3R5bGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3R5bGVJbmZvID0ge1xuICAgICAgICAgICAgICBzdHlsZU5hbWU6IHByZWRlZmluZWRTdHlsZXNbZHJhZnRJbmRleF0sXG4gICAgICAgICAgICAgIHN0eWxlTGFiZWw6IHN0eWxlTGFiZWxzW2RyYWZ0SW5kZXhdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRyYWZ0Q2FyZDogR2VuZXJhdGVkQ2FyZCA9IHtcbiAgICAgICAgICBpZDogYGRyYWZ0LSR7ZHJhZnRJbmRleCArIDF9LSR7RGF0ZS5ub3coKX1gLFxuICAgICAgICAgIHByb21wdDogbm9ybWFsaXplZENhcmREYXRhLnByb21wdCB8fCBgRHJhZnQgVmFyaWF0aW9uICR7ZHJhZnRJbmRleCArIDF9YCxcbiAgICAgICAgICBmcm9udENvdmVyOiBub3JtYWxpemVkQ2FyZERhdGEuZnJvbnRDb3ZlciB8fCBcIlwiLFxuICAgICAgICAgIGJhY2tDb3Zlcjogbm9ybWFsaXplZENhcmREYXRhLmJhY2tDb3ZlciB8fCBcIlwiLFxuICAgICAgICAgIGxlZnRQYWdlOiBub3JtYWxpemVkQ2FyZERhdGEubGVmdEludGVyaW9yIHx8IFwiXCIsXG4gICAgICAgICAgcmlnaHRQYWdlOiBub3JtYWxpemVkQ2FyZERhdGEucmlnaHRJbnRlcmlvciB8fCBcIlwiLFxuICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICBnZW5lcmF0ZWRQcm9tcHRzOiBub3JtYWxpemVkQ2FyZERhdGEuZ2VuZXJhdGVkUHJvbXB0cyB8fCB7XG4gICAgICAgICAgICBmcm9udENvdmVyOiBjYXJkRGF0YS5nZW5lcmF0ZWRQcm9tcHRzPy5mcm9udENvdmVyIHx8IFwiXCIsXG4gICAgICAgICAgICBiYWNrQ292ZXI6IGNhcmREYXRhLmdlbmVyYXRlZFByb21wdHM/LmJhY2tDb3ZlciB8fCBcIlwiLFxuICAgICAgICAgICAgbGVmdEludGVyaW9yOiBjYXJkRGF0YS5nZW5lcmF0ZWRQcm9tcHRzPy5sZWZ0SW50ZXJpb3IgfHwgXCJcIixcbiAgICAgICAgICAgIHJpZ2h0SW50ZXJpb3I6IGNhcmREYXRhLmdlbmVyYXRlZFByb21wdHM/LnJpZ2h0SW50ZXJpb3IgfHwgXCJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3R5bGVJbmZvOiBzdHlsZUluZm9cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNpbXBsaWZpZWQgZHJhZnQgdHJhY2tpbmcgLSB1c2UgZml4ZWQgYXJyYXkgcG9zaXRpb25zXG4gICAgICAgIGRyYWZ0R2VuZXJhdGlvbi5zZXREcmFmdENhcmRzKHByZXYgPT4ge1xuICAgICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBbLi4ucHJldl07XG4gICAgICAgICAgLy8gRW5zdXJlIGFycmF5IGhhcyA1IHNsb3RzXG4gICAgICAgICAgd2hpbGUgKHVwZGF0ZWQubGVuZ3RoIDwgNSkge1xuICAgICAgICAgICAgdXBkYXRlZC5wdXNoKG51bGwgYXMgYW55KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUGxhY2UgZHJhZnQgYXQgaXRzIGNvcnJlY3QgaW5kZXhcbiAgICAgICAgICB1cGRhdGVkW2RyYWZ0SW5kZXhdID0gZHJhZnRDYXJkO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgRHJhZnQgJHtkcmFmdEluZGV4ICsgMX0gY29tcGxldGVkIGFuZCBzdG9yZWQgYXQgaW5kZXggJHtkcmFmdEluZGV4fWApO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIE5vIGxvbmdlciBzYXZlIGluZGl2aWR1YWwgZHJhZnRzIHRvIGxvY2FsU3RvcmFnZVxuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNpbXBsaWZpZWQgY29tcGxldGlvbiB0cmFja2luZyAtIGNvdW50IHRoZSB1cGRhdGVkIGFycmF5IGluY2x1ZGluZyB0aGUgbmV3IGRyYWZ0XG4gICAgICAgIGNvbnN0IHVwZGF0ZWREcmFmdHMgPSBbLi4uZHJhZnRHZW5lcmF0aW9uLmRyYWZ0Q2FyZHNdO1xuICAgICAgICB1cGRhdGVkRHJhZnRzW2RyYWZ0SW5kZXhdID0gZHJhZnRDYXJkO1xuICAgICAgICBjb25zdCBjb21wbGV0ZWRDb3VudCA9IHVwZGF0ZWREcmFmdHMuZmlsdGVyKEJvb2xlYW4pLmxlbmd0aDtcbiAgICAgICAgY29uc29sZS5sb2coYPCfk4ogRHJhZnQgcHJvZ3Jlc3M6ICR7Y29tcGxldGVkQ291bnR9LzUgdmFyaWF0aW9ucyBjb21wbGV0ZWApO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHByb2dyZXNzXG4gICAgICAgIGNvbnN0IHByb2dyZXNzTXNnID0gY29tcGxldGVkQ291bnQgPT09IDUgXG4gICAgICAgICAgPyBcIkFsbCA1IHZhcmlhdGlvbnMgcmVhZHkhIENob29zZSB5b3VyIGZhdm9yaXRlIGJlbG93LlwiXG4gICAgICAgICAgOiBgJHtjb21wbGV0ZWRDb3VudH0vNSB2YXJpYXRpb25zIGNvbXBsZXRlLi4uJHtjb21wbGV0ZWRDb3VudCA+PSAyID8gXCIgWW91IGNhbiBzZWxlY3Qgb25lIG5vdyFcIiA6IFwiXCJ9YDtcbiAgICAgICAgXG4gICAgICAgIGRyYWZ0R2VuZXJhdGlvbi5zZXRHZW5lcmF0aW9uUHJvZ3Jlc3MocHJvZ3Jlc3NNc2cpO1xuICAgICAgICBcbiAgICAgICAgLy8gT3ZlcnJpZGUgdGltZS1iYXNlZCBwcm9ncmVzcyB3aXRoIHJlYWwgcHJvZ3Jlc3Mgd2hlbiBkcmFmdHMgY29tcGxldGVcbiAgICAgICAgLy8gRG9uJ3Qgb3ZlcnJpZGUgdGltZS1iYXNlZCBwcm9ncmVzc1xuICAgICAgICBjb25zb2xlLmxvZyhg8J+OqCBEcmFmdCAke2NvbXBsZXRlZENvdW50fS81IGNvbXBsZXRlZGApO1xuICAgICAgICBcbiAgICAgICAgLy8gSGFuZGxlIG1pbGVzdG9uZXNcbiAgICAgICAgaWYgKGNvbXBsZXRlZENvdW50ID09PSAxKSB7XG4gICAgICAgICAgc2Nyb2xsVG9DYXJkUHJldmlldygpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoY29tcGxldGVkQ291bnQgPT09IDUgJiYgIWRyYWZ0R2VuZXJhdGlvbi5pc0dlbmVyYXRpbmdGaW5hbENhcmQpIHtcbiAgICAgICAgICBkcmFmdEdlbmVyYXRpb24uc2V0SXNHZW5lcmF0aW5nKGZhbHNlKTtcbiAgICAgICAgICBqb2JNYW5hZ2VtZW50LnN0b3BFbGFwc2VkVGltZVRyYWNraW5nKCk7XG4gICAgICAgICAgLy8gQ2xlYXIgcmVjb3ZlcnkgZGF0YSBmb3IgY29tcGxldGVkIGRyYWZ0IGpvYnNcbiAgICAgICAgICBzdG9yYWdlLmNsZWFyUmVjb3ZlcnkoKTtcbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+nuSBDbGVhcmVkIHJlY292ZXJ5IGRhdGEgZm9yIGNvbXBsZXRlZCBkcmFmdCBqb2InKTtcbiAgICAgICAgICB0b2FzdC5zdWNjZXNzKFwi8J+OqCBBbGwgNSBmcm9udCBjb3ZlciB2YXJpYXRpb25zIHJlYWR5ISBDaG9vc2UgeW91ciBmYXZvcml0ZSBiZWxvdy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEtlZXAgZHJhZnQgam9icyBpbiBzdG9yYWdlIGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgLy8gT25seSB1bnN1YnNjcmliZSBmcm9tIFdlYlNvY2tldFxuICAgICAgICB3ZWJTb2NrZXQudW5zdWJzY3JpYmVGcm9tSm9iKGpvYl9pZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGDinIUgS2VlcGluZyBkcmFmdCBqb2IgJHtqb2JfaWR9IGluIHN0b3JhZ2UgZm9yIGZ1dHVyZSBhY2Nlc3NgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEhhbmRsZSBmaW5hbCBjYXJkIGNvbXBsZXRpb25cbiAgICAgICAgY29uc29sZS5sb2coJ/CflI0gRmluYWwgY2FyZCBjb21wbGV0aW9uIGRldGVjdGVkLiBDYXJkIGRhdGEgc3RydWN0dXJlOicsIHtcbiAgICAgICAgICBoYXNDYXJkRGF0YTogISFjYXJkRGF0YSxcbiAgICAgICAgICBjYXJkRGF0YUtleXM6IE9iamVjdC5rZXlzKGNhcmREYXRhIHx8IHt9KSxcbiAgICAgICAgICBmcm9udENvdmVyOiBjYXJkRGF0YT8uZnJvbnRDb3ZlciA/ICdQcmVzZW50JyA6ICdNaXNzaW5nJyxcbiAgICAgICAgICBiYWNrQ292ZXI6IGNhcmREYXRhPy5iYWNrQ292ZXIgPyAnUHJlc2VudCcgOiAnTWlzc2luZycsXG4gICAgICAgICAgbGVmdEludGVyaW9yOiBjYXJkRGF0YT8ubGVmdEludGVyaW9yID8gJ1ByZXNlbnQnIDogJ01pc3NpbmcnLFxuICAgICAgICAgIHJpZ2h0SW50ZXJpb3I6IGNhcmREYXRhPy5yaWdodEludGVyaW9yID8gJ1ByZXNlbnQnIDogJ01pc3NpbmcnLFxuICAgICAgICAgIGxlZnRQYWdlOiBjYXJkRGF0YT8ubGVmdFBhZ2UgPyAnUHJlc2VudCcgOiAnTWlzc2luZycsXG4gICAgICAgICAgcmlnaHRQYWdlOiBjYXJkRGF0YT8ucmlnaHRQYWdlID8gJ1ByZXNlbnQnIDogJ01pc3NpbmcnLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk50gRnVsbCBjYXJkIGRhdGE6JywgSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplZENhcmREYXRhLCBudWxsLCAyKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBVc2UgdGhlIGFscmVhZHkgbm9ybWFsaXplZCBjYXJkIGRhdGFcbiAgICAgICAgY29uc3QgbWFwcGVkQ2FyZERhdGEgPSBub3JtYWxpemVkQ2FyZERhdGE7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygn8J+UhCBOb3JtYWxpemVkIGNhcmQgZGF0YSBmb3IgZnJvbnRlbmQ6Jywge1xuICAgICAgICAgIGZyb250Q292ZXI6IG1hcHBlZENhcmREYXRhLmZyb250Q292ZXIgPyAnUHJlc2VudCcgOiAnTWlzc2luZycsXG4gICAgICAgICAgYmFja0NvdmVyOiBtYXBwZWRDYXJkRGF0YS5iYWNrQ292ZXIgPyAnUHJlc2VudCcgOiAnTWlzc2luZycsXG4gICAgICAgICAgbGVmdEludGVyaW9yOiBtYXBwZWRDYXJkRGF0YS5sZWZ0SW50ZXJpb3IgPyAnUHJlc2VudCcgOiAnTWlzc2luZycsXG4gICAgICAgICAgcmlnaHRJbnRlcmlvcjogbWFwcGVkQ2FyZERhdGEucmlnaHRJbnRlcmlvciA/ICdQcmVzZW50JyA6ICdNaXNzaW5nJyxcbiAgICAgICAgICBoYXNBbGxSZXF1aXJlZEZpZWxkczogaGFzUmVxdWlyZWRGaWVsZHNcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBPbmx5IHByb2Nlc3MgY29tcGxldGlvbiBpZiB3ZSBoYXZlIGFsbCByZXF1aXJlZCBmaWVsZHNcbiAgICAgICAgaWYgKGhhc1JlcXVpcmVkRmllbGRzKSB7XG4gICAgICAgICAgLy8gQ2FsbCB0aGUgY29tcGxldGlvbiBoYW5kbGVyXG4gICAgICAgICAgY29uc29sZS5sb2coJ/CfmoAgQ2FsbGluZyBoYW5kbGVGaW5hbENhcmRDb21wbGV0aW9uLi4uJyk7XG4gICAgICAgICAgY2FyZEdlbmVyYXRpb24uaGFuZGxlRmluYWxDYXJkQ29tcGxldGlvbihtYXBwZWRDYXJkRGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIENhbm5vdCBjb21wbGV0ZSBjYXJkIC0gbWlzc2luZyByZXF1aXJlZCBmaWVsZHMnKTtcbiAgICAgICAgICB0b2FzdC5lcnJvcihcIkNhcmQgZ2VuZXJhdGlvbiBpbmNvbXBsZXRlIC0gbWlzc2luZyBzb21lIHBhbmVscy4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XG4gICAgICAgICAgLy8gRm9yY2UgY2xlYXIgdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAgICAgICBjYXJkR2VuZXJhdGlvbi5zZXRJc0dlbmVyYXRpbmcoZmFsc2UpO1xuICAgICAgICAgIGRyYWZ0R2VuZXJhdGlvbi5zZXRJc0dlbmVyYXRpbmdGaW5hbENhcmQoZmFsc2UpO1xuICAgICAgICAgIGpvYk1hbmFnZW1lbnQuc3RvcEVsYXBzZWRUaW1lVHJhY2tpbmcoKTtcbiAgICAgICAgICBqb2JNYW5hZ2VtZW50LnNldEdlbmVyYXRpb25Qcm9ncmVzcyhcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2FyZCBpcyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIHJlY2VudCBjYXJkcyBieSBtYXJrSm9iQ29tcGxldGVcbiAgICAgICAgXG4gICAgICAgIC8vIE9ubHkgY2xlYXIgcmVjb3ZlcnkgaWYgd2UncmUgbm90IGluIHRoZSBtaWRkbGUgb2YgcmVzdG9yaW5nXG4gICAgICAgIGlmICghaXNSZXN0b3JpbmdKb2JzKSB7XG4gICAgICAgICAgam9iTWFuYWdlbWVudC5yZW1vdmVKb2JGcm9tU3RvcmFnZShqb2JfaWQpO1xuICAgICAgICB9XG4gICAgICAgIGpvYk1hbmFnZW1lbnQuc2V0Q3VycmVudEpvYklkKG51bGwpO1xuICAgICAgICB3ZWJTb2NrZXQudW5zdWJzY3JpYmVGcm9tSm9iKGpvYl9pZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdmYWlsZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgSm9iIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICBcbiAgICAgIGlmIChpc0RyYWZ0Sm9iICYmIGRyYWZ0SW5kZXggPj0gMCkge1xuICAgICAgICB0b2FzdC5lcnJvcihgRHJhZnQgdmFyaWF0aW9uICR7ZHJhZnRJbmRleCArIDF9IGZhaWxlZC4gQ29udGludWluZyB3aXRoIG90aGVycy4uLmApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9hc3QuZXJyb3IoXCLinYwgQ2FyZCBnZW5lcmF0aW9uIGZhaWxlZC4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XG4gICAgICAgIGNhcmRHZW5lcmF0aW9uLnNldElzR2VuZXJhdGluZyhmYWxzZSk7XG4gICAgICAgIGRyYWZ0R2VuZXJhdGlvbi5zZXRJc0dlbmVyYXRpbmdGaW5hbENhcmQoZmFsc2UpO1xuICAgICAgICBqb2JNYW5hZ2VtZW50LnN0b3BFbGFwc2VkVGltZVRyYWNraW5nKCk7XG4gICAgICAgIGNhcmRHZW5lcmF0aW9uLnNldEdlbmVyYXRpb25Qcm9ncmVzcyhcIlwiKTtcbiAgICAgICAgLy8gRG9uJ3QgcmVzZXQgcHJvZ3Jlc3MgLSBsZXQgdGltZS1iYXNlZCBwcm9ncmVzcyBjb250aW51ZVxuICAgICAgICAvLyBqb2JNYW5hZ2VtZW50LnNldFByb2dyZXNzUGVyY2VudGFnZSgwKTtcbiAgICAgICAgam9iTWFuYWdlbWVudC5zZXRDdXJyZW50Sm9iSWQobnVsbCk7XG4gICAgICAgIHdlYlNvY2tldC51bnN1YnNjcmliZUZyb21Kb2Ioam9iX2lkKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gT25seSBjbGVhciByZWNvdmVyeSBpZiB3ZSdyZSBub3QgaW4gdGhlIG1pZGRsZSBvZiByZXN0b3JpbmdcbiAgICAgIGlmICghaXNSZXN0b3JpbmdKb2JzKSB7XG4gICAgICAgIGpvYk1hbmFnZW1lbnQucmVtb3ZlSm9iRnJvbVN0b3JhZ2Uoam9iX2lkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ25vdF9mb3VuZCcpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEpvYiBub3QgZm91bmQgb24gc2VydmVyLCBjbGVhbmluZyB1cCBzdGFsZSByZWZlcmVuY2U6Jywgam9iX2lkKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYW4gdXAgc3RhbGUgam9iIHJlZmVyZW5jZVxuICAgICAgaWYgKHdlYlNvY2tldC5jdXJyZW50Sm9iUmVmLmN1cnJlbnQgPT09IGpvYl9pZCkge1xuICAgICAgICB3ZWJTb2NrZXQuY3VycmVudEpvYlJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUmVzZXQgVUkgc3RhdGUgaWYgdGhpcyB3YXMgdGhlIGN1cnJlbnQgam9iXG4gICAgICBpZiAoam9iTWFuYWdlbWVudC5jdXJyZW50Sm9iSWQgPT09IGpvYl9pZCkge1xuICAgICAgICBqb2JNYW5hZ2VtZW50LnNldEN1cnJlbnRKb2JJZChudWxsKTtcbiAgICAgICAgY2FyZEdlbmVyYXRpb24uc2V0SXNHZW5lcmF0aW5nKGZhbHNlKTtcbiAgICAgICAgZHJhZnRHZW5lcmF0aW9uLnNldElzR2VuZXJhdGluZ0ZpbmFsQ2FyZChmYWxzZSk7XG4gICAgICAgIGNhcmRHZW5lcmF0aW9uLnNldEdlbmVyYXRpb25Qcm9ncmVzcyhcIlwiKTtcbiAgICAgICAgLy8gRG9uJ3QgcmVzZXQgcHJvZ3Jlc3MgLSBsZXQgdGltZS1iYXNlZCBwcm9ncmVzcyBjb250aW51ZVxuICAgICAgICAvLyBqb2JNYW5hZ2VtZW50LnNldFByb2dyZXNzUGVyY2VudGFnZSgwKTtcbiAgICAgICAgam9iTWFuYWdlbWVudC5zdG9wRWxhcHNlZFRpbWVUcmFja2luZygpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDbGVhbiB1cCBzdG9yYWdlXG4gICAgICAvLyBPbmx5IGNsZWFyIHJlY292ZXJ5IGlmIHdlJ3JlIG5vdCBpbiB0aGUgbWlkZGxlIG9mIHJlc3RvcmluZ1xuICAgICAgaWYgKCFpc1Jlc3RvcmluZ0pvYnMpIHtcbiAgICAgICAgam9iTWFuYWdlbWVudC5yZW1vdmVKb2JGcm9tU3RvcmFnZShqb2JfaWQpO1xuICAgICAgfVxuICAgICAgd2ViU29ja2V0LnVuc3Vic2NyaWJlRnJvbUpvYihqb2JfaWQpO1xuICAgIH1cbiAgfSwgW3NlbGVjdGVkQXJ0aXN0aWNTdHlsZSwgZHJhZnRHZW5lcmF0aW9uLCBjYXJkR2VuZXJhdGlvbiwgam9iTWFuYWdlbWVudCwgd2ViU29ja2V0LCBpc1Jlc3RvcmluZ0pvYnNdKTtcblxuICAvLyBTZXQgdXAgV2ViU29ja2V0IGpvYiB1cGRhdGUgaGFuZGxlclxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdlYlNvY2tldC5zZXRKb2JVcGRhdGVIYW5kbGVyKGhhbmRsZUpvYlVwZGF0ZSk7XG4gIH0sIFt3ZWJTb2NrZXQsIGhhbmRsZUpvYlVwZGF0ZV0pO1xuXG4gIC8vIFRyYWNrIGlmIHdlJ3ZlIGFscmVhZHkgbG9nZ2VkIHRoZSBzdGFsZSBqb2IgbWVzc2FnZVxuICBjb25zdCBzdGFsZUpvYkxvZ2dlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgLy8gQXV0by1yZWNvbm5lY3QgV2ViU29ja2V0IGlmIGRpc2Nvbm5lY3RlZCBkdXJpbmcgYWN0aXZlIGdlbmVyYXRpb25cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXdlYlNvY2tldC5pc1NvY2tldENvbm5lY3RlZCAmJiBcbiAgICAgICAgKGNhcmRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZyB8fCBkcmFmdEdlbmVyYXRpb24uaXNHZW5lcmF0aW5nRmluYWxDYXJkKSAmJiBcbiAgICAgICAgd2ViU29ja2V0LmN1cnJlbnRKb2JSZWYuY3VycmVudCkge1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiB0aGUgZ2VuZXJhdGlvbiBoYXMgYmVlbiBydW5uaW5nIGZvciBtb3JlIHRoYW4gNSBtaW51dGVzXG4gICAgICBpZiAoam9iTWFuYWdlbWVudC5nZW5lcmF0aW9uU3RhcnRUaW1lKSB7XG4gICAgICAgIGNvbnN0IGpvYkFnZSA9IERhdGUubm93KCkgLSBqb2JNYW5hZ2VtZW50LmdlbmVyYXRpb25TdGFydFRpbWU7XG4gICAgICAgIGlmIChqb2JBZ2UgPiA1ICogNjAgKiAxMDAwKSB7IC8vIDUgbWludXRlc1xuICAgICAgICAgIGlmICghc3RhbGVKb2JMb2dnZWRSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ+KPsCBKb2IgaXMgb2xkZXIgdGhhbiA1IG1pbnV0ZXMsIHN0b3BwaW5nIHJlY29ubmVjdGlvbiBhdHRlbXB0cycpO1xuICAgICAgICAgICAgc3RhbGVKb2JMb2dnZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHN0YWxlIGpvYlxuICAgICAgICAgICAgY29uc3Qgam9iSWQgPSB3ZWJTb2NrZXQuY3VycmVudEpvYlJlZi5jdXJyZW50O1xuICAgICAgICAgICAgaWYgKGpvYklkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfwn6e5IENsZWFuaW5nIHVwIHN0YWxlIGpvYjonLCBqb2JJZCk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBSZW1vdmUgZnJvbSBsb2NhbFN0b3JhZ2UgKG9ubHkgaWYgbm90IGEgZHJhZnQgam9iKVxuICAgICAgICAgICAgICBpZiAoIWpvYklkLnN0YXJ0c1dpdGgoJ2RyYWZ0LScpKSB7XG4gICAgICAgICAgICAgICAgam9iTWFuYWdlbWVudC5yZW1vdmVKb2JGcm9tU3RvcmFnZShqb2JJZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIFJlc2V0IGdlbmVyYXRpb24gc3RhdGVzXG4gICAgICAgICAgICAgIGNhcmRHZW5lcmF0aW9uLnNldElzR2VuZXJhdGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgIGRyYWZ0R2VuZXJhdGlvbi5zZXRJc0dlbmVyYXRpbmdGaW5hbENhcmQoZmFsc2UpO1xuICAgICAgICAgICAgICBkcmFmdEdlbmVyYXRpb24uc2V0SXNEcmFmdE1vZGUoZmFsc2UpO1xuICAgICAgICAgICAgICBkcmFmdEdlbmVyYXRpb24uc2V0RHJhZnRDYXJkcyhbXSk7XG4gICAgICAgICAgICAgIGRyYWZ0R2VuZXJhdGlvbi5zZXREcmFmdENvbXBsZXRpb25Db3VudCgwKTtcbiAgICAgICAgICAgICAgZHJhZnRHZW5lcmF0aW9uLnNldERyYWZ0Q29tcGxldGlvblNob3duKGZhbHNlKTtcbiAgICAgICAgICAgICAgam9iTWFuYWdlbWVudC5zZXRDdXJyZW50Sm9iSWQobnVsbCk7XG4gICAgICAgICAgICAgIGpvYk1hbmFnZW1lbnQuc2V0R2VuZXJhdGlvblByb2dyZXNzKCcnKTtcbiAgICAgICAgICAgICAgLy8gRG9uJ3QgcmVzZXQgcHJvZ3Jlc3MgLSBsZXQgdGltZS1iYXNlZCBwcm9ncmVzcyBjb250aW51ZVxuICAgICAgICAvLyBqb2JNYW5hZ2VtZW50LnNldFByb2dyZXNzUGVyY2VudGFnZSgwKTtcbiAgICAgICAgICAgICAgam9iTWFuYWdlbWVudC5zdG9wRWxhcHNlZFRpbWVUcmFja2luZygpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gVW5zdWJzY3JpYmUgZnJvbSBqb2JcbiAgICAgICAgICAgICAgd2ViU29ja2V0LnVuc3Vic2NyaWJlRnJvbUpvYihqb2JJZCk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBTaG93IGVycm9yIHRvYXN0XG4gICAgICAgICAgICAgIHRvYXN0LmVycm9yKCdDYXJkIGdlbmVyYXRpb24gdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ/CflIQgV2ViU29ja2V0IGRpc2Nvbm5lY3RlZCBkdXJpbmcgZ2VuZXJhdGlvbiwgYXR0ZW1wdGluZyByZWNvbm5lY3QuLi4nKTtcbiAgICAgIGNvbnN0IHJlY29ubmVjdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHdlYlNvY2tldC5jb25uZWN0V2ViU29ja2V0KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZS1zdWJzY3JpYmUgdG8gY3VycmVudCBqb2IgYWZ0ZXIgcmVjb25uZWN0aW9uXG4gICAgICAgIGNvbnN0IGpvYklkID0gd2ViU29ja2V0LmN1cnJlbnRKb2JSZWYuY3VycmVudDtcbiAgICAgICAgaWYgKGpvYklkKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygn8J+ToSBSZS1zdWJzY3JpYmluZyB0byBqb2IgYWZ0ZXIgcmVjb25uZWN0OicsIGpvYklkKTtcbiAgICAgICAgICAgIHdlYlNvY2tldC5zdWJzY3JpYmVUb0pvYihqb2JJZCk7XG4gICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDIwMDApO1xuICAgICAgXG4gICAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHJlY29ubmVjdFRpbWVyKTtcbiAgICB9XG4gIH0sIFt3ZWJTb2NrZXQsIGNhcmRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZywgZHJhZnRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZ0ZpbmFsQ2FyZCwgam9iTWFuYWdlbWVudC5nZW5lcmF0aW9uU3RhcnRUaW1lXSk7XG5cbiAgLy8gUmVzZXQgc3RhbGUgam9iIGZsYWcgd2hlbiBnZW5lcmF0aW9uIHN0YXJ0c1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjYXJkR2VuZXJhdGlvbi5pc0dlbmVyYXRpbmcgfHwgZHJhZnRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZ0ZpbmFsQ2FyZCkge1xuICAgICAgc3RhbGVKb2JMb2dnZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIH1cbiAgfSwgW2NhcmRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZywgZHJhZnRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZ0ZpbmFsQ2FyZF0pO1xuXG4gIC8vIE1vbml0b3IgZm9yIHN0YWxlIGpvYiB1cGRhdGVzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKChjYXJkR2VuZXJhdGlvbi5pc0dlbmVyYXRpbmcgfHwgZHJhZnRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZ0ZpbmFsQ2FyZCkgJiYgXG4gICAgICAgIHdlYlNvY2tldC5jdXJyZW50Sm9iUmVmLmN1cnJlbnQpIHtcbiAgICAgIGNvbnN0IGNoZWNrSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RVcGRhdGUgPSBEYXRlLm5vdygpIC0gd2ViU29ja2V0Lmxhc3RKb2JVcGRhdGVSZWYuY3VycmVudDtcbiAgICAgICAgY29uc3Qgam9iSWQgPSB3ZWJTb2NrZXQuY3VycmVudEpvYlJlZi5jdXJyZW50O1xuICAgICAgICBcbiAgICAgICAgLy8gVmVyeSBhZ2dyZXNzaXZlIGNoZWNraW5nIHdoZW4gYXQgOTUlKyBwcm9ncmVzc1xuICAgICAgICBpZiAoam9iTWFuYWdlbWVudC5wcm9ncmVzc1BlcmNlbnRhZ2UgPj0gOTUgJiYgdGltZVNpbmNlTGFzdFVwZGF0ZSA+IDUwMDApIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyBObyB1cGRhdGVzIGZvciAke01hdGgucm91bmQodGltZVNpbmNlTGFzdFVwZGF0ZS8xMDAwKX1zIGF0ICR7am9iTWFuYWdlbWVudC5wcm9ncmVzc1BlcmNlbnRhZ2V9JSBwcm9ncmVzcyAtIGNoZWNraW5nIGpvYiBzdGF0dXMuLi5gKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoam9iSWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvam9iLXN0YXR1cy8ke2pvYklkfWApO1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBqb2JTdGF0dXMgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ/Cfk4ogRGlyZWN0IGpvYiBzdGF0dXMgY2hlY2s6Jywgam9iU3RhdHVzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoam9iU3RhdHVzLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgJiYgam9iU3RhdHVzLmNhcmREYXRhKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn4pyFIEpvYiBpcyBhY3R1YWxseSBjb21wbGV0ZWQhIFByb2Nlc3NpbmcgcmVzdWx0Li4uJyk7XG4gICAgICAgICAgICAgICAgICBoYW5kbGVKb2JVcGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICBqb2JfaWQ6IGpvYklkLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogJ0NhcmQgZ2VuZXJhdGlvbiBjb21wbGV0ZSEnLFxuICAgICAgICAgICAgICAgICAgICBjYXJkRGF0YTogam9iU3RhdHVzLmNhcmREYXRhXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gRXhpdCBlYXJseSBvbiBjb21wbGV0aW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY2hlY2sgam9iIHN0YXR1czonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE1vcmUgYWdncmVzc2l2ZSBjaGVja2luZyB3aGVuIGF0IGhpZ2ggcHJvZ3Jlc3NcbiAgICAgICAgZWxzZSBpZiAoam9iTWFuYWdlbWVudC5wcm9ncmVzc1BlcmNlbnRhZ2UgPj0gOTAgJiYgdGltZVNpbmNlTGFzdFVwZGF0ZSA+IDEwMDAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGDimqDvuI8gTm8gdXBkYXRlcyBmb3IgJHtNYXRoLnJvdW5kKHRpbWVTaW5jZUxhc3RVcGRhdGUvMTAwMCl9cyBhdCAke2pvYk1hbmFnZW1lbnQucHJvZ3Jlc3NQZXJjZW50YWdlfSUgcHJvZ3Jlc3NgKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoam9iSWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvam9iLXN0YXR1cy8ke2pvYklkfWApO1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBqb2JTdGF0dXMgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ/Cfk4ogRGlyZWN0IGpvYiBzdGF0dXMgY2hlY2s6Jywgam9iU3RhdHVzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoam9iU3RhdHVzLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgJiYgam9iU3RhdHVzLmNhcmREYXRhKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn4pyFIEpvYiBpcyBhY3R1YWxseSBjb21wbGV0ZWQhIFByb2Nlc3NpbmcgcmVzdWx0Li4uJyk7XG4gICAgICAgICAgICAgICAgICBoYW5kbGVKb2JVcGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICBqb2JfaWQ6IGpvYklkLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogJ0NhcmQgZ2VuZXJhdGlvbiBjb21wbGV0ZSEnLFxuICAgICAgICAgICAgICAgICAgICBjYXJkRGF0YTogam9iU3RhdHVzLmNhcmREYXRhXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gRXhpdCBlYXJseSBvbiBjb21wbGV0aW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY2hlY2sgam9iIHN0YXR1czonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTdGFuZGFyZCBzdGFsZSB1cGRhdGUgY2hlY2tcbiAgICAgICAgaWYgKHRpbWVTaW5jZUxhc3RVcGRhdGUgPiAzMDAwMCkgeyAvLyAzMCBzZWNvbmRzIHdpdGhvdXQgdXBkYXRlXG4gICAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTm8gam9iIHVwZGF0ZXMgZm9yIDMwIHNlY29uZHMsIGNoZWNraW5nIGNvbm5lY3Rpb24uLi4nKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoIXdlYlNvY2tldC5pc1NvY2tldENvbm5lY3RlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ/CflIQgV2ViU29ja2V0IGRpc2Nvbm5lY3RlZCwgcmVjb25uZWN0aW5nLi4uJyk7XG4gICAgICAgICAgICB3ZWJTb2NrZXQuY29ubmVjdFdlYlNvY2tldCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoam9iSWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5OhIFJlLXN1YnNjcmliaW5nIHRvIGpvYiBkdWUgdG8gc3RhbGUgdXBkYXRlczonLCBqb2JJZCk7XG4gICAgICAgICAgICB3ZWJTb2NrZXQuc3Vic2NyaWJlVG9Kb2Ioam9iSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZXNldCB0aGUgdGltZXJcbiAgICAgICAgICB3ZWJTb2NrZXQubGFzdEpvYlVwZGF0ZVJlZi5jdXJyZW50ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgfVxuICAgICAgfSwgMzAwMCk7IC8vIENoZWNrIGV2ZXJ5IDMgc2Vjb25kcyBmb3IgZmFzdGVyIGRldGVjdGlvbiBhdCBoaWdoIHByb2dyZXNzXG4gICAgICBcbiAgICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGNoZWNrSW50ZXJ2YWwpO1xuICAgIH1cbiAgfSwgW2NhcmRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZywgZHJhZnRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZ0ZpbmFsQ2FyZCwgXG4gICAgICB3ZWJTb2NrZXQsIGpvYk1hbmFnZW1lbnQucHJvZ3Jlc3NQZXJjZW50YWdlLCBoYW5kbGVKb2JVcGRhdGVdKTtcblxuICAvLyBTaW1wbGlmaWVkIGpvYiByZXN0b3JhdGlvbiB1c2luZyBuZXcgc3RvcmFnZSBtYW5hZ2VyXG4gIGNvbnN0IGNoZWNrUGVuZGluZ0pvYnMgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ/CflIQgQ2hlY2tpbmcgZm9yIHJlY292ZXJ5IGRhdGEuLi4nKTtcbiAgICBzZXRJc1Jlc3RvcmluZ0pvYnModHJ1ZSk7XG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIGFjdGl2ZSByZWNvdmVyeSBqb2JcbiAgICBjb25zdCByZWNvdmVyeSA9IHN0b3JhZ2UuZ2V0UmVjb3ZlcnkoKTtcbiAgICBcbiAgICBpZiAoIXJlY292ZXJ5KSB7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIE5vIGFjdGl2ZSBqb2IgdG8gcmVjb3ZlcicpO1xuICAgICAgc2V0SXNSZXN0b3JpbmdKb2JzKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/CflIQgRm91bmQgcmVjb3ZlcnkgZGF0YTonLCByZWNvdmVyeSk7XG4gICAgXG4gICAgLy8gSW4gb3VyIHNpbXBsaWZpZWQgc3lzdGVtLCB3ZSBvbmx5IHRyYWNrIG9uZSBhY3RpdmUgam9iIGF0IGEgdGltZVxuICAgIC8vIFJlY292ZXJ5IGlzIG1lYW50IGZvciBicm93c2VyIGNyYXNoZXMgZHVyaW5nIGdlbmVyYXRpb25cbiAgICBjb25zdCBpc1JlY292ZXJ5RHJhZnQgPSByZWNvdmVyeS5qb2JJZD8uc3RhcnRzV2l0aCgnZHJhZnQtJyk7XG4gICAgXG4gICAgaWYgKGlzUmVjb3ZlcnlEcmFmdCkge1xuICAgICAgY29uc29sZS5sb2coJ/CfjqggUmVjb3ZlcmluZyBmcm9tIGRyYWZ0IGdlbmVyYXRpb24nKTtcbiAgICAgIC8vIEZvciBkcmFmdCByZWNvdmVyeSwgd2UgY2FuJ3QgcmVzdG9yZSB0aGUgZXhhY3Qgc3RhdGVcbiAgICAgIC8vIFVzZXIgd2lsbCBuZWVkIHRvIHJlc3RhcnQgdGhlIGRyYWZ0IGdlbmVyYXRpb25cbiAgICAgIHNldElzUmVzdG9yaW5nSm9icyhmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIEZvciBmaW5hbCBjYXJkIHJlY292ZXJ5LCB3ZSBjYW4gdHJ5IHRvIHJlc3RvcmUgdGhlIGpvYlxuICAgIGNvbnNvbGUubG9nKCfwn46vIFJlY292ZXJpbmcgZnJvbSBmaW5hbCBjYXJkIGdlbmVyYXRpb24nKTtcbiAgICBcbiAgICAvLyBSZXN0b3JlIGdlbmVyYXRpb24gc3RhdGVcbiAgICBqb2JNYW5hZ2VtZW50LnNldEN1cnJlbnRKb2JJZChyZWNvdmVyeS5qb2JJZCk7XG4gICAgY2FyZEdlbmVyYXRpb24uc2V0SXNHZW5lcmF0aW5nKHRydWUpO1xuICAgIGNhcmRHZW5lcmF0aW9uLnNldEdlbmVyYXRpb25Qcm9ncmVzcyhcIvCflIQgUmVzdW1pbmcgZ2VuZXJhdGlvbi4uLlwiKTtcbiAgICBqb2JNYW5hZ2VtZW50LnN0YXJ0RWxhcHNlZFRpbWVUcmFja2luZygnZmluYWwnKTtcbiAgICBcbiAgICAvLyBTdWJzY3JpYmUgdG8gdGhlIGpvYiB0byBnZXQgdXBkYXRlc1xuICAgIHdlYlNvY2tldC5zdWJzY3JpYmVUb0pvYihyZWNvdmVyeS5qb2JJZCk7XG4gICAgc2V0SXNSZXN0b3JpbmdKb2JzKGZhbHNlKTtcbiAgfSwgW3dlYlNvY2tldCwgc3RvcmFnZV0pO1xuXG4gIC8vIExvYWQgcmVjb3ZlcnkgZGF0YSBvbiBjb21wb25lbnQgbW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+agCB1c2VDYXJkU3R1ZGlvIG1vdW50ZWQsIGNoZWNraW5nIGZvciByZWNvdmVyeS4uLicpO1xuICAgIFxuICAgIC8vIENoZWNrIGZvciBhY3RpdmUgcmVjb3Zlcnkgam9iXG4gICAgY29uc3QgcmVjb3ZlcnkgPSBzdG9yYWdlLmdldFJlY292ZXJ5KCk7XG4gICAgY29uc29sZS5sb2coJ/Cfk6YgUmVjb3ZlcnkgZGF0YTonLCByZWNvdmVyeSk7XG4gICAgXG4gICAgaWYgKHJlY292ZXJ5KSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+UhCBGb3VuZCBhY3RpdmUgam9iIHRvIHJlY292ZXI6JywgcmVjb3Zlcnkuam9iSWQpO1xuICAgICAgXG4gICAgICAvLyBGb3IgZHJhZnQgam9icywgY2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGNvbXBsZXRlZCBkcmFmdHNcbiAgICAgIGNvbnN0IGlzRHJhZnQgPSByZWNvdmVyeS5qb2JJZC5zdGFydHNXaXRoKCdkcmFmdC0nKTtcbiAgICAgIFxuICAgICAgaWYgKGlzRHJhZnQpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGNvbXBsZXRlZCBkcmFmdCBjYXJkc1xuICAgICAgICBjb25zdCBoYXNDb21wbGV0ZWREcmFmdHMgPSBkcmFmdEdlbmVyYXRpb24uZHJhZnRDYXJkcy5maWx0ZXIoY2FyZCA9PiBjYXJkICE9PSBudWxsKS5sZW5ndGggPiAwO1xuICAgICAgICBcbiAgICAgICAgaWYgKGhhc0NvbXBsZXRlZERyYWZ0cykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfinIUgRHJhZnQgam9iIGFscmVhZHkgY29tcGxldGVkLCBub3Qgc2V0dGluZyBhcyBnZW5lcmF0aW5nJyk7XG4gICAgICAgICAgLy8gSnVzdCByZXN0b3JlIHRoZSBqb2IgSUQgZm9yIHJlZmVyZW5jZSwgYnV0IGRvbid0IHNldCBhcyBnZW5lcmF0aW5nXG4gICAgICAgICAgam9iTWFuYWdlbWVudC5zZXRDdXJyZW50Sm9iSWQocmVjb3Zlcnkuam9iSWQpO1xuICAgICAgICAgIGRyYWZ0R2VuZXJhdGlvbi5zZXRJc0RyYWZ0TW9kZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+OqCBSZXN1bWluZyBpbmNvbXBsZXRlIGRyYWZ0IGdlbmVyYXRpb24nKTtcbiAgICAgICAgICAvLyBTdWJzY3JpYmUgdG8gdGhlIGpvYiB0byBjaGVjayBpdHMgc3RhdHVzXG4gICAgICAgICAgam9iTWFuYWdlbWVudC5zZXRDdXJyZW50Sm9iSWQocmVjb3Zlcnkuam9iSWQpO1xuICAgICAgICAgIHdlYlNvY2tldC5zdWJzY3JpYmVUb0pvYihyZWNvdmVyeS5qb2JJZCk7XG4gICAgICAgICAgZHJhZnRHZW5lcmF0aW9uLnNldElzRHJhZnRNb2RlKHRydWUpO1xuICAgICAgICAgIC8vIERvbid0IHNldCBhcyBnZW5lcmF0aW5nIHlldCAtIHdhaXQgZm9yIFdlYlNvY2tldCB0byB0ZWxsIHVzIHRoZSBhY3R1YWwgc3RhdHVzXG4gICAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyBuYXZpZ2F0aW9uIHRvIFN0ZXAgNSBmb3IgYWxyZWFkeSBjb21wbGV0ZWQgam9ic1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfij7MgV2FpdGluZyBmb3Igam9iIHN0YXR1cyB1cGRhdGUgYmVmb3JlIHNldHRpbmcgZ2VuZXJhdGlvbiBzdGF0ZS4uLicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3IgZmluYWwgY2FyZCByZWNvdmVyeSwgY2hlY2sgaWYgYWxyZWFkeSBjb21wbGV0ZWRcbiAgICAgICAgaWYgKGNhcmRHZW5lcmF0aW9uLmdlbmVyYXRlZENhcmQgJiYgY2FyZEdlbmVyYXRpb24uaXNDYXJkQ29tcGxldGVkKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ+KchSBGaW5hbCBjYXJkIGFscmVhZHkgY29tcGxldGVkLCBub3Qgc2V0dGluZyBhcyBnZW5lcmF0aW5nJyk7XG4gICAgICAgICAgam9iTWFuYWdlbWVudC5zZXRDdXJyZW50Sm9iSWQocmVjb3Zlcnkuam9iSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfwn46vIFJlc3VtaW5nIGluY29tcGxldGUgZmluYWwgY2FyZCBnZW5lcmF0aW9uJyk7XG4gICAgICAgICAgam9iTWFuYWdlbWVudC5zZXRDdXJyZW50Sm9iSWQocmVjb3Zlcnkuam9iSWQpO1xuICAgICAgICAgIHdlYlNvY2tldC5zdWJzY3JpYmVUb0pvYihyZWNvdmVyeS5qb2JJZCk7XG4gICAgICAgICAgY2FyZEdlbmVyYXRpb24uc2V0SXNHZW5lcmF0aW5nKHRydWUpO1xuICAgICAgICAgIGNhcmRHZW5lcmF0aW9uLnNldEdlbmVyYXRpb25Qcm9ncmVzcygn8J+OqCBSZXN1bWluZyBjYXJkIGdlbmVyYXRpb24uLi4nKTtcbiAgICAgICAgICBqb2JNYW5hZ2VtZW50LnN0YXJ0RWxhcHNlZFRpbWVUcmFja2luZygnZmluYWwnKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgZmluYWwgY2FyZCBnZW5lcmF0aW9uIGZyb20gYSBkcmFmdCwgc2V0IHRoZSBhcHByb3ByaWF0ZSBzdGF0ZVxuICAgICAgICAgIGlmIChyZWNvdmVyeS5mb3JtRGF0YSAmJiByZWNvdmVyeS5mb3JtRGF0YS5zZWxlY3RlZERyYWZ0SW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZHJhZnRHZW5lcmF0aW9uLnNldElzR2VuZXJhdGluZ0ZpbmFsQ2FyZCh0cnVlKTtcbiAgICAgICAgICAgIGRyYWZ0R2VuZXJhdGlvbi5zZXRTZWxlY3RlZERyYWZ0SW5kZXgocmVjb3ZlcnkuZm9ybURhdGEuc2VsZWN0ZWREcmFmdEluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gQWx3YXlzIG1hcmsgcmVzdG9yYXRpb24gYXMgY29tcGxldGVcbiAgICBzZXRJc1Jlc3RvcmluZ0pvYnMoZmFsc2UpO1xuICAgIFxuICAgIC8vIE1hcmsgcmVzdG9yYXRpb24gYXMgY29tcGxldGUgYWZ0ZXIgYSBzbWFsbCBkZWxheVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0SXNSZXN0b3JpbmdKb2JzKGZhbHNlKTtcbiAgICB9LCAxMDApO1xuICB9LCBbXSk7XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgc3RhdGUgYW5kIGZ1bmN0aW9ucyB0aGF0IHRoZSBVSSBuZWVkc1xuICByZXR1cm4ge1xuICAgIC8vIENvcmUgc3RhdGVcbiAgICBwcm9tcHQsXG4gICAgc2V0UHJvbXB0LFxuICAgIGZpbmFsQ2FyZE1lc3NhZ2U6IG1lc3NhZ2VHZW5lcmF0aW9uLmZpbmFsQ2FyZE1lc3NhZ2UsXG4gICAgc2V0RmluYWxDYXJkTWVzc2FnZTogbWVzc2FnZUdlbmVyYXRpb24uc2V0RmluYWxDYXJkTWVzc2FnZSxcbiAgICB0b0ZpZWxkLFxuICAgIHNldFRvRmllbGQsXG4gICAgZnJvbUZpZWxkLFxuICAgIHNldEZyb21GaWVsZCxcbiAgICByZWxhdGlvbnNoaXBGaWVsZCxcbiAgICBzZXRSZWxhdGlvbnNoaXBGaWVsZCxcbiAgICBwZXJzb25hbFRyYWl0cyxcbiAgICBzZXRQZXJzb25hbFRyYWl0cyxcbiAgICBzZWxlY3RlZFR5cGUsXG4gICAgc2V0U2VsZWN0ZWRUeXBlLFxuICAgIGN1c3RvbUNhcmRUeXBlLFxuICAgIHNldEN1c3RvbUNhcmRUeXBlLFxuICAgIHNlbGVjdGVkVG9uZSxcbiAgICBzZXRTZWxlY3RlZFRvbmUsXG4gICAgaXNHZW5lcmF0aW5nOiBjYXJkR2VuZXJhdGlvbi5pc0dlbmVyYXRpbmcgfHwgZHJhZnRHZW5lcmF0aW9uLmlzR2VuZXJhdGluZyxcbiAgICBzZXRJc0dlbmVyYXRpbmc6IGNhcmRHZW5lcmF0aW9uLnNldElzR2VuZXJhdGluZyxcbiAgICBpc0dlbmVyYXRpbmdNZXNzYWdlOiBtZXNzYWdlR2VuZXJhdGlvbi5pc0dlbmVyYXRpbmdNZXNzYWdlLFxuICAgIHNldElzR2VuZXJhdGluZ01lc3NhZ2U6IG1lc3NhZ2VHZW5lcmF0aW9uLnNldElzR2VuZXJhdGluZ01lc3NhZ2UsXG4gICAgZ2VuZXJhdGVkQ2FyZDogY2FyZEdlbmVyYXRpb24uZ2VuZXJhdGVkQ2FyZCxcbiAgICBzZXRHZW5lcmF0ZWRDYXJkOiBjYXJkR2VuZXJhdGlvbi5zZXRHZW5lcmF0ZWRDYXJkLFxuICAgIG51bWJlck9mQ2FyZHMsXG4gICAgc2V0TnVtYmVyT2ZDYXJkcyxcbiAgICBnZW5lcmF0ZWRDYXJkczogY2FyZEdlbmVyYXRpb24uZ2VuZXJhdGVkQ2FyZHMsXG4gICAgc2V0R2VuZXJhdGVkQ2FyZHM6IGNhcmRHZW5lcmF0aW9uLnNldEdlbmVyYXRlZENhcmRzLFxuICAgIHNlbGVjdGVkQ2FyZEluZGV4OiBjYXJkR2VuZXJhdGlvbi5zZWxlY3RlZENhcmRJbmRleCxcbiAgICBzZXRTZWxlY3RlZENhcmRJbmRleDogY2FyZEdlbmVyYXRpb24uc2V0U2VsZWN0ZWRDYXJkSW5kZXgsXG4gICAgXG4gICAgLy8gQWR2YW5jZWQgb3B0aW9uc1xuICAgIHNob3dBZHZhbmNlZCxcbiAgICBzZXRTaG93QWR2YW5jZWQsXG4gICAgc2VsZWN0ZWRBcnRpc3RpY1N0eWxlLFxuICAgIHNldFNlbGVjdGVkQXJ0aXN0aWNTdHlsZSxcbiAgICBjdXN0b21TdHlsZURlc2NyaXB0aW9uLFxuICAgIHNldEN1c3RvbVN0eWxlRGVzY3JpcHRpb24sXG4gICAgc2VsZWN0ZWRJbWFnZU1vZGVsLFxuICAgIHNldFNlbGVjdGVkSW1hZ2VNb2RlbCxcbiAgICBzZWxlY3RlZERyYWZ0TW9kZWwsXG4gICAgc2V0U2VsZWN0ZWREcmFmdE1vZGVsLFxuICAgIFxuICAgIC8vIERyYWZ0IG1vZGVcbiAgICBpc0RyYWZ0TW9kZTogZHJhZnRHZW5lcmF0aW9uLmlzRHJhZnRNb2RlLFxuICAgIHNldElzRHJhZnRNb2RlOiBkcmFmdEdlbmVyYXRpb24uc2V0SXNEcmFmdE1vZGUsXG4gICAgZHJhZnRDYXJkczogZHJhZnRHZW5lcmF0aW9uLmRyYWZ0Q2FyZHMsXG4gICAgc2V0RHJhZnRDYXJkczogZHJhZnRHZW5lcmF0aW9uLnNldERyYWZ0Q2FyZHMsXG4gICAgc2VsZWN0ZWREcmFmdEluZGV4OiBkcmFmdEdlbmVyYXRpb24uc2VsZWN0ZWREcmFmdEluZGV4LFxuICAgIHNldFNlbGVjdGVkRHJhZnRJbmRleDogZHJhZnRHZW5lcmF0aW9uLnNldFNlbGVjdGVkRHJhZnRJbmRleCxcbiAgICBpc0dlbmVyYXRpbmdGaW5hbENhcmQ6IGRyYWZ0R2VuZXJhdGlvbi5pc0dlbmVyYXRpbmdGaW5hbENhcmQsXG4gICAgc2V0SXNHZW5lcmF0aW5nRmluYWxDYXJkOiBkcmFmdEdlbmVyYXRpb24uc2V0SXNHZW5lcmF0aW5nRmluYWxDYXJkLFxuICAgIHByZXZpZXdpbmdEcmFmdEluZGV4OiBkcmFmdEdlbmVyYXRpb24ucHJldmlld2luZ0RyYWZ0SW5kZXgsXG4gICAgc2V0UHJldmlld2luZ0RyYWZ0SW5kZXg6IGRyYWZ0R2VuZXJhdGlvbi5zZXRQcmV2aWV3aW5nRHJhZnRJbmRleCxcbiAgICBkcmFmdENvbXBsZXRpb25TaG93bjogZHJhZnRHZW5lcmF0aW9uLmRyYWZ0Q29tcGxldGlvblNob3duLFxuICAgIHNldERyYWZ0Q29tcGxldGlvblNob3duOiBkcmFmdEdlbmVyYXRpb24uc2V0RHJhZnRDb21wbGV0aW9uU2hvd24sXG4gICAgZHJhZnRDb21wbGV0aW9uQ291bnQ6IGRyYWZ0R2VuZXJhdGlvbi5kcmFmdENvbXBsZXRpb25Db3VudCxcbiAgICBzZXREcmFmdENvbXBsZXRpb25Db3VudDogZHJhZnRHZW5lcmF0aW9uLnNldERyYWZ0Q29tcGxldGlvbkNvdW50LFxuICAgIFxuICAgIC8vIFByb2dyZXNzIHRyYWNraW5nXG4gICAgZ2VuZXJhdGlvblByb2dyZXNzOiBkcmFmdEdlbmVyYXRpb24uaXNHZW5lcmF0aW5nID8gZHJhZnRHZW5lcmF0aW9uLmdlbmVyYXRpb25Qcm9ncmVzcyA6IGNhcmRHZW5lcmF0aW9uLmdlbmVyYXRpb25Qcm9ncmVzcyxcbiAgICBzZXRHZW5lcmF0aW9uUHJvZ3Jlc3M6IGNhcmRHZW5lcmF0aW9uLnNldEdlbmVyYXRpb25Qcm9ncmVzcyxcbiAgICBwcm9ncmVzc1BlcmNlbnRhZ2U6IGpvYk1hbmFnZW1lbnQucHJvZ3Jlc3NQZXJjZW50YWdlLFxuICAgIHNldFByb2dyZXNzUGVyY2VudGFnZTogam9iTWFuYWdlbWVudC5zZXRQcm9ncmVzc1BlcmNlbnRhZ2UsXG4gICAgaXNDYXJkQ29tcGxldGVkOiBjYXJkR2VuZXJhdGlvbi5pc0NhcmRDb21wbGV0ZWQsXG4gICAgc2V0SXNDYXJkQ29tcGxldGVkOiBjYXJkR2VuZXJhdGlvbi5zZXRJc0NhcmRDb21wbGV0ZWQsXG4gICAgXG4gICAgLy8gVXBsb2FkIGFuZCBwZXJzb25hbGl6YXRpb25cbiAgICByZWZlcmVuY2VJbWFnZXM6IGZpbGVIYW5kbGluZy5yZWZlcmVuY2VJbWFnZXMsXG4gICAgc2V0UmVmZXJlbmNlSW1hZ2VzOiBmaWxlSGFuZGxpbmcuc2V0UmVmZXJlbmNlSW1hZ2VzLFxuICAgIHJlZmVyZW5jZUltYWdlVXJsczogZmlsZUhhbmRsaW5nLnJlZmVyZW5jZUltYWdlVXJscyxcbiAgICBzZXRSZWZlcmVuY2VJbWFnZVVybHM6IGZpbGVIYW5kbGluZy5zZXRSZWZlcmVuY2VJbWFnZVVybHMsXG4gICAgaXNVcGxvYWRpbmc6IGZpbGVIYW5kbGluZy5pc1VwbG9hZGluZyxcbiAgICBzZXRJc1VwbG9hZGluZzogZmlsZUhhbmRsaW5nLnNldElzVXBsb2FkaW5nLFxuICAgIFxuICAgIC8vIEVtYWlsIGFuZCBzZXR0aW5nc1xuICAgIHVzZXJFbWFpbCxcbiAgICBzZXRVc2VyRW1haWwsXG4gICAgaXNIYW5kd3JpdHRlbk1lc3NhZ2UsXG4gICAgc2V0SXNIYW5kd3JpdHRlbk1lc3NhZ2UsXG4gICAgaXNGcm9udEJhY2tPbmx5LFxuICAgIHNldElzRnJvbnRCYWNrT25seSxcbiAgICBzZWxlY3RlZFBhcGVyU2l6ZSxcbiAgICBzZXRTZWxlY3RlZFBhcGVyU2l6ZSxcbiAgICBcbiAgICAvLyBVSSBzdGF0ZVxuICAgIGlzVGV4dGFyZWFFeHBhbmRlZCxcbiAgICBzZXRJc1RleHRhcmVhRXhwYW5kZWQsXG4gICAgaXNNZXNzYWdlRXhwYW5kZWQsXG4gICAgc2V0SXNNZXNzYWdlRXhwYW5kZWQsXG4gICAgc2hvd1NldHRpbmdzLFxuICAgIHNldFNob3dTZXR0aW5ncyxcbiAgICBzaG93VGVtcGxhdGVHYWxsZXJ5LFxuICAgIHNldFNob3dUZW1wbGF0ZUdhbGxlcnksXG4gICAgc2hvd1ByaW50Q29uZmlybWF0aW9uLFxuICAgIHNldFNob3dQcmludENvbmZpcm1hdGlvbixcbiAgICBcbiAgICAvLyBHZW5lcmF0aW9uIHRpbWVcbiAgICBnZW5lcmF0aW9uRHVyYXRpb246IGNhcmRHZW5lcmF0aW9uLmdlbmVyYXRpb25EdXJhdGlvbixcbiAgICBzZXRHZW5lcmF0aW9uRHVyYXRpb246IGNhcmRHZW5lcmF0aW9uLnNldEdlbmVyYXRpb25EdXJhdGlvbixcbiAgICBjdXJyZW50RWxhcHNlZFRpbWU6IGpvYk1hbmFnZW1lbnQuY3VycmVudEVsYXBzZWRUaW1lLFxuICAgIFxuICAgIC8vIEhlbHBlciBmdW5jdGlvbnNcbiAgICBmb3JtYXRHZW5lcmF0aW9uVGltZSxcbiAgICBmb3JtYXRDb3VudGRvd24sXG4gICAgc2VuZFRoYW5rWW91RW1haWwsXG4gICAgY2hhdFdpdGhBSSxcbiAgICBzY3JvbGxUb0NhcmRQcmV2aWV3LFxuICAgIFxuICAgIC8vIFRpbWUgdHJhY2tpbmcgZnVuY3Rpb25zXG4gICAgc3RhcnRFbGFwc2VkVGltZVRyYWNraW5nOiBqb2JNYW5hZ2VtZW50LnN0YXJ0RWxhcHNlZFRpbWVUcmFja2luZyxcbiAgICBzdG9wRWxhcHNlZFRpbWVUcmFja2luZzogam9iTWFuYWdlbWVudC5zdG9wRWxhcHNlZFRpbWVUcmFja2luZyxcbiAgICBcbiAgICAvLyBGaWxlIGhhbmRsaW5nIGZ1bmN0aW9uc1xuICAgIGhhbmRsZUZpbGVVcGxvYWQ6IGZpbGVIYW5kbGluZy5oYW5kbGVGaWxlVXBsb2FkLFxuICAgIGhhbmRsZVJlbW92ZVJlZmVyZW5jZUltYWdlOiBmaWxlSGFuZGxpbmcuaGFuZGxlUmVtb3ZlUmVmZXJlbmNlSW1hZ2UsXG4gICAgXG4gICAgLy8gU2ltcGxpZmllZCBwaG90byByZWZlcmVuY2VzXG4gICAgcGhvdG9SZWZlcmVuY2VzOiBmaWxlSGFuZGxpbmcucGhvdG9SZWZlcmVuY2VzLFxuICAgIHNldFBob3RvUmVmZXJlbmNlczogZmlsZUhhbmRsaW5nLnNldFBob3RvUmVmZXJlbmNlcyxcbiAgICB1cGRhdGVQaG90b0Rlc2NyaXB0aW9uOiBmaWxlSGFuZGxpbmcudXBkYXRlUGhvdG9EZXNjcmlwdGlvbixcbiAgICBcbiAgICAvLyBNZXNzYWdlIGZ1bmN0aW9uc1xuICAgIGhhbmRsZUdldE1lc3NhZ2VIZWxwOiBtZXNzYWdlR2VuZXJhdGlvbi5oYW5kbGVHZXRNZXNzYWdlSGVscCxcbiAgICBhZGRNZXNzYWdlVG9IaXN0b3J5OiBtZXNzYWdlR2VuZXJhdGlvbi5hZGRNZXNzYWdlVG9IaXN0b3J5LFxuICAgIHVuZG9NZXNzYWdlOiBtZXNzYWdlR2VuZXJhdGlvbi51bmRvTWVzc2FnZSxcbiAgICByZWRvTWVzc2FnZTogbWVzc2FnZUdlbmVyYXRpb24ucmVkb01lc3NhZ2UsXG4gICAgXG4gICAgLy8gSm9iIG1hbmFnZW1lbnRcbiAgICBzYXZlSm9iVG9TdG9yYWdlOiBqb2JNYW5hZ2VtZW50LnNhdmVKb2JUb1N0b3JhZ2UsXG4gICAgcmVtb3ZlSm9iRnJvbVN0b3JhZ2U6IGpvYk1hbmFnZW1lbnQucmVtb3ZlSm9iRnJvbVN0b3JhZ2UsXG4gICAgY2hlY2tQZW5kaW5nSm9icyxcbiAgICBpc1Jlc3RvcmluZ0pvYnMsXG4gICAgXG4gICAgLy8gTWFpbiBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICAgIGhhbmRsZUdlbmVyYXRlRHJhZnRDYXJkczogZHJhZnRHZW5lcmF0aW9uLmhhbmRsZUdlbmVyYXRlRHJhZnRDYXJkcyxcbiAgICBoYW5kbGVHZW5lcmF0ZUZpbmFsRnJvbURyYWZ0OiBkcmFmdEdlbmVyYXRpb24uaGFuZGxlR2VuZXJhdGVGaW5hbEZyb21EcmFmdCxcbiAgICBcbiAgICAvLyBBZGRpdGlvbmFsIHN0YXRlIGZvciBtZXNzYWdlIHJlZmluZW1lbnRcbiAgICBtZXNzYWdlSGlzdG9yeTogbWVzc2FnZUdlbmVyYXRpb24ubWVzc2FnZUhpc3RvcnksXG4gICAgc2V0TWVzc2FnZUhpc3Rvcnk6IG1lc3NhZ2VHZW5lcmF0aW9uLnNldE1lc3NhZ2VIaXN0b3J5LFxuICAgIGN1cnJlbnRNZXNzYWdlSW5kZXg6IG1lc3NhZ2VHZW5lcmF0aW9uLmN1cnJlbnRNZXNzYWdlSW5kZXgsXG4gICAgc2V0Q3VycmVudE1lc3NhZ2VJbmRleDogbWVzc2FnZUdlbmVyYXRpb24uc2V0Q3VycmVudE1lc3NhZ2VJbmRleCxcbiAgICByZWZpbmVtZW50UHJvbXB0OiBtZXNzYWdlR2VuZXJhdGlvbi5yZWZpbmVtZW50UHJvbXB0LFxuICAgIHNldFJlZmluZW1lbnRQcm9tcHQ6IG1lc3NhZ2VHZW5lcmF0aW9uLnNldFJlZmluZW1lbnRQcm9tcHQsXG4gICAgaXNSZWZpbmluZ01lc3NhZ2U6IG1lc3NhZ2VHZW5lcmF0aW9uLmlzUmVmaW5pbmdNZXNzYWdlLFxuICAgIHNldElzUmVmaW5pbmdNZXNzYWdlOiBtZXNzYWdlR2VuZXJhdGlvbi5zZXRJc1JlZmluaW5nTWVzc2FnZSxcbiAgICBzaG93UmVmaW5lbWVudEJveDogbWVzc2FnZUdlbmVyYXRpb24uc2hvd1JlZmluZW1lbnRCb3gsXG4gICAgc2V0U2hvd1JlZmluZW1lbnRCb3g6IG1lc3NhZ2VHZW5lcmF0aW9uLnNldFNob3dSZWZpbmVtZW50Qm94LFxuICAgIFxuICAgIC8vIFRlbXBsYXRlIHN0YXRlXG4gICAgc2hvd1RlbXBsYXRlQ3VzdG9taXphdGlvbixcbiAgICBzZXRTaG93VGVtcGxhdGVDdXN0b21pemF0aW9uLFxuICAgIHNlbGVjdGVkVGVtcGxhdGUsXG4gICAgc2V0U2VsZWN0ZWRUZW1wbGF0ZSxcbiAgICB0ZW1wbGF0ZUN1c3RvbWl6YXRpb25zLFxuICAgIHNldFRlbXBsYXRlQ3VzdG9taXphdGlvbnMsXG4gICAgdGVtcGxhdGVTZWFyY2hRdWVyeSxcbiAgICBzZXRUZW1wbGF0ZVNlYXJjaFF1ZXJ5LFxuICAgIGlzU2VhcmNoaW5nVGVtcGxhdGVzLFxuICAgIHNldElzU2VhcmNoaW5nVGVtcGxhdGVzLFxuICAgIGFpRmlsdGVyZWRDYXJkcyxcbiAgICBzZXRBaUZpbHRlcmVkQ2FyZHMsXG4gICAgc2VhcmNoTW9kZSxcbiAgICBzZXRTZWFyY2hNb2RlLFxuICAgIHRleHRGaWx0ZXJlZENhcmRzLFxuICAgIHNldFRleHRGaWx0ZXJlZENhcmRzLFxuICAgIHNob3dQcm9tcHRzLFxuICAgIHNldFNob3dQcm9tcHRzLFxuICAgIFxuICAgIC8vIFByaW50IHN0YXRlXG4gICAgcHJpbnRPcHRpb24sXG4gICAgc2V0UHJpbnRPcHRpb24sXG4gICAgXG4gICAgLy8gQWRkaXRpb25hbCBkcmFmdCBtb2RlIHN0YXRlXG4gICAgaGFuZHdyaXRpbmdTYW1wbGU6IGZpbGVIYW5kbGluZy5oYW5kd3JpdGluZ1NhbXBsZSxcbiAgICBzZXRIYW5kd3JpdGluZ1NhbXBsZTogZmlsZUhhbmRsaW5nLnNldEhhbmR3cml0aW5nU2FtcGxlLFxuICAgIGhhbmR3cml0aW5nU2FtcGxlVXJsOiBmaWxlSGFuZGxpbmcuaGFuZHdyaXRpbmdTYW1wbGVVcmwsXG4gICAgc2V0SGFuZHdyaXRpbmdTYW1wbGVVcmw6IGZpbGVIYW5kbGluZy5zZXRIYW5kd3JpdGluZ1NhbXBsZVVybCxcbiAgICBcbiAgICAvLyBKb2IgdHJhY2tpbmdcbiAgICBjdXJyZW50Sm9iSWQ6IGpvYk1hbmFnZW1lbnQuY3VycmVudEpvYklkLFxuICAgIHNldEN1cnJlbnRKb2JJZDogam9iTWFuYWdlbWVudC5zZXRDdXJyZW50Sm9iSWQsXG4gICAgY291bnRkb3duLFxuICAgIHNldENvdW50ZG93bixcbiAgICBjb3VudGRvd25JbnRlcnZhbCxcbiAgICBzZXRDb3VudGRvd25JbnRlcnZhbCxcbiAgICBcbiAgICAvLyBTZWN0aW9uIGxvYWRpbmcgc3RhdGVzXG4gICAgc2VjdGlvbkxvYWRpbmdTdGF0ZXMsXG4gICAgc2V0U2VjdGlvbkxvYWRpbmdTdGF0ZXMsXG4gICAgXG4gICAgLy8gRmFzdCBwcmV2aWV3IG1vZGVcbiAgICBmYXN0UHJldmlld01vZGUsXG4gICAgc2V0RmFzdFByZXZpZXdNb2RlLFxuICAgIFxuICAgIC8vIEFkZGl0aW9uYWwgdHJhY2tpbmdcbiAgICBjdXJyZW50Q2FyZElkOiBjYXJkR2VuZXJhdGlvbi5jdXJyZW50Q2FyZElkLFxuICAgIHNldEN1cnJlbnRDYXJkSWQ6IGNhcmRHZW5lcmF0aW9uLnNldEN1cnJlbnRDYXJkSWQsXG4gICAgaXNJbml0aWFsTG9hZENvbXBsZXRlLFxuICAgIHNldElzSW5pdGlhbExvYWRDb21wbGV0ZSxcbiAgICBcbiAgICAvLyBFbGFwc2VkIHRpbWUgdHJhY2tpbmdcbiAgICBnZW5lcmF0aW9uU3RhcnRUaW1lOiBqb2JNYW5hZ2VtZW50LmdlbmVyYXRpb25TdGFydFRpbWUsXG4gICAgXG4gICAgLy8gQ29uc3RhbnRzIGZvciBVSVxuICAgIGNhcmRUb25lcyxcbiAgICBhcnRpc3RpY1N0eWxlcyxcbiAgICBwYXBlclNpemVzLFxuICAgIFxuICAgIC8vIFdlYlNvY2tldCBmdW5jdGlvbnMgYW5kIHN0YXRlXG4gICAgaXNTb2NrZXRDb25uZWN0ZWQ6IHdlYlNvY2tldC5pc1NvY2tldENvbm5lY3RlZCxcbiAgICBjb25uZWN0V2ViU29ja2V0OiB3ZWJTb2NrZXQuY29ubmVjdFdlYlNvY2tldCxcbiAgICBkaXNjb25uZWN0V2ViU29ja2V0OiB3ZWJTb2NrZXQuZGlzY29ubmVjdFdlYlNvY2tldCxcbiAgICBzdWJzY3JpYmVUb0pvYjogd2ViU29ja2V0LnN1YnNjcmliZVRvSm9iLFxuICAgIHVuc3Vic2NyaWJlRnJvbUpvYjogd2ViU29ja2V0LnVuc3Vic2NyaWJlRnJvbUpvYixcbiAgICB1bnN1YnNjcmliZUZyb21BbGxKb2JzOiB3ZWJTb2NrZXQudW5zdWJzY3JpYmVGcm9tQWxsSm9icyxcbiAgICBoYW5kbGVKb2JVcGRhdGUsXG4gICAgaGFuZGxlRmluYWxDYXJkQ29tcGxldGlvbjogY2FyZEdlbmVyYXRpb24uaGFuZGxlRmluYWxDYXJkQ29tcGxldGlvbixcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUNhbGxiYWNrIiwidXNlUmVmIiwidG9hc3QiLCJ1c2VXZWJTb2NrZXQiLCJ1c2VKb2JNYW5hZ2VtZW50IiwidXNlTWVzc2FnZUdlbmVyYXRpb24iLCJ1c2VGaWxlSGFuZGxpbmciLCJ1c2VEcmFmdEdlbmVyYXRpb24iLCJ1c2VDYXJkR2VuZXJhdGlvbiIsImNhcmRUb25lcyIsImFydGlzdGljU3R5bGVzIiwicGFwZXJTaXplcyIsImZvcm1hdEdlbmVyYXRpb25UaW1lIiwiZm9ybWF0Q291bnRkb3duIiwic2VuZFRoYW5rWW91RW1haWwiLCJjaGF0V2l0aEFJIiwic2Nyb2xsVG9DYXJkUHJldmlldyIsInN0b3JhZ2UiLCJ1c2VDYXJkU3R1ZGlvIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwidG9GaWVsZCIsInNldFRvRmllbGQiLCJmcm9tRmllbGQiLCJzZXRGcm9tRmllbGQiLCJyZWxhdGlvbnNoaXBGaWVsZCIsInNldFJlbGF0aW9uc2hpcEZpZWxkIiwicGVyc29uYWxUcmFpdHMiLCJzZXRQZXJzb25hbFRyYWl0cyIsInNlbGVjdGVkVHlwZSIsInNldFNlbGVjdGVkVHlwZSIsImN1c3RvbUNhcmRUeXBlIiwic2V0Q3VzdG9tQ2FyZFR5cGUiLCJzZWxlY3RlZFRvbmUiLCJzZXRTZWxlY3RlZFRvbmUiLCJzaG93QWR2YW5jZWQiLCJzZXRTaG93QWR2YW5jZWQiLCJzZWxlY3RlZEFydGlzdGljU3R5bGUiLCJzZXRTZWxlY3RlZEFydGlzdGljU3R5bGUiLCJjdXN0b21TdHlsZURlc2NyaXB0aW9uIiwic2V0Q3VzdG9tU3R5bGVEZXNjcmlwdGlvbiIsInNlbGVjdGVkSW1hZ2VNb2RlbCIsInNldFNlbGVjdGVkSW1hZ2VNb2RlbCIsInNlbGVjdGVkRHJhZnRNb2RlbCIsInNldFNlbGVjdGVkRHJhZnRNb2RlbCIsImZhc3RQcmV2aWV3TW9kZSIsInNldEZhc3RQcmV2aWV3TW9kZSIsInVzZXJFbWFpbCIsInNldFVzZXJFbWFpbCIsIm51bWJlck9mQ2FyZHMiLCJzZXROdW1iZXJPZkNhcmRzIiwiaXNIYW5kd3JpdHRlbk1lc3NhZ2UiLCJzZXRJc0hhbmR3cml0dGVuTWVzc2FnZSIsImlzRnJvbnRCYWNrT25seSIsInNldElzRnJvbnRCYWNrT25seSIsInNlbGVjdGVkUGFwZXJTaXplIiwic2V0U2VsZWN0ZWRQYXBlclNpemUiLCJpc1RleHRhcmVhRXhwYW5kZWQiLCJzZXRJc1RleHRhcmVhRXhwYW5kZWQiLCJpc01lc3NhZ2VFeHBhbmRlZCIsInNldElzTWVzc2FnZUV4cGFuZGVkIiwic2hvd1NldHRpbmdzIiwic2V0U2hvd1NldHRpbmdzIiwic2hvd1RlbXBsYXRlR2FsbGVyeSIsInNldFNob3dUZW1wbGF0ZUdhbGxlcnkiLCJzaG93UHJpbnRDb25maXJtYXRpb24iLCJzZXRTaG93UHJpbnRDb25maXJtYXRpb24iLCJzaG93VGVtcGxhdGVDdXN0b21pemF0aW9uIiwic2V0U2hvd1RlbXBsYXRlQ3VzdG9taXphdGlvbiIsImlzUmVzdG9yaW5nSm9icyIsInNldElzUmVzdG9yaW5nSm9icyIsInNlbGVjdGVkVGVtcGxhdGUiLCJzZXRTZWxlY3RlZFRlbXBsYXRlIiwiaXNJbml0aWFsTG9hZENvbXBsZXRlIiwic2V0SXNJbml0aWFsTG9hZENvbXBsZXRlIiwidGVtcGxhdGVTZWFyY2hRdWVyeSIsInNldFRlbXBsYXRlU2VhcmNoUXVlcnkiLCJpc1NlYXJjaGluZ1RlbXBsYXRlcyIsInNldElzU2VhcmNoaW5nVGVtcGxhdGVzIiwiYWlGaWx0ZXJlZENhcmRzIiwic2V0QWlGaWx0ZXJlZENhcmRzIiwic2VhcmNoTW9kZSIsInNldFNlYXJjaE1vZGUiLCJ0ZXh0RmlsdGVyZWRDYXJkcyIsInNldFRleHRGaWx0ZXJlZENhcmRzIiwic2hvd1Byb21wdHMiLCJzZXRTaG93UHJvbXB0cyIsInByaW50T3B0aW9uIiwic2V0UHJpbnRPcHRpb24iLCJ0ZW1wbGF0ZUN1c3RvbWl6YXRpb25zIiwic2V0VGVtcGxhdGVDdXN0b21pemF0aW9ucyIsInByb21wdENoYW5nZXMiLCJtZXNzYWdlQ2hhbmdlcyIsInVzZVJlZmVyZW5jZUltYWdlIiwicmVmZXJlbmNlSW1hZ2VGaWxlIiwicmVmZXJlbmNlSW1hZ2VVcmxzIiwicmVmZXJlbmNlSW1hZ2VUcmFuc2Zvcm1hdGlvbiIsInNlY3Rpb25Mb2FkaW5nU3RhdGVzIiwic2V0U2VjdGlvbkxvYWRpbmdTdGF0ZXMiLCJmcm9udENvdmVyIiwiYmFja0NvdmVyIiwibGVmdEludGVyaW9yIiwicmlnaHRJbnRlcmlvciIsImNvdW50ZG93biIsInNldENvdW50ZG93biIsImNvdW50ZG93bkludGVydmFsIiwic2V0Q291bnRkb3duSW50ZXJ2YWwiLCJ3ZWJTb2NrZXQiLCJqb2JNYW5hZ2VtZW50IiwiZmlsZUhhbmRsaW5nIiwibWVzc2FnZUdlbmVyYXRpb24iLCJwaG90b1JlZmVyZW5jZXMiLCJkcmFmdEdlbmVyYXRpb25Qcm9wcyIsImZpbmFsQ2FyZE1lc3NhZ2UiLCJzYXZlSm9iVG9TdG9yYWdlIiwic3Vic2NyaWJlVG9Kb2IiLCJ1bnN1YnNjcmliZUZyb21BbGxKb2JzIiwic3RhcnRFbGFwc2VkVGltZVRyYWNraW5nIiwic3RvcEVsYXBzZWRUaW1lVHJhY2tpbmciLCJzZXRQcm9ncmVzc1BlcmNlbnRhZ2UiLCJkcmFmdEdlbmVyYXRpb24iLCJjYXJkR2VuZXJhdGlvblByb3BzIiwicmVtb3ZlSm9iRnJvbVN0b3JhZ2UiLCJzZXRDdXJyZW50Sm9iSWQiLCJzZXRJc0RyYWZ0TW9kZSIsInNldERyYWZ0Q2FyZHMiLCJzZXRTZWxlY3RlZERyYWZ0SW5kZXgiLCJzZXRJc0dlbmVyYXRpbmdGaW5hbENhcmQiLCJzZXRQcmV2aWV3aW5nRHJhZnRJbmRleCIsInNldERyYWZ0Q29tcGxldGlvblNob3duIiwic2V0RHJhZnRDb21wbGV0aW9uQ291bnQiLCJjYXJkR2VuZXJhdGlvbiIsImhhbmRsZUpvYlVwZGF0ZSIsImRhdGEiLCJqb2JfaWQiLCJzdGF0dXMiLCJwcm9ncmVzcyIsImNhcmREYXRhIiwiZXJyb3IiLCJjb21wbGV0ZWRBdCIsImNvbnNvbGUiLCJsb2ciLCJpc0RyYWZ0Sm9iIiwic3RhcnRzV2l0aCIsImRyYWZ0SW5kZXgiLCJwYXJzZUludCIsInNwbGl0IiwiaXNJbkRyYWZ0TW9kZSIsImlzRHJhZnRNb2RlIiwiaXNHZW5lcmF0aW5nIiwic2V0SXNHZW5lcmF0aW5nIiwiaW5jbHVkZXMiLCJzZXRHZW5lcmF0aW9uUHJvZ3Jlc3MiLCJub3JtYWxpemVkQ2FyZERhdGEiLCJsZWZ0UGFnZSIsImxlZnRfaW50ZXJpb3IiLCJsZWZ0X3BhZ2UiLCJyaWdodFBhZ2UiLCJyaWdodF9pbnRlcmlvciIsInJpZ2h0X3BhZ2UiLCJmcm9udF9jb3ZlciIsImZyb250IiwiYmFja19jb3ZlciIsImJhY2siLCJoYXNSZXF1aXJlZEZpZWxkcyIsIndhcm4iLCJkcmFmdENhcmRzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImxlbmd0aCIsInN0eWxlSW5mbyIsInVuZGVmaW5lZCIsInByZWRlZmluZWRTdHlsZXMiLCJzdHlsZUxhYmVscyIsInN0eWxlTmFtZSIsInN0eWxlTGFiZWwiLCJkcmFmdENhcmQiLCJpZCIsIkRhdGUiLCJub3ciLCJjcmVhdGVkQXQiLCJnZW5lcmF0ZWRQcm9tcHRzIiwicHJldiIsInVwZGF0ZWQiLCJwdXNoIiwidXBkYXRlZERyYWZ0cyIsImNvbXBsZXRlZENvdW50IiwicHJvZ3Jlc3NNc2ciLCJpc0dlbmVyYXRpbmdGaW5hbENhcmQiLCJjbGVhclJlY292ZXJ5Iiwic3VjY2VzcyIsInVuc3Vic2NyaWJlRnJvbUpvYiIsImhhc0NhcmREYXRhIiwiY2FyZERhdGFLZXlzIiwiT2JqZWN0Iiwia2V5cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJtYXBwZWRDYXJkRGF0YSIsImhhc0FsbFJlcXVpcmVkRmllbGRzIiwiaGFuZGxlRmluYWxDYXJkQ29tcGxldGlvbiIsImN1cnJlbnRKb2JSZWYiLCJjdXJyZW50IiwiY3VycmVudEpvYklkIiwic2V0Sm9iVXBkYXRlSGFuZGxlciIsInN0YWxlSm9iTG9nZ2VkUmVmIiwiaXNTb2NrZXRDb25uZWN0ZWQiLCJnZW5lcmF0aW9uU3RhcnRUaW1lIiwiam9iQWdlIiwiam9iSWQiLCJyZWNvbm5lY3RUaW1lciIsInNldFRpbWVvdXQiLCJjb25uZWN0V2ViU29ja2V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tJbnRlcnZhbCIsInNldEludGVydmFsIiwidGltZVNpbmNlTGFzdFVwZGF0ZSIsImxhc3RKb2JVcGRhdGVSZWYiLCJwcm9ncmVzc1BlcmNlbnRhZ2UiLCJNYXRoIiwicm91bmQiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJqb2JTdGF0dXMiLCJqc29uIiwiY2xlYXJJbnRlcnZhbCIsImNoZWNrUGVuZGluZ0pvYnMiLCJyZWNvdmVyeSIsImdldFJlY292ZXJ5IiwiaXNSZWNvdmVyeURyYWZ0IiwiaXNEcmFmdCIsImhhc0NvbXBsZXRlZERyYWZ0cyIsImNhcmQiLCJnZW5lcmF0ZWRDYXJkIiwiaXNDYXJkQ29tcGxldGVkIiwiZm9ybURhdGEiLCJzZWxlY3RlZERyYWZ0SW5kZXgiLCJzZXRGaW5hbENhcmRNZXNzYWdlIiwiaXNHZW5lcmF0aW5nTWVzc2FnZSIsInNldElzR2VuZXJhdGluZ01lc3NhZ2UiLCJzZXRHZW5lcmF0ZWRDYXJkIiwiZ2VuZXJhdGVkQ2FyZHMiLCJzZXRHZW5lcmF0ZWRDYXJkcyIsInNlbGVjdGVkQ2FyZEluZGV4Iiwic2V0U2VsZWN0ZWRDYXJkSW5kZXgiLCJwcmV2aWV3aW5nRHJhZnRJbmRleCIsImRyYWZ0Q29tcGxldGlvblNob3duIiwiZHJhZnRDb21wbGV0aW9uQ291bnQiLCJnZW5lcmF0aW9uUHJvZ3Jlc3MiLCJzZXRJc0NhcmRDb21wbGV0ZWQiLCJyZWZlcmVuY2VJbWFnZXMiLCJzZXRSZWZlcmVuY2VJbWFnZXMiLCJzZXRSZWZlcmVuY2VJbWFnZVVybHMiLCJpc1VwbG9hZGluZyIsInNldElzVXBsb2FkaW5nIiwiZ2VuZXJhdGlvbkR1cmF0aW9uIiwic2V0R2VuZXJhdGlvbkR1cmF0aW9uIiwiY3VycmVudEVsYXBzZWRUaW1lIiwiaGFuZGxlRmlsZVVwbG9hZCIsImhhbmRsZVJlbW92ZVJlZmVyZW5jZUltYWdlIiwic2V0UGhvdG9SZWZlcmVuY2VzIiwidXBkYXRlUGhvdG9EZXNjcmlwdGlvbiIsImhhbmRsZUdldE1lc3NhZ2VIZWxwIiwiYWRkTWVzc2FnZVRvSGlzdG9yeSIsInVuZG9NZXNzYWdlIiwicmVkb01lc3NhZ2UiLCJoYW5kbGVHZW5lcmF0ZURyYWZ0Q2FyZHMiLCJoYW5kbGVHZW5lcmF0ZUZpbmFsRnJvbURyYWZ0IiwibWVzc2FnZUhpc3RvcnkiLCJzZXRNZXNzYWdlSGlzdG9yeSIsImN1cnJlbnRNZXNzYWdlSW5kZXgiLCJzZXRDdXJyZW50TWVzc2FnZUluZGV4IiwicmVmaW5lbWVudFByb21wdCIsInNldFJlZmluZW1lbnRQcm9tcHQiLCJpc1JlZmluaW5nTWVzc2FnZSIsInNldElzUmVmaW5pbmdNZXNzYWdlIiwic2hvd1JlZmluZW1lbnRCb3giLCJzZXRTaG93UmVmaW5lbWVudEJveCIsImhhbmR3cml0aW5nU2FtcGxlIiwic2V0SGFuZHdyaXRpbmdTYW1wbGUiLCJoYW5kd3JpdGluZ1NhbXBsZVVybCIsInNldEhhbmR3cml0aW5nU2FtcGxlVXJsIiwiY3VycmVudENhcmRJZCIsInNldEN1cnJlbnRDYXJkSWQiLCJkaXNjb25uZWN0V2ViU29ja2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useCardStudioRefactored.ts\n"));

/***/ })

});