"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/wizard/page",{

/***/ "(app-pages-browser)/./hooks/useCardStudio.ts":
/*!********************************!*\
  !*** ./hooks/useCardStudio.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCardStudio: function() { return /* binding */ useCardStudio; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* __next_internal_client_entry_do_not_use__ useCardStudio auto */ \n\n\n// Configuration for the backend API endpoint\nconst BACKEND_API_BASE_URL = \"https://vibecarding.com\" || 0;\n// Helper function to format countdown as MM:SS\nconst formatCountdown = (seconds)=>{\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return \"\".concat(minutes, \":\").concat(remainingSeconds.toString().padStart(2, \"0\"));\n};\n// Helper function to format generation time\nconst formatGenerationTime = (durationSeconds)=>{\n    const minutes = Math.floor(durationSeconds / 60);\n    const seconds = Math.floor(durationSeconds % 60);\n    if (minutes > 0) {\n        return \"\".concat(minutes, \"m \").concat(seconds, \"s\");\n    }\n    return \"\".concat(seconds, \"s\");\n};\n// Email Helper Function\nasync function sendThankYouEmail(toEmail, cardType, cardUrl) {\n    if (!toEmail.trim()) return;\n    try {\n        // Create HTML email body\n        const htmlBody = '\\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; color: #333;\">\\n        <div style=\"text-align: center; margin-bottom: 30px;\">\\n          <h1 style=\"color: #2563eb; margin-bottom: 10px;\">\\uD83C\\uDF89 Your Card is Ready!</h1>\\n        </div>\\n        \\n        <p style=\"font-size: 16px; line-height: 1.6; margin-bottom: 20px;\">Hi there!</p>\\n        \\n        <p style=\"font-size: 16px; line-height: 1.6; margin-bottom: 20px;\">\\n          Thank you for using VibeCarding to create your beautiful <strong>'.concat(cardType, '</strong> card!\\n        </p>\\n        \\n        <p style=\"font-size: 16px; line-height: 1.6; margin-bottom: 20px;\">\\n          We hope you love how it turned out. Your card has been generated and is ready for printing or sharing.\\n        </p>\\n        \\n        <div style=\"text-align: center; margin: 30px 0;\">\\n          <a href=\"').concat(cardUrl, '\" style=\"background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold; display: inline-block;\">\\n            View Your Card\\n          </a>\\n        </div>\\n        \\n        <p style=\"font-size: 16px; line-height: 1.6; margin-bottom: 20px;\">\\n          If you have any questions or feedback, feel free to reach out to us.\\n        </p>\\n        \\n        <p style=\"font-size: 16px; line-height: 1.6; margin-bottom: 20px;\">\\n          Happy card making!\\n        </p>\\n        \\n        <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280;\">\\n          <p style=\"margin-bottom: 5px;\"><strong>Best regards,</strong></p>\\n          <p style=\"margin-bottom: 5px;\">The VibeCarding Team</p>\\n          <p style=\"margin: 0;\">\\n            <a href=\"mailto:vibecarding@ast.engineer\" style=\"color: #2563eb; text-decoration: none;\">vibecarding@ast.engineer</a>\\n          </p>\\n        </div>\\n      </div>\\n    ');\n        // Plain text fallback\n        const textBody = \"Hi there!\\n\\nThank you for using VibeCarding to create your beautiful \".concat(cardType, \" card!\\n\\nWe hope you love how it turned out. Your card has been generated and is ready for printing or sharing.\\n\\nView your card: \").concat(cardUrl, \"\\n\\nIf you have any questions or feedback, feel free to reach out to us.\\n\\nHappy card making!\\n\\nBest regards,\\nThe VibeCarding Team\\nvibecarding@ast.engineer\");\n        // Send to user\n        const userResponse = await fetch(\"\".concat(BACKEND_API_BASE_URL, \"/send_email_nodejs_style\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n            },\n            body: JSON.stringify({\n                to: toEmail,\n                from: \"vibecarding@ast.engineer\",\n                subject: \"Your \".concat(cardType, \" card is ready!\"),\n                body: htmlBody,\n                text: textBody,\n                html: htmlBody\n            })\n        });\n        // Send copy to jordan@ast.engineer\n        const adminResponse = await fetch(\"\".concat(BACKEND_API_BASE_URL, \"/send_email_nodejs_style\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                to: \"jordan@ast.engineer\",\n                from: \"vibecarding@ast.engineer\",\n                subject: \"Card Created - \".concat(cardType, \" for \").concat(toEmail),\n                body: '<div style=\"font-family: Arial, sans-serif; padding: 20px;\">\\n          <h3 style=\"color: #2563eb;\">New Card Created on VibeCarding</h3>\\n          <p><strong>User:</strong> '.concat(toEmail, \"</p>\\n          <p><strong>Card Type:</strong> \").concat(cardType, '</p>\\n          <p><strong>Card URL:</strong> <a href=\"').concat(cardUrl, '\">').concat(cardUrl, '</a></p>\\n          <p style=\"margin-top: 20px; color: #6b7280; font-size: 14px;\">\\n            This is an automated notification of card creation activity.\\n          </p>\\n        </div>'),\n                text: \"New card created on VibeCarding:\\n\\nUser: \".concat(toEmail, \"\\nCard Type: \").concat(cardType, \"\\nCard URL: \").concat(cardUrl, \"\\n\\nThis is an automated notification of card creation activity.\")\n            })\n        });\n        if (userResponse.ok) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"✉️ Thank you email sent!\");\n        }\n    } catch (error) {\n        console.error(\"Failed to send thank you email:\", error);\n    // Don't show error toast - this is a nice-to-have feature\n    }\n}\n// Chat Helper Function\nasync function chatWithAI(userMessage) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const { systemPrompt = null, model = \"gemini-2.5-pro\", includeThoughts = false, jsonSchema = null, attachments = [] // Default to empty array\n     } = options;\n    try {\n        const response = await fetch(\"/internal/call_mcp_tool\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                tool_name: \"ai_chat\",\n                arguments: {\n                    messages: userMessage,\n                    system_prompt: systemPrompt,\n                    model: model,\n                    include_thoughts: includeThoughts,\n                    json_schema: jsonSchema,\n                    ...attachments.length > 0 && {\n                        attachments\n                    } // Only include if there are attachments\n                }\n            })\n        });\n        if (!response.ok) throw new Error(\"HTTP \".concat(response.status));\n        const data = await response.json();\n        if (data.error && data.error !== \"None\" && data.error !== null) {\n            throw new Error(data.error);\n        }\n        let result;\n        if (typeof data.result === \"string\") {\n            try {\n                result = JSON.parse(data.result);\n            } catch (e) {\n                result = {\n                    status: \"error\",\n                    message: \"Invalid JSON response\"\n                };\n            }\n        } else {\n            result = data.result;\n        }\n        if (result.status === \"error\") {\n            throw new Error(result.message);\n        }\n        return result.response;\n    } catch (error) {\n        console.error(\"AI chat failed:\", error);\n        throw error;\n    }\n}\n// Card tone/style options\nconst cardTones = [\n    {\n        id: \"funny\",\n        label: \"\\uD83D\\uDE04 Funny\",\n        description: \"Humorous and lighthearted\"\n    },\n    {\n        id: \"genz-humor\",\n        label: \"\\uD83D\\uDC80 GenZ Humor\",\n        description: \"Internet memes, chaotic energy, and unhinged vibes\"\n    },\n    {\n        id: \"romantic\",\n        label: \"\\uD83D\\uDC95 Romantic\",\n        description: \"Sweet and loving\"\n    },\n    {\n        id: \"professional\",\n        label: \"\\uD83D\\uDC54 Professional\",\n        description: \"Formal and business-appropriate\"\n    },\n    {\n        id: \"heartfelt\",\n        label: \"❤️ Heartfelt\",\n        description: \"Sincere and emotional\"\n    },\n    {\n        id: \"playful\",\n        label: \"\\uD83C\\uDF89 Playful\",\n        description: \"Fun and energetic\"\n    },\n    {\n        id: \"elegant\",\n        label: \"✨ Elegant\",\n        description: \"Sophisticated and refined\"\n    },\n    {\n        id: \"casual\",\n        label: \"\\uD83D\\uDE0A Casual\",\n        description: \"Relaxed and friendly\"\n    },\n    {\n        id: \"inspirational\",\n        label: \"\\uD83C\\uDF1F Inspirational\",\n        description: \"Motivating and uplifting\"\n    },\n    {\n        id: \"quirky\",\n        label: \"\\uD83E\\uDD2A Quirky\",\n        description: \"Unique and unconventional\"\n    },\n    {\n        id: \"traditional\",\n        label: \"\\uD83C\\uDFAD Traditional\",\n        description: \"Classic and timeless\"\n    }\n];\n// Curated artistic styles for beautiful cards\nconst artisticStyles = [\n    {\n        id: \"ai-smart-style\",\n        label: \"✨ Smart Style\",\n        description: \"Let our experts choose the perfect style for your card\",\n        promptModifier: \"\"\n    },\n    {\n        id: \"custom\",\n        label: \"✨ Custom Style\",\n        description: \"Define your own unique artistic style\",\n        promptModifier: \"\"\n    },\n    {\n        id: \"watercolor\",\n        label: \"\\uD83C\\uDFA8 Watercolor\",\n        description: \"Soft, flowing paint effects (our personal favorite)\",\n        promptModifier: \"in watercolor painting style, with soft flowing colors, artistic brush strokes, paper texture, and organic paint bleeds\"\n    },\n    {\n        id: \"minimalist\",\n        label: \"✨ Minimalist\",\n        description: \"Clean, simple, elegant design\",\n        promptModifier: \"in minimalist style with clean lines, simple shapes, plenty of white space, sophisticated typography, and elegant simplicity\"\n    },\n    {\n        id: \"botanical\",\n        label: \"\\uD83C\\uDF3F Botanical\",\n        description: \"Beautiful flowers and nature elements\",\n        promptModifier: \"in botanical illustration style with detailed flowers, leaves, and natural elements, soft organic shapes, elegant floral arrangements, and nature-inspired designs perfect for greeting cards\"\n    },\n    {\n        id: \"comic-book\",\n        label: \"\\uD83D\\uDCA5 Comic Book\",\n        description: \"Bold graphic novel style\",\n        promptModifier: \"in comic book art style with bold outlines, vibrant colors, dynamic poses, speech bubble aesthetics, halftone patterns, and superhero comic book visual elements that create an exciting and energetic feel\"\n    },\n    {\n        id: \"dreamy-fantasy\",\n        label: \"\\uD83C\\uDF38 Dreamy Fantasy\",\n        description: \"Enchanting anime-inspired art\",\n        promptModifier: \"in dreamy fantasy anime style, with soft pastels, magical atmosphere, detailed nature elements, whimsical characters, and enchanting fairy-tale qualities\"\n    },\n    {\n        id: \"art-deco\",\n        label: \"✨ Art Deco\",\n        description: \"Elegant 1920s geometric luxury\",\n        promptModifier: \"in vintage Art Deco style with geometric patterns, gold accents, elegant typography, luxurious details, and 1920s glamour\"\n    },\n    {\n        id: \"vintage-illustration\",\n        label: \"\\uD83D\\uDCDA Vintage Illustration\",\n        description: \"Classic storybook charm\",\n        promptModifier: \"in vintage illustration style like classic children's books, with warm nostalgic colors, charming characters, whimsical details, and timeless fairy-tale aesthetics\"\n    },\n    {\n        id: \"modern-geometric\",\n        label: \"\\uD83D\\uDD37 Modern Geometric\",\n        description: \"Clean contemporary shapes\",\n        promptModifier: \"in modern geometric style with clean shapes, contemporary design elements, balanced compositions, and sophisticated color palettes perfect for modern greeting cards\"\n    },\n    {\n        id: \"soft-pastel\",\n        label: \"\\uD83C\\uDF38 Soft Pastel\",\n        description: \"Gentle, soothing colors\",\n        promptModifier: \"in soft pastel style with gentle colors, dreamy atmosphere, delicate textures, and calming visual elements that create a peaceful and heartwarming feeling\"\n    },\n    {\n        id: \"retro-vintage\",\n        label: \"\\uD83D\\uDCFB Retro Vintage\",\n        description: \"Classic 1950s-60s nostalgia\",\n        promptModifier: \"in retro vintage style with 1950s-60s aesthetics, classic typography, warm nostalgic colors, and mid-century design elements\"\n    }\n];\n// Paper size options\nconst paperSizes = [\n    {\n        id: \"standard\",\n        label: \"5\\xd77 Card (Standard)\",\n        description: \"Standard 5\\xd77 greeting card (10\\xd77 print layout)\",\n        aspectRatio: \"9:16\",\n        dimensions: \"1024x1536\",\n        printWidth: \"10in\",\n        printHeight: \"7in\"\n    },\n    {\n        id: \"compact\",\n        label: \"4\\xd76 Card (Compact)\",\n        description: \"Compact 4\\xd76 greeting card (8\\xd76 print layout)\",\n        aspectRatio: \"2:3\",\n        dimensions: \"768x1152\",\n        printWidth: \"8in\",\n        printHeight: \"6in\"\n    },\n    {\n        id: \"a6\",\n        label: \"A6 Card (4\\xd76)\",\n        description: \"A6 paper size (8.3\\xd75.8 print layout)\",\n        aspectRatio: \"2:3\",\n        dimensions: \"768x1152\",\n        printWidth: \"8.3in\",\n        printHeight: \"5.8in\"\n    }\n];\nfunction useCardStudio() {\n    // All your existing state from page.tsx\n    const [prompt, setPrompt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [finalCardMessage, setFinalCardMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [toField, setToField] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [fromField, setFromField] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedType, setSelectedType] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"birthday\");\n    const [customCardType, setCustomCardType] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedTone, setSelectedTone] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"funny\");\n    const [isGenerating, setIsGenerating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [generatedCard, setGeneratedCard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Multiple cards state\n    const [numberOfCards, setNumberOfCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const [generatedCards, setGeneratedCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedCardIndex, setSelectedCardIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // Writing assistant state\n    const [isGeneratingMessage, setIsGeneratingMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Advanced options state\n    const [showAdvanced, setShowAdvanced] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [selectedArtisticStyle, setSelectedArtisticStyle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"watercolor\");\n    const [customStyleDescription, setCustomStyleDescription] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [selectedImageModel, setSelectedImageModel] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"gpt-image-1\");\n    // Draft mode specific model selection\n    const [selectedDraftModel, setSelectedDraftModel] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"gpt-image-1\");\n    // Progress tracking state\n    const [generationProgress, setGenerationProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [countdown, setCountdown] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [countdownInterval, setCountdownInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isCardCompleted, setIsCardCompleted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Job tracking state\n    const [currentJobId, setCurrentJobId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Fast preview mode state\n    const [fastPreviewMode, setFastPreviewMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    // Draft mode state - generate 5 low-quality cards for selection\n    const [isDraftMode, setIsDraftMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [draftCards, setDraftCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]); // Cards in completion order (left to right)\n    const [draftIndexMapping, setDraftIndexMapping] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]); // Maps display position to original draft index\n    const [selectedDraftIndex, setSelectedDraftIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1); // Display position index\n    const [isGeneratingFinalCard, setIsGeneratingFinalCard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [previewingDraftIndex, setPreviewingDraftIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1); // Display position index\n    const [draftCompletionShown, setDraftCompletionShown] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [draftCompletionCount, setDraftCompletionCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0); // Track actual completions\n    // Upload state\n    const [handwritingSample, setHandwritingSample] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [handwritingSampleUrl, setHandwritingSampleUrl] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [referenceImages, setReferenceImages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [referenceImageUrls, setReferenceImageUrls] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [imageTransformation, setImageTransformation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [isUploading, setIsUploading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Email state\n    const [userEmail, setUserEmail] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    // Card ID for URL generation (generated once per card creation)\n    const [currentCardId, setCurrentCardId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // New options for handwritten messages and single-sided printing\n    const [isHandwrittenMessage, setIsHandwrittenMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isFrontBackOnly, setIsFrontBackOnly] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Paper size options\n    const [selectedPaperSize, setSelectedPaperSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"standard\");\n    // Loading states for each card section\n    const [sectionLoadingStates, setSectionLoadingStates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        frontCover: \"idle\",\n        backCover: \"idle\",\n        leftInterior: \"idle\",\n        rightInterior: \"idle\"\n    });\n    // Clean progress tracking\n    const [progressPercentage, setProgressPercentage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // Track if initial load is complete\n    const [isInitialLoadComplete, setIsInitialLoadComplete] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Textarea expand state\n    const [isTextareaExpanded, setIsTextareaExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isMessageExpanded, setIsMessageExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Message version control and refinement\n    const [messageHistory, setMessageHistory] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [currentMessageIndex, setCurrentMessageIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1);\n    const [refinementPrompt, setRefinementPrompt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [isRefiningMessage, setIsRefiningMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [showRefinementBox, setShowRefinementBox] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Settings menu state\n    const [showSettings, setShowSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Template selection state\n    const [showTemplateGallery, setShowTemplateGallery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [templateSearchQuery, setTemplateSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [isSearchingTemplates, setIsSearchingTemplates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [aiFilteredCards, setAiFilteredCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [searchMode, setSearchMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"text\");\n    const [textFilteredCards, setTextFilteredCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [showPrompts, setShowPrompts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Print options state\n    const [printOption, setPrintOption] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"physical\");\n    // Print confirmation dialog state\n    const [showPrintConfirmation, setShowPrintConfirmation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Generation time tracking\n    const [generationDuration, setGenerationDuration] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generationStartTime, setGenerationStartTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [currentElapsedTime, setCurrentElapsedTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [elapsedTimeInterval, setElapsedTimeInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Template customization state\n    const [showTemplateCustomization, setShowTemplateCustomization] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [selectedTemplate, setSelectedTemplate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [templateCustomizations, setTemplateCustomizations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        promptChanges: \"\",\n        messageChanges: \"\",\n        useReferenceImage: false,\n        referenceImageFile: null,\n        referenceImageUrls: [],\n        referenceImageTransformation: \"\"\n    });\n    // Job management functions\n    const saveJobToStorage = (jobId, jobData)=>{\n        try {\n            localStorage.setItem(\"cardJob_\".concat(jobId), JSON.stringify({\n                ...jobData,\n                id: jobId,\n                status: \"processing\",\n                createdAt: Date.now()\n            }));\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            if (!pendingJobs.includes(jobId)) {\n                pendingJobs.push(jobId);\n                localStorage.setItem(\"pendingCardJobs\", JSON.stringify(pendingJobs));\n            }\n        } catch (error) {\n            console.error(\"Failed to save job to localStorage:\", error);\n        }\n    };\n    // Helper function to scroll to card preview\n    const scrollToCardPreview = ()=>{\n        setTimeout(()=>{\n            const cardPreviewElement = document.querySelector(\"[data-card-preview]\");\n            if (cardPreviewElement) {\n                cardPreviewElement.scrollIntoView({\n                    behavior: \"smooth\",\n                    block: \"start\"\n                });\n            }\n        }, 500);\n    };\n    // Start elapsed time tracking\n    const startElapsedTimeTracking = (startTime, estimatedTotalSeconds)=>{\n        const start = startTime || Date.now();\n        setGenerationStartTime(start);\n        localStorage.setItem(\"generation-start-time\", start.toString());\n        if (elapsedTimeInterval) {\n            clearInterval(elapsedTimeInterval);\n        }\n        const interval = setInterval(()=>{\n            const elapsed = (Date.now() - start) / 1000;\n            setCurrentElapsedTime(elapsed);\n            const estimatedTotal = estimatedTotalSeconds || (isDraftMode ? 45 : 150);\n            const percentage = Math.min(elapsed / estimatedTotal * 100, 95);\n            setProgressPercentage(percentage);\n        }, 1000);\n        setElapsedTimeInterval(interval);\n    };\n    // Stop elapsed time tracking\n    const stopElapsedTimeTracking = ()=>{\n        if (elapsedTimeInterval) {\n            clearInterval(elapsedTimeInterval);\n            setElapsedTimeInterval(null);\n        }\n        localStorage.removeItem(\"generation-start-time\");\n    };\n    // File upload handler\n    const handleFileUpload = async (file, type)=>{\n        if (!file.type.startsWith(\"image/\")) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please upload an image file\");\n            return;\n        }\n        setIsUploading(true);\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", file);\n            const response = await fetch(\"\".concat(BACKEND_API_BASE_URL, \"/upload\"), {\n                method: \"POST\",\n                body: formData\n            });\n            if (!response.ok) throw new Error(\"Upload failed: \".concat(response.status));\n            const result = await response.json();\n            if (type === \"handwriting\") {\n                setHandwritingSample(file);\n                setHandwritingSampleUrl(result.url);\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Handwriting sample uploaded!\");\n            } else {\n                setReferenceImages((prev)=>[\n                        ...prev,\n                        file\n                    ]);\n                setReferenceImageUrls((prev)=>[\n                        ...prev,\n                        result.url\n                    ]);\n                console.log(\"\\uD83D\\uDD0D DEBUG: Reference image uploaded successfully:\", {\n                    fileName: file.name,\n                    url: result.url,\n                    totalImages: referenceImages.length + 1\n                });\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Reference image uploaded! \".concat(referenceImages.length + 1, \" photo\").concat(referenceImages.length + 1 > 1 ? \"s\" : \"\", \" ready for character creation.\"));\n            }\n        } catch (error) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Upload failed. Please try again.\");\n        } finally{\n            setIsUploading(false);\n        }\n    };\n    const handleRemoveReferenceImage = (index)=>{\n        const removedImage = referenceImages[index];\n        const removedUrl = referenceImageUrls[index];\n        setReferenceImages((prev)=>prev.filter((_, i)=>i !== index));\n        setReferenceImageUrls((prev)=>prev.filter((_, i)=>i !== index));\n        console.log(\"\\uD83D\\uDD0D DEBUG: Reference image removed:\", {\n            fileName: removedImage === null || removedImage === void 0 ? void 0 : removedImage.name,\n            url: removedUrl,\n            remainingImages: referenceImages.length - 1\n        });\n        sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Reference image removed! \".concat(referenceImages.length - 1, \" photo\").concat(referenceImages.length - 1 !== 1 ? \"s\" : \"\", \" remaining.\"));\n    };\n    // Writing Assistant - full function implemented below\n    // Message version control functions\n    const addMessageToHistory = (message)=>{\n        if (message.trim() === \"\") return;\n        const cleanMessage = message.replace(/<\\/?MESSAGE>/g, \"\").trim();\n        if (cleanMessage === \"\") return;\n        const newHistory = messageHistory.slice(0, currentMessageIndex + 1);\n        newHistory.push(cleanMessage);\n        if (newHistory.length > 10) {\n            newHistory.shift();\n        } else {\n            setCurrentMessageIndex(currentMessageIndex + 1);\n        }\n        setMessageHistory(newHistory);\n        setCurrentMessageIndex(newHistory.length - 1);\n    };\n    const undoMessage = ()=>{\n        if (currentMessageIndex > 0) {\n            const newIndex = currentMessageIndex - 1;\n            setCurrentMessageIndex(newIndex);\n            setFinalCardMessage(messageHistory[newIndex]);\n        }\n    };\n    const redoMessage = ()=>{\n        if (currentMessageIndex < messageHistory.length - 1) {\n            const newIndex = currentMessageIndex + 1;\n            setCurrentMessageIndex(newIndex);\n            setFinalCardMessage(messageHistory[newIndex]);\n        }\n    };\n    // Full message generation function (from original page.tsx)\n    const handleGetMessageHelp = async ()=>{\n        // Validate custom card type if selected\n        if (selectedType === \"custom\" && !customCardType.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please describe your custom card type first!\");\n            return;\n        }\n        setIsGeneratingMessage(true);\n        try {\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = cardTones.find((tone)=>tone.id === selectedTone);\n            const toneDescription = selectedToneObj ? selectedToneObj.description.toLowerCase() : \"heartfelt and sincere\";\n            // Use effective prompt logic here too\n            const effectivePrompt = prompt.trim() || \"A beautiful \".concat(cardTypeForPrompt, \" card with \").concat(toneDescription, \" style\");\n            const messagePrompt = \"Create a \".concat(toneDescription, \" message for a \").concat(cardTypeForPrompt, ' greeting card.\\n\\nCard Theme/Description: \"').concat(effectivePrompt, '\"\\n').concat(toField ? \"Recipient: \".concat(toField) : \"Recipient: [not specified]\", \"\\n\").concat(fromField ? \"Sender: \".concat(fromField) : \"Sender: [not specified]\", \"\\nCard Tone: \").concat(selectedToneObj ? selectedToneObj.label : \"Heartfelt\", \" - \").concat(toneDescription, \"\\n\\nInstructions:\\n- Write a message that is \").concat(toneDescription, \" and feels personal and genuine\\n- \").concat(toField ? \"Address the message to \".concat(toField, \" directly, using their name naturally\") : \"Write in a way that could be personalized to any recipient\", \"\\n- \").concat(fromField ? \"Write as if \".concat(fromField, \" is personally writing this message\") : \"Write in a \".concat(toneDescription, \" tone\"), \"\\n- Match the \").concat(toneDescription, \" tone and occasion of the \").concat(cardTypeForPrompt, ' card type\\n- Be inspired by the theme: \"').concat(effectivePrompt, '\"\\n- Keep it concise but meaningful (2-4 sentences ideal)\\n- Make it feel authentic, not generic\\n- SAFETY: Never include brand names, character names, trademarked terms, or inappropriate content. If the theme references these, use generic alternatives or focus on the emotions/concepts instead\\n- Keep content family-friendly and appropriate for all ages\\n- ').concat(selectedTone === \"funny\" ? \"Include appropriate humor that fits the occasion\" : \"\", \"\\n- \").concat(selectedTone === \"genz-humor\" ? 'Use GenZ humor with internet slang, memes, and chaotic energy - think \"no cap\", \"periodt\", \"it\\'s giving...\", \"slay\", etc. Be unhinged but endearing' : \"\", \"\\n- \").concat(selectedTone === \"professional\" ? \"Keep it formal and business-appropriate\" : \"\", \"\\n- \").concat(selectedTone === \"romantic\" ? \"Include loving and romantic language\" : \"\", \"\\n- \").concat(selectedTone === \"playful\" ? \"Use fun and energetic language\" : \"\", \"\\n- \").concat(toField && fromField ? \"Show the relationship between \".concat(fromField, \" and \").concat(toField, \" through the \").concat(toneDescription, \" message tone\") : \"\", \"\\n- \").concat(fromField ? 'End the message with a signature line like \"Love, '.concat(fromField, '\" or \"- ').concat(fromField, '\" or similar, naturally integrated into the message.') : \"\", \"\\n\\nReturn ONLY the message text that should appear inside the card - no quotes, no explanations, no markdown formatting (no *bold*, _italics_, or other markdown), just the complete \").concat(toneDescription, \" message in plain text.\\n\\nIMPORTANT: Wrap your final message in <MESSAGE> </MESSAGE> tags. Everything outside these tags will be ignored.\");\n            const generatedMessage = await chatWithAI(messagePrompt, {\n                model: \"gemini-2.5-pro\",\n                includeThoughts: false // Don't include thinking content in message generation\n            });\n            if (generatedMessage === null || generatedMessage === void 0 ? void 0 : generatedMessage.trim()) {\n                // Extract message content between <MESSAGE> tags using regex\n                const messageMatch = generatedMessage.match(/<MESSAGE>([\\s\\S]*?)<\\/MESSAGE>/);\n                let extractedMessage = messageMatch ? messageMatch[1].trim() : generatedMessage.trim();\n                // Ensure no MESSAGE tags are included in the final message\n                extractedMessage = extractedMessage.replace(/<\\/?MESSAGE>/g, \"\").trim();\n                // Add current message to history if it exists and is different\n                if (finalCardMessage.trim() && finalCardMessage.trim() !== extractedMessage) {\n                    addMessageToHistory(finalCardMessage);\n                }\n                setFinalCardMessage(extractedMessage);\n                // Add the new message to history\n                addMessageToHistory(extractedMessage);\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"✨ Personalized message created!\");\n            }\n        } catch (error) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to generate message. Please try again.\");\n        } finally{\n            setIsGeneratingMessage(false);\n        }\n    };\n    // Main card generation function\n    const handleGenerateCardAsync = async ()=>{\n        if (!userEmail.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter your email address\");\n            return;\n        }\n        // Basic email validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(userEmail)) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter a valid email address\");\n            return;\n        }\n        // Validate custom style if selected\n        if (selectedArtisticStyle === \"custom\" && !customStyleDescription.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please describe your custom artistic style\");\n            return;\n        }\n        // Validate reference images with model compatibility\n        if (referenceImageUrls.length > 0 && selectedImageModel !== \"gpt-image-1\") {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Reference photos are only supported with GPT Image 1 model. Please switch to GPT Image 1 in Advanced Options or remove reference photos.\");\n            return;\n        }\n        // Clear all draft mode states to prevent UI conflicts\n        setIsDraftMode(false);\n        setDraftCards([]);\n        setDraftIndexMapping([]);\n        setSelectedDraftIndex(-1);\n        setIsGeneratingFinalCard(false);\n        setPreviewingDraftIndex(-1);\n        setDraftCompletionShown(false);\n        setDraftCompletionCount(0); // Reset completion counter\n        // Clear any existing card states\n        setGeneratedCards([]);\n        setGeneratedCard(null);\n        setSelectedCardIndex(0);\n        setCurrentCardId(null);\n        setIsCardCompleted(false);\n        setIsGenerating(true);\n        startElapsedTimeTracking(undefined, 120);\n        setGenerationProgress(\"Creating your personalized card...\");\n        setProgressPercentage(0);\n        try {\n            // Create job tracking\n            const jobId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            setCurrentJobId(jobId);\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            let messageContent = finalCardMessage;\n            // Handle message generation if needed\n            if (isHandwrittenMessage) {\n                messageContent = \"[Blank space for handwritten message]\";\n            } else if (!messageContent.trim() && !isFrontBackOnly) {\n                setGenerationProgress(\"✍️ Writing the perfect message...\");\n                const autoMessagePrompt = \"Create a heartfelt message for a \".concat(cardTypeForPrompt, ' greeting card.\\n\\nCard Theme/Description: \"').concat(prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"), '\"\\n').concat(toField ? \"Recipient: \".concat(toField) : \"Recipient: [not specified]\", \"\\n\").concat(fromField ? \"Sender: \".concat(fromField) : \"Sender: [not specified]\", \"\\n\\nInstructions:\\n- Write a message that feels personal and genuine\\n- Keep it concise but meaningful (2-4 sentences ideal)\\n- Make it feel authentic, not generic\\n- Keep content family-friendly and appropriate for all ages\\n- \").concat(fromField ? 'End the message with a signature line like \"Love, '.concat(fromField, '\" or \"- ').concat(fromField, '\" or similar, naturally integrated into the message.') : \"\", \"\\n\\nReturn ONLY the message text that should appear inside the card.\\n\\nIMPORTANT: Wrap your final message in <MESSAGE> </MESSAGE> tags.\");\n                const generatedMessage = await chatWithAI(autoMessagePrompt, {\n                    model: \"gemini-2.5-pro\",\n                    includeThoughts: false\n                });\n                if (generatedMessage === null || generatedMessage === void 0 ? void 0 : generatedMessage.trim()) {\n                    const messageMatch = generatedMessage.match(/<MESSAGE>([\\s\\S]*?)<\\/MESSAGE>/);\n                    if (messageMatch && messageMatch[1]) {\n                        messageContent = messageMatch[1].trim();\n                        setFinalCardMessage(messageContent);\n                    }\n                }\n            }\n            // Generate style and paper config\n            const selectedStyle = artisticStyles.find((style)=>style.id === selectedArtisticStyle);\n            const styleModifier = selectedArtisticStyle === \"custom\" ? customStyleDescription : (selectedStyle === null || selectedStyle === void 0 ? void 0 : selectedStyle.promptModifier) || \"\";\n            const paperConfig = paperSizes.find((size)=>size.id === selectedPaperSize) || paperSizes[0];\n            setGenerationProgress(\"\\uD83C\\uDFA8 Creating artistic vision for your card...\");\n            // Generate prompts\n            const promptGenerationQuery = \"Create prompts for a \".concat(cardTypeForPrompt, ' greeting card.\\n\\nTheme: \"').concat(prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"), '\"\\nStyle: ').concat((selectedStyle === null || selectedStyle === void 0 ? void 0 : selectedStyle.label) || \"Default\", \"\\n\").concat(toField ? \"To: \".concat(toField) : \"\", \"\\n\").concat(fromField ? \"From: \".concat(fromField) : \"\", \"\\n\").concat(!isFrontBackOnly ? 'Message: \"'.concat(messageContent, '\"') : \"\", \"\\n\").concat(referenceImageUrls.length > 0 ? \"Reference Photos: \".concat(referenceImageUrls.length, \" photo(s) provided for character creation\") : \"\", \"\\n\\nRequirements:\\n- Flat 2D artwork for printing\\n- Full-bleed backgrounds extending to edges\\n- Keep text, faces, and key elements at least 10% away from top/bottom edges\\n- Family-friendly and appropriate for greeting cards\\n- Style: \").concat(styleModifier, '\\n\\nReturn JSON:\\n{\\n  \"frontCover\": \"detailed front cover prompt\",\\n  \"backCover\": \"detailed back cover prompt\"').concat(!isFrontBackOnly ? ',\\n  \"leftInterior\": \"detailed left interior prompt\",\\n  \"rightInterior\": \"detailed right interior prompt\"' : \"\", \"\\n}\");\n            const generatedPrompts = await chatWithAI(promptGenerationQuery, {\n                jsonSchema: {\n                    type: \"object\",\n                    properties: {\n                        frontCover: {\n                            type: \"string\"\n                        },\n                        backCover: {\n                            type: \"string\"\n                        },\n                        ...isFrontBackOnly ? {} : {\n                            leftInterior: {\n                                type: \"string\"\n                            },\n                            rightInterior: {\n                                type: \"string\"\n                            }\n                        }\n                    },\n                    required: [\n                        \"frontCover\",\n                        \"backCover\",\n                        ...isFrontBackOnly ? [] : [\n                            \"leftInterior\",\n                            \"rightInterior\"\n                        ]\n                    ]\n                },\n                model: \"gemini-2.5-pro\",\n                attachments: referenceImageUrls\n            });\n            if (!generatedPrompts || !generatedPrompts.frontCover) {\n                throw new Error(\"Failed to generate image prompts\");\n            }\n            // Save job data\n            const jobData = {\n                prompt: prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"),\n                selectedType,\n                customCardType,\n                selectedTone,\n                finalCardMessage: messageContent,\n                toField,\n                fromField,\n                userEmail,\n                selectedArtisticStyle,\n                customStyleDescription,\n                selectedImageModel,\n                isFrontBackOnly,\n                numberOfCards,\n                selectedPaperSize,\n                prompts: generatedPrompts,\n                paperConfig\n            };\n            saveJobToStorage(jobId, jobData);\n            setGenerationProgress(\"\\uD83D\\uDE80 Starting background generation...\");\n            // Prepare input images for reference photo support\n            const inputImages = [];\n            if (referenceImageUrls.length > 0 && selectedImageModel === \"gpt-image-1\") {\n                inputImages.push(...referenceImageUrls);\n            }\n            const response = await fetch(\"/api/generate-card-async\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    jobId,\n                    prompts: generatedPrompts,\n                    config: {\n                        userNumber: \"+17145986105\",\n                        modelVersion: selectedImageModel,\n                        aspectRatio: paperConfig.aspectRatio,\n                        quality: \"high\",\n                        outputFormat: \"jpeg\",\n                        outputCompression: 100,\n                        moderation: \"low\",\n                        dimensions: paperConfig.dimensions,\n                        isFrontBackOnly,\n                        userEmail,\n                        cardType: cardTypeForPrompt,\n                        toField,\n                        fromField,\n                        isDraftMode: false,\n                        ...inputImages.length > 0 && {\n                            input_images: inputImages,\n                            input_images_mode: \"front_cover_only\"\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server error: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status !== \"processing\") {\n                throw new Error(result.message || \"Failed to start card generation\");\n            }\n            setGenerationProgress(\"✨ Bringing your vision to life...\");\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDF89 Card generation started!\");\n            // Start polling for completion (we'll add this function next)\n            pollJobStatus(jobId);\n        } catch (error) {\n            console.error(\"Card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to generate card. Please try again.\");\n            if (currentJobId) {\n                removeJobFromStorage(currentJobId);\n                setCurrentJobId(null);\n            }\n            setIsGenerating(false);\n            setGenerationProgress(\"\");\n            stopElapsedTimeTracking();\n        }\n    };\n    // Draft mode generation - creates 5 front cover variations\n    const handleGenerateDraftCards = async ()=>{\n        if (!userEmail.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter your email address\");\n            return;\n        }\n        // Basic email validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(userEmail)) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter a valid email address\");\n            return;\n        }\n        // Validate custom style if selected\n        if (selectedArtisticStyle === \"custom\" && !customStyleDescription.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please describe your custom artistic style\");\n            return;\n        }\n        // Validate reference images with model compatibility\n        if (referenceImageUrls.length > 0 && selectedDraftModel !== \"gpt-image-1\") {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Reference photos are only supported with GPT Image 1 model. Please switch to GPT Image 1 for draft mode or remove reference photos.\");\n            return;\n        }\n        setIsDraftMode(true);\n        setIsGenerating(true);\n        startElapsedTimeTracking(undefined, 45); // 45 seconds for draft mode\n        setGenerationProgress(\"\\uD83C\\uDFA8 Creating 5 front cover variations for you to choose from...\");\n        setProgressPercentage(0);\n        setDraftCards([]);\n        setDraftIndexMapping([]);\n        setSelectedDraftIndex(-1);\n        setDraftCompletionShown(false);\n        setDraftCompletionCount(0); // Reset completion counter\n        // Clear any previous card state to avoid UI conflicts\n        setGeneratedCard(null);\n        setGeneratedCards([]);\n        setIsCardCompleted(false);\n        try {\n            console.log(\"\\uD83D\\uDE80 Starting draft mode generation with 5 variations\");\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = cardTones.find((tone)=>tone.id === selectedTone);\n            const toneDescription = selectedToneObj ? selectedToneObj.description.toLowerCase() : \"heartfelt and sincere\";\n            const effectivePrompt = prompt.trim() || \"A beautiful \".concat(cardTypeForPrompt, \" card with \").concat(toneDescription, \" style\");\n            // Show specific message for GPT-1 users about quality enforcement\n            if (selectedDraftModel === \"gpt-image-1\") {\n                const styleMessage = selectedArtisticStyle === \"ai-smart-style\" ? \" across 5 curated artistic styles!\" : \" (using low quality for fast previews)!\";\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 Generating 5 front cover variations with GPT-1\".concat(styleMessage));\n            } else {\n                const styleMessage = selectedArtisticStyle === \"ai-smart-style\" ? \" across 5 curated artistic styles!\" : \" for you to choose from!\";\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 Generating 5 front cover variations\".concat(styleMessage));\n            }\n            // Generate 5 draft variations with smart style distribution\n            const draftPromises = Array.from({\n                length: 5\n            }, async (_, index)=>{\n                try {\n                    var _paperSizes_find, _paperSizes_find1;\n                    console.log(\"\\uD83C\\uDFA8 Starting draft variation \".concat(index + 1));\n                    // For smart style, use predefined styles for all 5 variations\n                    let styleOverride = undefined;\n                    let styleLabel = undefined;\n                    if (selectedArtisticStyle === \"ai-smart-style\") {\n                        const predefinedStyles = [\n                            \"watercolor\",\n                            \"botanical\",\n                            \"comic-book\",\n                            \"dreamy-fantasy\",\n                            \"minimalist\"\n                        ];\n                        const styleLabels = [\n                            \"\\uD83C\\uDFA8 Watercolor\",\n                            \"\\uD83C\\uDF3F Botanical\",\n                            \"\\uD83D\\uDCA5 Comic Book\",\n                            \"\\uD83C\\uDF38 Dreamy Fantasy\",\n                            \"✨ Minimalist\"\n                        ];\n                        styleOverride = predefinedStyles[index];\n                        styleLabel = styleLabels[index];\n                        console.log(\"\\uD83C\\uDFA8 Draft \".concat(index + 1, ': Using predefined style \"').concat(styleOverride, '\" (').concat(styleLabel, \")\"));\n                    }\n                    // Generate front cover prompt for this variation\n                    const selectedStyle = artisticStyles.find((style)=>style.id === (styleOverride || selectedArtisticStyle));\n                    const styleModifier = styleOverride && styleOverride === \"custom\" ? customStyleDescription : (selectedStyle === null || selectedStyle === void 0 ? void 0 : selectedStyle.promptModifier) || \"\";\n                    const frontCoverPromptQuery = \"You are an expert AI greeting card designer. Create a front cover prompt for a \".concat(cardTypeForPrompt, ' greeting card.\\n\\nTheme: \"').concat(effectivePrompt, '\"\\nStyle: ').concat((selectedStyle === null || selectedStyle === void 0 ? void 0 : selectedStyle.label) || \"Default\", \"\\nTone: \").concat(selectedToneObj ? selectedToneObj.label : \"Heartfelt\", \" - \").concat(toneDescription, \"\\n\").concat(toField ? \"To: \".concat(toField) : \"\", \"\\n\").concat(fromField ? \"From: \".concat(fromField) : \"\", \"\\n\").concat(referenceImageUrls.length > 0 ? \"Reference Photos: I have attached \".concat(referenceImageUrls.length, \" reference photo\").concat(referenceImageUrls.length > 1 ? \"s\" : \"\", \" for character creation.\") : \"\", '\\n\\nFront Cover Requirements:\\n- Include \"').concat(cardTypeForPrompt, '\" greeting text positioned safely in center area (avoid top/bottom 10%)\\n- Use beautiful, readable handwritten cursive script\\n- ').concat(referenceImageUrls.length > 0 ? \"Create cartoon/illustrated characters from reference photos\" : \"Create charming cartoon-style figures if needed\", \"\\n- Be creative and unique, avoid generic designs\\n- Flat 2D artwork for printing\\n- Style: \").concat(styleModifier, \"\\n\\nReturn ONLY the front cover prompt as plain text.\");\n                    const frontCoverPrompt = await chatWithAI(frontCoverPromptQuery, {\n                        model: \"gemini-2.5-pro\",\n                        attachments: referenceImageUrls\n                    });\n                    if (!(frontCoverPrompt === null || frontCoverPrompt === void 0 ? void 0 : frontCoverPrompt.trim())) {\n                        throw new Error(\"Failed to generate front cover prompt\");\n                    }\n                    // Enhance with reference image instructions if available\n                    let enhancedFrontCoverPrompt = frontCoverPrompt.trim();\n                    if (referenceImageUrls.length > 0 && selectedDraftModel === \"gpt-image-1\") {\n                        enhancedFrontCoverPrompt += \"\\n\\nCRITICAL CHARACTER REFERENCE INSTRUCTIONS: I have provided \".concat(referenceImageUrls.length > 1 ? \"multiple reference photos\" : \"a reference photo\", \" as input image\").concat(referenceImageUrls.length > 1 ? \"s\" : \"\", \". You MUST create cartoon/illustrated characters that accurately represent ONLY the people who are actually visible in \").concat(referenceImageUrls.length > 1 ? \"these reference photos\" : \"this reference photo\", \" with high fidelity to their appearance.\");\n                    }\n                    // Generate the image\n                    const jobId = \"draft-\".concat(index, \"-\").concat((0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])());\n                    const inputImages = [];\n                    if (referenceImageUrls.length > 0 && selectedDraftModel === \"gpt-image-1\") {\n                        inputImages.push(...referenceImageUrls);\n                    }\n                    const response = await fetch(\"/api/generate-card-async\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            jobId,\n                            prompts: {\n                                frontCover: enhancedFrontCoverPrompt\n                            },\n                            config: {\n                                userNumber: \"+17145986105\",\n                                modelVersion: selectedDraftModel,\n                                aspectRatio: ((_paperSizes_find = paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find === void 0 ? void 0 : _paperSizes_find.aspectRatio) || \"9:16\",\n                                quality: \"low\",\n                                outputFormat: \"jpeg\",\n                                outputCompression: 100,\n                                moderation: \"low\",\n                                dimensions: ((_paperSizes_find1 = paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find1 === void 0 ? void 0 : _paperSizes_find1.dimensions) || \"1024x1536\",\n                                isFrontBackOnly: true,\n                                userEmail,\n                                cardType: cardTypeForPrompt,\n                                toField,\n                                fromField,\n                                isDraftMode: true,\n                                ...inputImages.length > 0 && {\n                                    input_images: inputImages,\n                                    input_images_mode: \"front_cover_only\"\n                                }\n                            }\n                        })\n                    });\n                    if (!response.ok) {\n                        throw new Error(\"Server error: \".concat(response.status));\n                    }\n                    const result = await response.json();\n                    if (result.status !== \"processing\") {\n                        throw new Error(result.message || \"Failed to start draft generation\");\n                    }\n                    console.log(\"✅ Draft variation \".concat(index + 1, \" job started:\"), jobId);\n                    // Store the job with style info for later\n                    saveJobToStorage(jobId, {\n                        isDraft: true,\n                        draftIndex: index,\n                        styleInfo: styleOverride ? {\n                            styleName: styleOverride,\n                            styleLabel: styleLabel\n                        } : undefined,\n                        frontCoverPrompt: enhancedFrontCoverPrompt\n                    });\n                    // Start polling for this specific draft job\n                    console.log(\"\\uD83D\\uDD04 Starting polling for draft job \".concat(jobId));\n                    pollJobStatus(jobId);\n                } catch (error) {\n                    console.error(\"❌ Draft variation \".concat(index + 1, \" failed:\"), error);\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Draft variation \".concat(index + 1, \" failed: \").concat(error instanceof Error ? error.message : \"Unknown error\"));\n                }\n            });\n            // Wait for all draft generations to start (but not complete)\n            await Promise.allSettled(draftPromises);\n            console.log(\"\\uD83D\\uDE80 All draft variations started\");\n        } catch (error) {\n            console.error(\"Draft card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to start draft generation: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n            setIsGenerating(false);\n            setIsDraftMode(false);\n            setDraftCompletionShown(false);\n            setDraftCompletionCount(0); // Reset completion counter\n            setGenerationProgress(\"\");\n            stopElapsedTimeTracking();\n        }\n    };\n    // Check job status\n    const checkJobStatus = async (jobId)=>{\n        try {\n            const response = await fetch(\"/api/job-status/\".concat(jobId));\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Failed to check job status:\", error);\n            return null;\n        }\n    };\n    // Poll job status with exponential backoff\n    const pollJobStatus = async function(jobId) {\n        let attempt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        try {\n            const statusResponse = await checkJobStatus(jobId);\n            // Check if this is a draft job\n            const isDraftJob = jobId.startsWith(\"draft-\");\n            const draftIndex = isDraftJob ? parseInt(jobId.split(\"-\")[1]) : -1;\n            if (statusResponse && statusResponse.status === \"completed\") {\n                console.log(\"\\uD83C\\uDF89 Job completed! Card data:\", statusResponse.cardData, \"isDraftJob:\", isDraftJob);\n                if (statusResponse.cardData) {\n                    if (isDraftJob && draftIndex >= 0) {\n                        var _statusResponse_cardData_generatedPrompts;\n                        // Handle draft card completion - no QR code needed for drafts\n                        console.log(\"\\uD83C\\uDFA8 Draft variation \".concat(draftIndex + 1, \" completed!\"));\n                        // Get style info for smart style mode\n                        let styleInfo = undefined;\n                        if (selectedArtisticStyle === \"ai-smart-style\") {\n                            const predefinedStyles = [\n                                \"watercolor\",\n                                \"botanical\",\n                                \"comic-book\",\n                                \"dreamy-fantasy\",\n                                \"minimalist\"\n                            ];\n                            const styleLabels = [\n                                \"\\uD83C\\uDFA8 Watercolor\",\n                                \"\\uD83C\\uDF3F Botanical\",\n                                \"\\uD83D\\uDCA5 Comic Book\",\n                                \"\\uD83C\\uDF38 Dreamy Fantasy\",\n                                \"✨ Minimalist\"\n                            ];\n                            if (draftIndex >= 0 && draftIndex < predefinedStyles.length) {\n                                styleInfo = {\n                                    styleName: predefinedStyles[draftIndex],\n                                    styleLabel: styleLabels[draftIndex]\n                                };\n                            }\n                        }\n                        const draftCard = {\n                            id: \"draft-\".concat(draftIndex + 1, \"-\").concat(Date.now()),\n                            prompt: statusResponse.cardData.prompt || \"Draft Variation \".concat(draftIndex + 1),\n                            frontCover: statusResponse.cardData.frontCover || \"\",\n                            backCover: \"\",\n                            leftPage: \"\",\n                            rightPage: \"\",\n                            createdAt: new Date(),\n                            generatedPrompts: {\n                                frontCover: ((_statusResponse_cardData_generatedPrompts = statusResponse.cardData.generatedPrompts) === null || _statusResponse_cardData_generatedPrompts === void 0 ? void 0 : _statusResponse_cardData_generatedPrompts.frontCover) || \"\"\n                            },\n                            styleInfo: styleInfo\n                        };\n                        // Update draft cards state - populate from left to right as they complete\n                        setDraftCards((prev)=>{\n                            const updated = [\n                                ...prev\n                            ];\n                            updated.push(draftCard); // Add to next available position (left to right)\n                            return updated;\n                        });\n                        // Update mapping to track which display position corresponds to which original draft index\n                        setDraftIndexMapping((prev)=>{\n                            const updatedMapping = [\n                                ...prev\n                            ];\n                            updatedMapping.push(draftIndex); // Map new display position to original draft index\n                            return updatedMapping;\n                        });\n                        // Increment completion counter and check completion\n                        setDraftCompletionCount((prevCount)=>{\n                            const newCompletedCount = prevCount + 1;\n                            console.log(\"\\uD83D\\uDCCA Draft progress: \".concat(newCompletedCount, \"/5 front cover variations complete\"));\n                            // Scroll to draft preview when first card appears\n                            if (newCompletedCount === 1) {\n                                scrollToCardPreview();\n                            }\n                            if (newCompletedCount === 5) {\n                                setIsGenerating(false);\n                                setGenerationProgress(\"\");\n                                setProgressPercentage(100);\n                                stopElapsedTimeTracking();\n                                // Only show completion toast once using a flag, and only if user hasn't moved to final generation\n                                setDraftCompletionShown((prev)=>{\n                                    if (!prev && !isGeneratingFinalCard) {\n                                        sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 All 5 front cover variations ready! Choose your favorite below.\");\n                                        return true;\n                                    }\n                                    return prev;\n                                });\n                            } else {\n                                setGenerationProgress(\"✨ \".concat(newCompletedCount, \"/5 front cover variations complete... \").concat(newCompletedCount >= 2 ? \"You can select one now to proceed!\" : \"\"));\n                                setProgressPercentage(newCompletedCount / 5 * 100);\n                            }\n                            return newCompletedCount;\n                        });\n                        removeJobFromStorage(jobId);\n                    } else {\n                        // Handle final card completion - apply QR code and full processing\n                        let cardWithQR = {\n                            ...statusResponse.cardData\n                        };\n                        // Ensure the card has a valid createdAt date\n                        if (!cardWithQR.createdAt) {\n                            cardWithQR.createdAt = new Date();\n                        } else if (typeof cardWithQR.createdAt === \"string\" || typeof cardWithQR.createdAt === \"number\") {\n                            cardWithQR.createdAt = new Date(cardWithQR.createdAt);\n                        }\n                        // Ensure the card has a valid ID\n                        if (!cardWithQR.id) {\n                            cardWithQR.id = \"card-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n                        }\n                        console.log(\"\\uD83D\\uDD04 Final card data prepared:\", cardWithQR);\n                        try {\n                            setGenerationProgress(\"✨ Adding interactive QR code to your card...\");\n                            console.log(\"\\uD83D\\uDD04 Starting QR overlay process for final card\");\n                            // Store card data first to get a shareable URL\n                            if (cardWithQR.frontCover) {\n                                try {\n                                    const cardStoreResponse = await fetch(\"/api/cards/store\", {\n                                        method: \"POST\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json\"\n                                        },\n                                        body: JSON.stringify({\n                                            prompt: cardWithQR.prompt || \"\",\n                                            frontCover: cardWithQR.frontCover || \"\",\n                                            backCover: cardWithQR.backCover || \"\",\n                                            leftPage: cardWithQR.leftPage || \"\",\n                                            rightPage: cardWithQR.rightPage || \"\",\n                                            generatedPrompts: cardWithQR.generatedPrompts || null\n                                        })\n                                    });\n                                    if (cardStoreResponse.ok) {\n                                        const cardStoreData = await cardStoreResponse.json();\n                                        const actualShareUrl = cardStoreData.share_url;\n                                        console.log(\"Using actual share URL for QR code:\", actualShareUrl);\n                                        // Apply QR code to back cover using the API-returned URL\n                                        if (cardWithQR.backCover && actualShareUrl) {\n                                            console.log(\"\\uD83D\\uDD04 Applying QR overlay to final card...\");\n                                            const originalBackCover = cardWithQR.backCover;\n                                            // cardWithQR.backCover = await overlayQRCodeOnImage(originalBackCover, actualShareUrl);\n                                            cardWithQR.shareUrl = actualShareUrl;\n                                            console.log(\"✅ QR overlay complete for final card\");\n                                        }\n                                    } else {\n                                        console.warn(\"Failed to store card for sharing, continuing without QR code\");\n                                    }\n                                } catch (error) {\n                                    console.error(\"❌ Failed to store card or overlay QR code:\", error);\n                                // Continue without QR code if there's an error\n                                }\n                            } else {\n                                console.warn(\"No front cover found, skipping QR code process\");\n                            }\n                        } catch (error) {\n                            console.error(\"❌ Error in QR code process:\", error);\n                        // Continue without QR code if there's an error\n                        }\n                        console.log(\"\\uD83C\\uDFAF Setting final card state:\", cardWithQR);\n                        // Set the card states - this is critical!\n                        setGeneratedCard(cardWithQR);\n                        setGeneratedCards([\n                            cardWithQR\n                        ]);\n                        setSelectedCardIndex(0);\n                        setIsCardCompleted(true);\n                        setIsGenerating(false);\n                        setIsGeneratingFinalCard(false);\n                        setIsDraftMode(false);\n                        setDraftCompletionShown(false);\n                        setGenerationProgress(\"\");\n                        // Scroll to card preview\n                        scrollToCardPreview();\n                        // Capture generation time from backend\n                        if (statusResponse.cardData.generationTimeSeconds) {\n                            setGenerationDuration(statusResponse.cardData.generationTimeSeconds);\n                        }\n                        // Stop elapsed time tracking\n                        stopElapsedTimeTracking();\n                        // Set progress to 100%\n                        setProgressPercentage(100);\n                        setGenerationProgress(\"Card generation complete!\");\n                        sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDF89 Your card is ready!\");\n                        // Send thank you email\n                        if (userEmail.trim()) {\n                            const cardTypeForEmail = selectedType === \"custom\" ? customCardType : selectedType;\n                            sendThankYouEmail(userEmail, cardTypeForEmail, cardWithQR.shareUrl || \"https://vibecarding.com\");\n                        }\n                        console.log(\"✅ Final card completion process finished successfully\");\n                        removeJobFromStorage(jobId);\n                        setCurrentJobId(null);\n                    }\n                } else {\n                    console.error(\"❌ No card data in completed response\");\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"❌ Card generation completed but no data received. Please try again.\");\n                    removeJobFromStorage(jobId);\n                    if (!isDraftJob) {\n                        setCurrentJobId(null);\n                    }\n                }\n            } else if (statusResponse && statusResponse.status === \"failed\") {\n                console.error(\"❌ Job failed:\", statusResponse);\n                if (isDraftJob && draftIndex >= 0) {\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Draft variation \".concat(draftIndex + 1, \" failed. Continuing with others...\"));\n                } else {\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"❌ Card generation failed. Please try again.\");\n                    setIsGenerating(false);\n                    setIsGeneratingFinalCard(false);\n                    stopElapsedTimeTracking();\n                    setGenerationProgress(\"\");\n                    setProgressPercentage(0);\n                    setCurrentJobId(null);\n                }\n                removeJobFromStorage(jobId);\n            } else if (statusResponse && statusResponse.status === \"processing\") {\n                // Continue polling every 3 seconds - near real-time updates for better UX\n                console.log(\"\\uD83D\\uDD04 Job still processing (attempt \".concat(attempt, \"), polling again...\"));\n                setTimeout(()=>pollJobStatus(jobId, attempt + 1), 3000);\n            } else {\n                console.warn(\"⚠️ Unexpected status response:\", statusResponse);\n                // Continue polling in case it's a temporary issue\n                setTimeout(()=>pollJobStatus(jobId, attempt + 1), 5000);\n            }\n        } catch (error) {\n            console.error(\"Failed to poll job status:\", error);\n            // Retry after delay with exponential backoff\n            const delay = Math.min(10000, 3000 * Math.pow(1.5, Math.min(attempt - 1, 5)));\n            setTimeout(()=>pollJobStatus(jobId, attempt + 1), delay);\n        }\n    };\n    // Remove job from storage\n    const removeJobFromStorage = (jobId)=>{\n        try {\n            localStorage.removeItem(\"cardJob_\".concat(jobId));\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            const updatedJobs = pendingJobs.filter((id)=>id !== jobId);\n            localStorage.setItem(\"pendingCardJobs\", JSON.stringify(updatedJobs));\n        } catch (error) {\n            console.error(\"Failed to remove job from localStorage:\", error);\n        }\n    };\n    // Generate final high-quality card from selected draft\n    const handleGenerateFinalFromDraft = async (displayIndex)=>{\n        if (displayIndex < 0 || displayIndex >= draftCards.length || !draftCards[displayIndex]) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Invalid draft selection\");\n            return;\n        }\n        // Get the original draft index from the mapping\n        const originalDraftIndex = draftIndexMapping[displayIndex];\n        if (originalDraftIndex === undefined) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Could not find original draft data\");\n            return;\n        }\n        // Stop remaining draft generations to focus on the selected design\n        const remainingDrafts = 5 - draftCards.length;\n        if (remainingDrafts > 0 && isGenerating) {\n            setIsGenerating(false); // Stop the draft generation process\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"\\uD83C\\uDFAF Focusing on your selected design! Skipping \".concat(remainingDrafts, \" remaining variations.\"));\n        }\n        setIsGeneratingFinalCard(true);\n        setSelectedDraftIndex(displayIndex); // Store display index for UI\n        startElapsedTimeTracking(undefined, 120); // 120 seconds for final card generation\n        setGenerationProgress(\"\\uD83C\\uDFA8 Creating high-quality version of your selected design...\");\n        try {\n            var _selectedDraft_generatedPrompts, _paperSizes_find, _paperSizes_find1;\n            const selectedDraft = draftCards[displayIndex];\n            const jobId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            // Generate the missing prompts using the stored frontCover prompt + user info\n            console.log(\"\\uD83D\\uDD04 Generating complete prompts from stored front cover prompt + user info\");\n            // The draft should have at least the frontCover prompt\n            const storedFrontCoverPrompt = (_selectedDraft_generatedPrompts = selectedDraft.generatedPrompts) === null || _selectedDraft_generatedPrompts === void 0 ? void 0 : _selectedDraft_generatedPrompts.frontCover;\n            if (!storedFrontCoverPrompt) {\n                throw new Error(\"Selected draft is missing frontCover prompt\");\n            }\n            console.log(\"✅ Found stored front cover prompt:\", storedFrontCoverPrompt.substring(0, 100) + \"...\");\n            // Now generate the missing 3 prompts using the front cover context + user info\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = cardTones.find((tone)=>tone.id === selectedTone);\n            const toneDescription = selectedToneObj ? selectedToneObj.description.toLowerCase() : \"heartfelt and sincere\";\n            const effectivePrompt = prompt.trim() || \"A beautiful \".concat(cardTypeForPrompt, \" card with \").concat(toneDescription, \" style\");\n            let messageContent = finalCardMessage;\n            if (isHandwrittenMessage) {\n                messageContent = \"[Blank space for handwritten message]\";\n            }\n            // Get style from the selected draft or fall back to current setting  \n            const draftStyleInfo = selectedDraft.styleInfo;\n            let styleModifier = \"\";\n            if (draftStyleInfo && draftStyleInfo.styleName) {\n                const selectedStyle = artisticStyles.find((style)=>style.id === draftStyleInfo.styleName);\n                styleModifier = (selectedStyle === null || selectedStyle === void 0 ? void 0 : selectedStyle.promptModifier) || \"\";\n            } else {\n                const selectedStyle = artisticStyles.find((style)=>style.id === selectedArtisticStyle);\n                styleModifier = selectedArtisticStyle === \"custom\" ? customStyleDescription : (selectedStyle === null || selectedStyle === void 0 ? void 0 : selectedStyle.promptModifier) || \"\";\n            }\n            const generateOtherPromptsQuery = 'You are creating the remaining prompts for a greeting card. You already have the front cover prompt below.\\n\\nEXISTING FRONT COVER PROMPT:\\n\"'.concat(storedFrontCoverPrompt, '\"\\n\\nCARD CONTEXT:\\n- Type: ').concat(cardTypeForPrompt, '\\n- Theme: \"').concat(effectivePrompt, '\"  \\n- Tone: ').concat(toneDescription, \"\\n\").concat(toField ? \"- To: \".concat(toField) : \"\", \"\\n\").concat(fromField ? \"- From: \".concat(fromField) : \"\", \"\\n\").concat(!isFrontBackOnly ? '- Message: \"'.concat(messageContent, '\"') : \"\", \"\\n\").concat(isHandwrittenMessage ? \"- Note: Include space for handwritten message\" : \"\", \"\\n\\nTASK: Create prompts for the remaining card sections that are visually cohesive with the existing front cover. Use the same color palette, artistic style, lighting, and visual elements from the front cover to create a unified design.\\n\\nRequirements:\\n- Maintain visual continuity with the front cover design\\n- Use the same artistic style: \").concat(styleModifier, '\\n- Keep consistent color palette, lighting, and mood\\n- Full-bleed backgrounds extending to edges\\n- Keep text/faces 0.5\" from left/right edges for safe printing\\n- IMPORTANT: Keep text, faces, and key elements at least 10% away from top/bottom edges\\n\\nGenerate prompts for:\\n\\n1. Back Cover: Create a simple, peaceful design that complements the front cover. Reference subtle elements from the front cover but keep it minimal and serene. NO PEOPLE, just beautiful artistic elements. IMPORTANT: Leave the bottom-right corner area (approximately 1 inch square) completely clear and undecorated for QR code placement.\\n\\n').concat(!isFrontBackOnly ? \"2. Left Interior: Creative decorative art that harmonizes with the front cover style. NO PEOPLE or characters, focus on artistic elements like patterns, landscapes, objects, or abstract art that matches the front cover's mood and style.\\n\\n3. Right Interior: \".concat(isHandwrittenMessage ? \"Design elegant writing space with decorative elements that complement the front cover style. Position decorative elements safely away from edges. NO PEOPLE or characters.\" : 'Include message text: \"'.concat(messageContent, '\" in beautiful handwritten cursive script, integrated into decorative artwork that matches the front cover style. NO PEOPLE or characters.')) : \"\", '\\n\\nReturn JSON:\\n{\\n  \"frontCover\": \"').concat(storedFrontCoverPrompt, '\",\\n  \"backCover\": \"detailed back cover prompt\"').concat(!isFrontBackOnly ? ',\\n  \"leftInterior\": \"detailed left interior prompt\",\\n  \"rightInterior\": \"detailed right interior prompt\"' : \"\", \"\\n}\");\n            const finalPrompts = await chatWithAI(generateOtherPromptsQuery, {\n                jsonSchema: {\n                    type: \"object\",\n                    properties: {\n                        frontCover: {\n                            type: \"string\"\n                        },\n                        backCover: {\n                            type: \"string\"\n                        },\n                        ...isFrontBackOnly ? {} : {\n                            leftInterior: {\n                                type: \"string\"\n                            },\n                            rightInterior: {\n                                type: \"string\"\n                            }\n                        }\n                    },\n                    required: [\n                        \"frontCover\",\n                        \"backCover\",\n                        ...isFrontBackOnly ? [] : [\n                            \"leftInterior\",\n                            \"rightInterior\"\n                        ]\n                    ]\n                },\n                model: \"gemini-2.5-pro\"\n            });\n            if (!finalPrompts || !finalPrompts.frontCover || !finalPrompts.backCover) {\n                throw new Error(\"Failed to generate complete prompts for final card\");\n            }\n            console.log(\"✅ Generated complete prompts for final card:\", {\n                hasFrontCover: !!finalPrompts.frontCover,\n                hasBackCover: !!finalPrompts.backCover,\n                hasLeftInterior: !!finalPrompts.leftInterior,\n                hasRightInterior: !!finalPrompts.rightInterior\n            });\n            // Prepare input images for final generation (reference photos)\n            const inputImages = [];\n            if (referenceImageUrls.length > 0 && selectedImageModel === \"gpt-image-1\") {\n                inputImages.push(...referenceImageUrls);\n                console.log(\"\\uD83D\\uDD0D DEBUG: Added reference images to final draft generation:\", referenceImageUrls);\n                console.log(\"\\uD83D\\uDD0D DEBUG: Total input images for final draft generation:\", inputImages.length);\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83D\\uDCF8 \".concat(referenceImageUrls.length, \" reference photo\").concat(referenceImageUrls.length > 1 ? \"s\" : \"\", \" applied to final generation!\"));\n            }\n            const response = await fetch(\"/api/generate-card-async\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    jobId,\n                    prompts: finalPrompts,\n                    config: {\n                        userNumber: \"+17145986105\",\n                        modelVersion: selectedImageModel,\n                        aspectRatio: ((_paperSizes_find = paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find === void 0 ? void 0 : _paperSizes_find.aspectRatio) || \"9:16\",\n                        quality: \"high\",\n                        outputFormat: \"jpeg\",\n                        outputCompression: 100,\n                        moderation: \"low\",\n                        dimensions: ((_paperSizes_find1 = paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find1 === void 0 ? void 0 : _paperSizes_find1.dimensions) || \"1024x1536\",\n                        isFrontBackOnly,\n                        userEmail,\n                        cardType: selectedType === \"custom\" ? customCardType : selectedType,\n                        toField,\n                        fromField,\n                        isDraftMode: false,\n                        ...inputImages.length > 0 && {\n                            input_images: inputImages,\n                            input_images_mode: \"front_cover_only\" // All reference images should go to front cover for character creation\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server error: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status !== \"processing\") {\n                throw new Error(result.message || \"Failed to start final card generation\");\n            }\n            setCurrentJobId(jobId);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 Generating high-quality version of your selected design!\");\n            // Poll for completion (reuse existing pollJobStatus)\n            pollJobStatus(jobId);\n        } catch (error) {\n            console.error(\"Final card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to generate final card. Please try again.\");\n            setIsGeneratingFinalCard(false);\n            setGenerationProgress(\"\");\n            stopElapsedTimeTracking();\n        }\n    };\n    // Recovery function - check for pending jobs on page load\n    const checkPendingJobs = async ()=>{\n        try {\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            for (const jobId of pendingJobs){\n                const jobData = localStorage.getItem(\"cardJob_\".concat(jobId));\n                if (!jobData) continue;\n                const job = JSON.parse(jobData);\n                const statusResponse = await checkJobStatus(jobId);\n                if (statusResponse && statusResponse.status === \"completed\") {\n                    console.log(\"\\uD83C\\uDF89 Job completed while user was away! Card data:\", statusResponse.cardData);\n                    // Handle completed job based on type\n                    if (jobId.startsWith(\"draft-\")) {\n                        // Draft job completion\n                        const draftIndex = parseInt(jobId.split(\"-\")[1]);\n                        if (statusResponse.cardData && draftIndex >= 0) {\n                            var _statusResponse_cardData_generatedPrompts;\n                            const draftCard = {\n                                id: \"draft-\".concat(draftIndex + 1, \"-\").concat(Date.now()),\n                                prompt: statusResponse.cardData.prompt || \"Draft Variation \".concat(draftIndex + 1),\n                                frontCover: statusResponse.cardData.frontCover || \"\",\n                                backCover: \"\",\n                                leftPage: \"\",\n                                rightPage: \"\",\n                                createdAt: new Date(),\n                                generatedPrompts: {\n                                    frontCover: ((_statusResponse_cardData_generatedPrompts = statusResponse.cardData.generatedPrompts) === null || _statusResponse_cardData_generatedPrompts === void 0 ? void 0 : _statusResponse_cardData_generatedPrompts.frontCover) || \"\"\n                                }\n                            };\n                            setDraftCards((prev)=>[\n                                    ...prev,\n                                    draftCard\n                                ]);\n                            setDraftIndexMapping((prev)=>[\n                                    ...prev,\n                                    draftIndex\n                                ]);\n                            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 Draft variation \".concat(draftIndex + 1, \" completed while you were away!\"));\n                        }\n                    } else {\n                        // Regular card completion\n                        if (statusResponse.cardData) {\n                            let cardWithQR = {\n                                ...statusResponse.cardData\n                            };\n                            if (!cardWithQR.createdAt) {\n                                cardWithQR.createdAt = new Date();\n                            } else if (typeof cardWithQR.createdAt === \"string\" || typeof cardWithQR.createdAt === \"number\") {\n                                cardWithQR.createdAt = new Date(cardWithQR.createdAt);\n                            }\n                            if (!cardWithQR.id) {\n                                cardWithQR.id = \"card-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n                            }\n                            setGeneratedCard(cardWithQR);\n                            setGeneratedCards([\n                                cardWithQR\n                            ]);\n                            setSelectedCardIndex(0);\n                            setIsCardCompleted(true);\n                            setIsGenerating(false);\n                            setGenerationProgress(\"\");\n                            if (statusResponse.cardData.generationTimeSeconds) {\n                                setGenerationDuration(statusResponse.cardData.generationTimeSeconds);\n                            }\n                            stopElapsedTimeTracking();\n                            setProgressPercentage(100);\n                            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDF89 Your card finished generating while you were away!\");\n                            // Send thank you email using job data\n                            if (job.userEmail && job.userEmail.trim()) {\n                                const cardTypeForEmail = job.selectedType === \"custom\" ? job.customCardType : job.selectedType;\n                                sendThankYouEmail(job.userEmail, cardTypeForEmail, cardWithQR.shareUrl || \"https://vibecarding.com\");\n                            }\n                        }\n                    }\n                    removeJobFromStorage(jobId);\n                } else if (statusResponse && statusResponse.status === \"failed\") {\n                    // Job failed\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"❌ A card generation job failed. Please try again.\");\n                    removeJobFromStorage(jobId);\n                } else if (statusResponse && statusResponse.status === \"processing\") {\n                    // Still processing - restore loading states and start polling\n                    setIsGenerating(true);\n                    setCurrentJobId(jobId);\n                    setGenerationProgress(\"Resuming card generation...\");\n                    // Start elapsed time tracking from when job was originally created\n                    const jobStartTime = job.createdAt ? new Date(job.createdAt).getTime() : Date.now();\n                    startElapsedTimeTracking(jobStartTime);\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"\\uD83D\\uDD04 Resuming card generation where you left off...\");\n                    pollJobStatus(jobId);\n                }\n            }\n        } catch (error) {\n            console.error(\"Failed to check pending jobs:\", error);\n        }\n    };\n    // Return all the state and functions that the UI needs\n    return {\n        // Core state\n        prompt,\n        setPrompt,\n        finalCardMessage,\n        setFinalCardMessage,\n        toField,\n        setToField,\n        fromField,\n        setFromField,\n        selectedType,\n        setSelectedType,\n        customCardType,\n        setCustomCardType,\n        selectedTone,\n        setSelectedTone,\n        isGenerating,\n        setIsGenerating,\n        isGeneratingMessage,\n        setIsGeneratingMessage,\n        generatedCard,\n        setGeneratedCard,\n        numberOfCards,\n        setNumberOfCards,\n        generatedCards,\n        setGeneratedCards,\n        selectedCardIndex,\n        setSelectedCardIndex,\n        // Advanced options\n        showAdvanced,\n        setShowAdvanced,\n        selectedArtisticStyle,\n        setSelectedArtisticStyle,\n        customStyleDescription,\n        setCustomStyleDescription,\n        selectedImageModel,\n        setSelectedImageModel,\n        selectedDraftModel,\n        setSelectedDraftModel,\n        // Draft mode\n        isDraftMode,\n        setIsDraftMode,\n        draftCards,\n        setDraftCards,\n        draftIndexMapping,\n        setDraftIndexMapping,\n        selectedDraftIndex,\n        setSelectedDraftIndex,\n        isGeneratingFinalCard,\n        setIsGeneratingFinalCard,\n        previewingDraftIndex,\n        setPreviewingDraftIndex,\n        draftCompletionShown,\n        setDraftCompletionShown,\n        draftCompletionCount,\n        setDraftCompletionCount,\n        // Progress tracking\n        generationProgress,\n        setGenerationProgress,\n        progressPercentage,\n        setProgressPercentage,\n        isCardCompleted,\n        setIsCardCompleted,\n        // Upload and personalization\n        referenceImages,\n        setReferenceImages,\n        referenceImageUrls,\n        setReferenceImageUrls,\n        imageTransformation,\n        setImageTransformation,\n        isUploading,\n        setIsUploading,\n        // Email and settings\n        userEmail,\n        setUserEmail,\n        isHandwrittenMessage,\n        setIsHandwrittenMessage,\n        isFrontBackOnly,\n        setIsFrontBackOnly,\n        selectedPaperSize,\n        setSelectedPaperSize,\n        // UI state\n        isTextareaExpanded,\n        setIsTextareaExpanded,\n        isMessageExpanded,\n        setIsMessageExpanded,\n        showSettings,\n        setShowSettings,\n        showTemplateGallery,\n        setShowTemplateGallery,\n        showPrintConfirmation,\n        setShowPrintConfirmation,\n        // Generation time\n        generationDuration,\n        setGenerationDuration,\n        currentElapsedTime,\n        setCurrentElapsedTime,\n        // Helper functions\n        formatGenerationTime,\n        formatCountdown,\n        sendThankYouEmail,\n        chatWithAI,\n        scrollToCardPreview,\n        // Time tracking functions\n        startElapsedTimeTracking,\n        stopElapsedTimeTracking,\n        // File handling functions\n        handleFileUpload,\n        handleRemoveReferenceImage,\n        // Message functions\n        handleGetMessageHelp,\n        addMessageToHistory,\n        undoMessage,\n        redoMessage,\n        // Job management\n        saveJobToStorage,\n        removeJobFromStorage,\n        checkJobStatus,\n        pollJobStatus,\n        checkPendingJobs,\n        // Main generation functions\n        handleGenerateCardAsync,\n        handleGenerateDraftCards,\n        handleGenerateFinalFromDraft,\n        // Additional state for message refinement\n        messageHistory,\n        setMessageHistory,\n        currentMessageIndex,\n        setCurrentMessageIndex,\n        refinementPrompt,\n        setRefinementPrompt,\n        isRefiningMessage,\n        setIsRefiningMessage,\n        showRefinementBox,\n        setShowRefinementBox,\n        // Template state\n        showTemplateCustomization,\n        setShowTemplateCustomization,\n        selectedTemplate,\n        setSelectedTemplate,\n        templateCustomizations,\n        setTemplateCustomizations,\n        templateSearchQuery,\n        setTemplateSearchQuery,\n        isSearchingTemplates,\n        setIsSearchingTemplates,\n        aiFilteredCards,\n        setAiFilteredCards,\n        searchMode,\n        setSearchMode,\n        textFilteredCards,\n        setTextFilteredCards,\n        showPrompts,\n        setShowPrompts,\n        // Print state\n        printOption,\n        setPrintOption,\n        // Additional draft mode state - removed duplicates\n        // Additional upload state\n        handwritingSample,\n        setHandwritingSample,\n        handwritingSampleUrl,\n        setHandwritingSampleUrl,\n        // Job tracking\n        currentJobId,\n        setCurrentJobId,\n        countdown,\n        setCountdown,\n        countdownInterval,\n        setCountdownInterval,\n        // Section loading states\n        sectionLoadingStates,\n        setSectionLoadingStates,\n        // Fast preview mode\n        fastPreviewMode,\n        setFastPreviewMode,\n        // Additional tracking\n        currentCardId,\n        setCurrentCardId,\n        isInitialLoadComplete,\n        setIsInitialLoadComplete,\n        // Elapsed time tracking\n        generationStartTime,\n        setGenerationStartTime,\n        elapsedTimeInterval,\n        setElapsedTimeInterval,\n        // Constants for UI\n        artisticStyles,\n        paperSizes\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useCardStudio.ts\n"));

/***/ })

});