"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/wizard/page",{

/***/ "(app-pages-browser)/./hooks/cardStudio/useCardGeneration.ts":
/*!***********************************************!*\
  !*** ./hooks/cardStudio/useCardGeneration.ts ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCardGeneration: function() { return /* binding */ useCardGeneration; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/promptGenerator */ \"(app-pages-browser)/./lib/promptGenerator.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./hooks/cardStudio/constants.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./hooks/cardStudio/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ useCardGeneration auto */ \n\n\n\n\n\nfunction useCardGeneration(props) {\n    const [isGenerating, setIsGenerating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [generatedCard, setGeneratedCard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generatedCards, setGeneratedCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedCardIndex, setSelectedCardIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isCardCompleted, setIsCardCompleted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [generationProgress, setGenerationProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [currentCardId, setCurrentCardId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generationDuration, setGenerationDuration] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Handle final card completion\n    const handleFinalCardCompletion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (cardData)=>{\n        console.log(\"\\uD83C\\uDFAF handleFinalCardCompletion called with cardData:\", cardData);\n        console.log(\"\\uD83C\\uDFAF Current userEmail state:\", props.userEmail);\n        console.log(\"\\uD83C\\uDFAF Current states:\", {\n            isGenerating,\n            isCardCompleted,\n            generatedCard: generatedCard ? \"Present\" : \"None\"\n        });\n        let cardWithQR = {\n            ...cardData\n        };\n        // Ensure the card has a valid createdAt date\n        if (!cardWithQR.createdAt) {\n            cardWithQR.createdAt = new Date();\n        } else if (typeof cardWithQR.createdAt === \"string\" || typeof cardWithQR.createdAt === \"number\") {\n            cardWithQR.createdAt = new Date(cardWithQR.createdAt);\n        }\n        // Ensure the card has a valid ID\n        if (!cardWithQR.id) {\n            cardWithQR.id = \"card-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n        }\n        // Add message data for handwritten overlay\n        if (props.isHandwrittenMessage) {\n            cardWithQR.message = props.finalCardMessage;\n            cardWithQR.isHandwrittenMessage = true;\n            // TODO: Add handwriting style preference when implemented in UI\n            cardWithQR.handwritingStyle = \"caveat\"; // Default for now\n        }\n        console.log(\"\\uD83D\\uDD04 Final card data prepared:\", cardWithQR);\n        // Note: QR code overlay is now handled automatically by the backend\n        console.log(\"✅ Card completion processing finished - QR codes handled by backend\");\n        console.log(\"\\uD83C\\uDFAF Setting final card state:\", cardWithQR);\n        // Set the card states\n        setGeneratedCard(cardWithQR);\n        setGeneratedCards([\n            cardWithQR\n        ]);\n        setSelectedCardIndex(0);\n        setIsCardCompleted(true);\n        setIsGenerating(false);\n        props.setIsGeneratingFinalCard(false);\n        props.setIsDraftMode(false);\n        props.setDraftCompletionShown(false);\n        props.setDraftCompletionCount(0);\n        console.log(\"\\uD83C\\uDFAF Card states updated - isCardCompleted:\", true, \"generatedCard:\", cardWithQR);\n        // Don't clear the progress message here - it will be set by the WebSocket handler\n        // setGenerationProgress(\"\");\n        // Scroll to card preview\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.scrollToCardPreview)();\n        // Capture generation time from backend\n        if (cardData.generationTimeSeconds) {\n            setGenerationDuration(cardData.generationTimeSeconds);\n        }\n        // Stop elapsed time tracking\n        props.stopElapsedTimeTracking();\n        // Set final progress after all states are updated\n        // Use a timeout to ensure React has processed all state updates\n        setTimeout(()=>{\n            setGenerationProgress(\"Generation complete! (100%)\");\n        }, 100);\n        sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDF89 Your card is ready!\");\n        // Show email confirmation toast if email is provided\n        if (props.userEmail.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"✉️ Card sent to \".concat(props.userEmail), {\n                duration: 5000\n            });\n        }\n        // Email notifications are handled by the backend\n        console.log(\"\\uD83D\\uDCE7 Email sending disabled - backend handles email notifications\");\n        console.log(\"✅ Final card completion process finished successfully\");\n        console.log(\"✅ Final states:\", {\n            isCardCompleted: true,\n            generatedCard: cardWithQR\n        });\n    }, [\n        props,\n        isGenerating,\n        isCardCompleted,\n        generatedCard\n    ]);\n    // Main card generation function\n    const handleGenerateCardAsync = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        const { userEmail, selectedType, customCardType, selectedTone, selectedArtisticStyle, customStyleDescription, selectedImageModel, referenceImageUrls, prompt, toField, fromField, finalCardMessage, isHandwrittenMessage, isFrontBackOnly, selectedPaperSize, numberOfCards, saveJobToStorage, subscribeToJob, startElapsedTimeTracking, setCurrentJobId, setIsDraftMode, setDraftCards, setSelectedDraftIndex, setIsGeneratingFinalCard, setPreviewingDraftIndex, setDraftCompletionShown, setDraftCompletionCount } = props;\n        if (!userEmail.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter your email address\");\n            return;\n        }\n        // Basic email validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(userEmail)) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter a valid email address\");\n            return;\n        }\n        // Validate custom style if selected\n        if (selectedArtisticStyle === \"custom\" && !customStyleDescription.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please describe your custom artistic style\");\n            return;\n        }\n        // Validate reference images with model compatibility\n        if (referenceImageUrls.length > 0 && selectedImageModel !== \"gpt-image-1\") {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Reference photos are only supported with GPT Image 1 model. Please switch to GPT Image 1 in Advanced Options or remove reference photos.\");\n            return;\n        }\n        // Clear all draft mode states to prevent UI conflicts\n        setIsDraftMode(false);\n        setDraftCards([\n            null,\n            null,\n            null,\n            null,\n            null\n        ]);\n        setSelectedDraftIndex(-1);\n        setIsGeneratingFinalCard(false);\n        setPreviewingDraftIndex(-1);\n        setDraftCompletionShown(false);\n        setDraftCompletionCount(0);\n        // Clear any existing card states\n        setGeneratedCards([]);\n        setGeneratedCard(null);\n        setSelectedCardIndex(0);\n        setCurrentCardId(null);\n        setIsCardCompleted(false);\n        // Stop any existing timers first\n        props.stopElapsedTimeTracking();\n        setIsGenerating(true);\n        startElapsedTimeTracking(\"final\");\n        setGenerationProgress(\"Creating your personalized card...\");\n        try {\n            // Create job tracking\n            const jobId = (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n            setCurrentJobId(jobId);\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = _constants__WEBPACK_IMPORTED_MODULE_3__.cardTones.find((tone)=>tone.id === selectedTone);\n            let messageContent = finalCardMessage;\n            // Handle message generation if needed\n            if (isHandwrittenMessage) {\n                messageContent = \"[Blank space for handwritten message]\";\n            } else if (!messageContent.trim() && !isFrontBackOnly) {\n                setGenerationProgress(\"✍️ Writing the perfect message...\");\n                const autoMessagePrompt = \"Create a heartfelt message for a \".concat(cardTypeForPrompt, ' greeting card.\\n\\nCard Theme/Description: \"').concat(prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"), '\"\\n').concat(toField ? \"Recipient: \".concat(toField) : \"Recipient: [not specified]\", \"\\n\").concat(fromField ? \"Sender: \".concat(fromField) : \"Sender: [not specified]\", \"\\n\\nInstructions:\\n- Write a message that feels personal and genuine\\n- Keep it concise but meaningful (2-4 sentences ideal)\\n- Make it feel authentic, not generic\\n- Keep content family-friendly and appropriate for all ages\\n- \").concat(fromField ? 'End the message with a signature line like \"Love, '.concat(fromField, '\" or \"- ').concat(fromField, '\" or similar, naturally integrated into the message.') : \"\", \"\\n\\nReturn ONLY the message text that should appear inside the card.\\n\\nIMPORTANT: Wrap your final message in <MESSAGE> </MESSAGE> tags.\");\n                const generatedMessage = await (0,_utils__WEBPACK_IMPORTED_MODULE_4__.chatWithAI)(autoMessagePrompt, {\n                    model: \"gemini-2.5-pro\",\n                    includeThoughts: false\n                });\n                if (generatedMessage === null || generatedMessage === void 0 ? void 0 : generatedMessage.trim()) {\n                    const messageMatch = generatedMessage.match(/<MESSAGE>([\\s\\S]*?)<\\/MESSAGE>/);\n                    if (messageMatch && messageMatch[1]) {\n                        messageContent = messageMatch[1].trim();\n                    }\n                }\n            }\n            // Generate style and paper config\n            const selectedStyle = _constants__WEBPACK_IMPORTED_MODULE_3__.artisticStyles.find((style)=>style.id === selectedArtisticStyle);\n            const styleModifier = selectedArtisticStyle === \"custom\" ? customStyleDescription : (selectedStyle === null || selectedStyle === void 0 ? void 0 : selectedStyle.promptModifier) || \"\";\n            const paperConfig = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize) || _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes[0];\n            setGenerationProgress(\"\\uD83C\\uDFA8 Creating artistic vision for your card...\");\n            // Use PromptGenerator for card prompts\n            const cardConfig = {\n                cardType: selectedType,\n                customCardType: customCardType,\n                tone: selectedTone,\n                toneDescription: (selectedToneObj === null || selectedToneObj === void 0 ? void 0 : selectedToneObj.description.toLowerCase()) || \"heartfelt and sincere\",\n                theme: prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"),\n                toField: toField,\n                fromField: fromField,\n                relationshipField: props.relationshipField,\n                message: messageContent,\n                isHandwrittenMessage: isHandwrittenMessage,\n                artisticStyle: selectedStyle,\n                referenceImageUrls: referenceImageUrls,\n                photoReferences: props.photoReferences,\n                isFrontBackOnly: isFrontBackOnly,\n                selectedImageModel: selectedImageModel\n            };\n            const generatedPrompts = _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.generateCardPrompts(cardConfig);\n            // Apply reference photo enhancements for GPT-1\n            if (referenceImageUrls.length > 0 && selectedImageModel === \"gpt-1\") {\n                generatedPrompts.frontCover = _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.enhancePromptWithReferencePhotos(generatedPrompts.frontCover, true, selectedImageModel);\n            }\n            const formattedPrompts = {\n                frontCover: generatedPrompts.frontCover,\n                backCover: generatedPrompts.backCover,\n                ...isFrontBackOnly ? {} : {\n                    leftInterior: generatedPrompts.leftInterior,\n                    rightInterior: generatedPrompts.rightInterior\n                }\n            };\n            if (!formattedPrompts || !formattedPrompts.frontCover) {\n                throw new Error(\"Failed to generate image prompts\");\n            }\n            // Save job data\n            const jobData = {\n                prompt: prompt || \"A beautiful \".concat(cardTypeForPrompt, \" card\"),\n                selectedType,\n                customCardType,\n                selectedTone,\n                finalCardMessage: messageContent,\n                toField,\n                fromField,\n                userEmail,\n                selectedArtisticStyle,\n                customStyleDescription,\n                selectedImageModel,\n                isFrontBackOnly,\n                numberOfCards,\n                selectedPaperSize,\n                prompts: formattedPrompts,\n                paperConfig\n            };\n            saveJobToStorage(jobId, jobData);\n            setGenerationProgress(\"\\uD83D\\uDE80 Starting background generation...\");\n            // Prepare input images for reference photo support\n            const inputImages = [];\n            if (referenceImageUrls.length > 0 && selectedImageModel === \"gpt-image-1\") {\n                inputImages.push(...referenceImageUrls);\n            }\n            const response = await fetch(\"/api/generate-card-async\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    jobId,\n                    prompts: formattedPrompts,\n                    config: {\n                        userNumber: \"+17145986105\",\n                        modelVersion: selectedImageModel,\n                        aspectRatio: paperConfig.aspectRatio,\n                        quality: \"high\",\n                        outputFormat: \"jpeg\",\n                        outputCompression: 100,\n                        moderation: \"low\",\n                        dimensions: paperConfig.dimensions,\n                        isFrontBackOnly,\n                        userEmail,\n                        cardType: cardTypeForPrompt,\n                        toField,\n                        fromField,\n                        isDraftMode: false,\n                        ...inputImages.length > 0 && {\n                            input_images: inputImages,\n                            input_images_mode: \"front_cover_only\"\n                        },\n                        // Include message data for handwritten overlay\n                        ...isHandwrittenMessage && {\n                            message: finalCardMessage,\n                            isHandwrittenMessage: true,\n                            handwritingStyle: \"caveat\" // Default for now\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server error: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status !== \"processing\") {\n                throw new Error(result.message || \"Failed to start card generation\");\n            }\n            setGenerationProgress(\"✨ Bringing your vision to life...\");\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDF89 Card generation started!\");\n            // Subscribe to WebSocket updates for real-time progress\n            subscribeToJob(jobId);\n        } catch (error) {\n            console.error(\"Card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to generate card. Please try again.\");\n            if (currentCardId) {\n                props.removeJobFromStorage(currentCardId);\n                setCurrentCardId(null);\n            }\n            setIsGenerating(false);\n            setGenerationProgress(\"\");\n            props.stopElapsedTimeTracking();\n        }\n    }, [\n        props,\n        currentCardId\n    ]);\n    return {\n        isGenerating,\n        setIsGenerating,\n        generatedCard,\n        setGeneratedCard,\n        generatedCards,\n        setGeneratedCards,\n        selectedCardIndex,\n        setSelectedCardIndex,\n        isCardCompleted,\n        setIsCardCompleted,\n        generationProgress,\n        setGenerationProgress,\n        currentCardId,\n        setCurrentCardId,\n        generationDuration,\n        setGenerationDuration,\n        handleGenerateCardAsync,\n        handleFinalCardCompletion\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL2NhcmRTdHVkaW8vdXNlQ2FyZEdlbmVyYXRpb24udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7dUVBRThDO0FBQ2Y7QUFDSztBQUNnQztBQUMrQjtBQUN0QjtBQXlDdEUsU0FBU1csa0JBQWtCQyxLQUEwQjtJQUMxRCxNQUFNLENBQUNDLGNBQWNDLGdCQUFnQixHQUFHZCwrQ0FBUUEsQ0FBQztJQUNqRCxNQUFNLENBQUNlLGVBQWVDLGlCQUFpQixHQUFHaEIsK0NBQVFBLENBQXVCO0lBQ3pFLE1BQU0sQ0FBQ2lCLGdCQUFnQkMsa0JBQWtCLEdBQUdsQiwrQ0FBUUEsQ0FBa0IsRUFBRTtJQUN4RSxNQUFNLENBQUNtQixtQkFBbUJDLHFCQUFxQixHQUFHcEIsK0NBQVFBLENBQVM7SUFDbkUsTUFBTSxDQUFDcUIsaUJBQWlCQyxtQkFBbUIsR0FBR3RCLCtDQUFRQSxDQUFVO0lBQ2hFLE1BQU0sQ0FBQ3VCLG9CQUFvQkMsc0JBQXNCLEdBQUd4QiwrQ0FBUUEsQ0FBUztJQUNyRSxNQUFNLENBQUN5QixlQUFlQyxpQkFBaUIsR0FBRzFCLCtDQUFRQSxDQUFnQjtJQUNsRSxNQUFNLENBQUMyQixvQkFBb0JDLHNCQUFzQixHQUFHNUIsK0NBQVFBLENBQWdCO0lBRTVFLCtCQUErQjtJQUMvQixNQUFNNkIsNEJBQTRCNUIsa0RBQVdBLENBQUMsT0FBTzZCO1FBQ25EQyxRQUFRQyxHQUFHLENBQUMsZ0VBQXNERjtRQUNsRUMsUUFBUUMsR0FBRyxDQUFDLHlDQUErQnBCLE1BQU1xQixTQUFTO1FBQzFERixRQUFRQyxHQUFHLENBQUMsZ0NBQXNCO1lBQ2hDbkI7WUFDQVE7WUFDQU4sZUFBZUEsZ0JBQWdCLFlBQVk7UUFDN0M7UUFDQSxJQUFJbUIsYUFBYTtZQUFFLEdBQUdKLFFBQVE7UUFBQztRQUUvQiw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDSSxXQUFXQyxTQUFTLEVBQUU7WUFDekJELFdBQVdDLFNBQVMsR0FBRyxJQUFJQztR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QWhCSyxTQUFTb0IsTUFBTTtZQUNsRDtZQUVBLE1BQU1DLFNBQVMsTUFBTXJCLFNBQVNzQixJQUFJO1lBRWxDLElBQUlELE9BQU9ELE1BQU0sS0FBSyxjQUFjO2dCQUNsQyxNQUFNLElBQUl6QixNQUFNMEIsT0FBT25HLE9BQU8sSUFBSTtZQUNwQztZQUVBcEIsc0JBQXNCO1lBQ3RCdEIseUNBQUtBLENBQUNvRCxPQUFPLENBQUM7WUFFZCx3REFBd0Q7WUFDeERrQixlQUFlVTtRQUVqQixFQUFFLE9BQU9KLE9BQU87WUFDZC9DLFFBQVErQyxLQUFLLENBQUMsMEJBQTBCQTtZQUN4QzVFLHlDQUFLQSxDQUFDNEUsS0FBSyxDQUFDO1lBRVosSUFBSXJELGVBQWU7Z0JBQ2pCYixNQUFNcUksb0JBQW9CLENBQUN4SDtnQkFDM0JDLGlCQUFpQjtZQUNuQjtZQUVBWixnQkFBZ0I7WUFDaEJVLHNCQUFzQjtZQUN0QlosTUFBTXdDLHVCQUF1QjtRQUMvQjtJQUNGLEdBQUc7UUFBQ3hDO1FBQU9hO0tBQWM7SUFFekIsT0FBTztRQUNMWjtRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBNkI7UUFDQTVCO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ob29rcy9jYXJkU3R1ZGlvL3VzZUNhcmRHZW5lcmF0aW9uLnRzPzA1YWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdG9hc3QgfSBmcm9tIFwic29ubmVyXCI7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IFByb21wdEdlbmVyYXRvciwgQ2FyZENvbmZpZyB9IGZyb20gJ0AvbGliL3Byb21wdEdlbmVyYXRvcic7XG5pbXBvcnQgeyBHZW5lcmF0ZWRDYXJkLCBjYXJkVG9uZXMsIGFydGlzdGljU3R5bGVzLCBwYXBlclNpemVzLCBQaG90b1JlZmVyZW5jZSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNoYXRXaXRoQUksIHNlbmRUaGFua1lvdUVtYWlsLCBzY3JvbGxUb0NhcmRQcmV2aWV3IH0gZnJvbSAnLi91dGlscyc7XG5cbmludGVyZmFjZSBDYXJkR2VuZXJhdGlvblByb3BzIHtcbiAgLy8gRm9ybSBkYXRhXG4gIHNlbGVjdGVkVHlwZTogc3RyaW5nO1xuICBjdXN0b21DYXJkVHlwZTogc3RyaW5nO1xuICBzZWxlY3RlZFRvbmU6IHN0cmluZztcbiAgc2VsZWN0ZWRBcnRpc3RpY1N0eWxlOiBzdHJpbmc7XG4gIGN1c3RvbVN0eWxlRGVzY3JpcHRpb246IHN0cmluZztcbiAgc2VsZWN0ZWRJbWFnZU1vZGVsOiBzdHJpbmc7XG4gIHNlbGVjdGVkUGFwZXJTaXplOiBzdHJpbmc7XG4gIHByb21wdDogc3RyaW5nO1xuICB0b0ZpZWxkOiBzdHJpbmc7XG4gIGZyb21GaWVsZDogc3RyaW5nO1xuICByZWxhdGlvbnNoaXBGaWVsZDogc3RyaW5nO1xuICB1c2VyRW1haWw6IHN0cmluZztcbiAgZmluYWxDYXJkTWVzc2FnZTogc3RyaW5nO1xuICBpc0hhbmR3cml0dGVuTWVzc2FnZTogYm9vbGVhbjtcbiAgaXNGcm9udEJhY2tPbmx5OiBib29sZWFuO1xuICByZWZlcmVuY2VJbWFnZVVybHM6IHN0cmluZ1tdO1xuICBwaG90b1JlZmVyZW5jZXM/OiBQaG90b1JlZmVyZW5jZVtdO1xuICBudW1iZXJPZkNhcmRzOiBudW1iZXI7XG4gIFxuICAvLyBKb2IgbWFuYWdlbWVudFxuICBzYXZlSm9iVG9TdG9yYWdlOiAoam9iSWQ6IHN0cmluZywgam9iRGF0YTogYW55KSA9PiB2b2lkO1xuICByZW1vdmVKb2JGcm9tU3RvcmFnZTogKGpvYklkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHN1YnNjcmliZVRvSm9iOiAoam9iSWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgc3RhcnRFbGFwc2VkVGltZVRyYWNraW5nOiAoam9iVHlwZT86ICdkcmFmdCcgfCAnZmluYWwnKSA9PiB2b2lkO1xuICBzdG9wRWxhcHNlZFRpbWVUcmFja2luZzogKCkgPT4gdm9pZDtcbiAgc2V0Q3VycmVudEpvYklkOiAoaWQ6IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7XG4gIFxuICAvLyBEcmFmdCBzdGF0ZSBzZXR0ZXJzXG4gIHNldElzRHJhZnRNb2RlOiAodmFsdWU6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIHNldERyYWZ0Q2FyZHM6ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xuICBzZXRTZWxlY3RlZERyYWZ0SW5kZXg6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuICBzZXRJc0dlbmVyYXRpbmdGaW5hbENhcmQ6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2V0UHJldmlld2luZ0RyYWZ0SW5kZXg6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuICBzZXREcmFmdENvbXBsZXRpb25TaG93bjogKHZhbHVlOiBib29sZWFuKSA9PiB2b2lkO1xuICBzZXREcmFmdENvbXBsZXRpb25Db3VudDogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDYXJkR2VuZXJhdGlvbihwcm9wczogQ2FyZEdlbmVyYXRpb25Qcm9wcykge1xuICBjb25zdCBbaXNHZW5lcmF0aW5nLCBzZXRJc0dlbmVyYXRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZ2VuZXJhdGVkQ2FyZCwgc2V0R2VuZXJhdGVkQ2FyZF0gPSB1c2VTdGF0ZTxHZW5lcmF0ZWRDYXJkIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtnZW5lcmF0ZWRDYXJkcywgc2V0R2VuZXJhdGVkQ2FyZHNdID0gdXNlU3RhdGU8R2VuZXJhdGVkQ2FyZFtdPihbXSk7XG4gIGNvbnN0IFtzZWxlY3RlZENhcmRJbmRleCwgc2V0U2VsZWN0ZWRDYXJkSW5kZXhdID0gdXNlU3RhdGU8bnVtYmVyPigwKTtcbiAgY29uc3QgW2lzQ2FyZENvbXBsZXRlZCwgc2V0SXNDYXJkQ29tcGxldGVkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2dlbmVyYXRpb25Qcm9ncmVzcywgc2V0R2VuZXJhdGlvblByb2dyZXNzXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJcIik7XG4gIGNvbnN0IFtjdXJyZW50Q2FyZElkLCBzZXRDdXJyZW50Q2FyZElkXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbZ2VuZXJhdGlvbkR1cmF0aW9uLCBzZXRHZW5lcmF0aW9uRHVyYXRpb25dID0gdXNlU3RhdGU8bnVtYmVyIHwgbnVsbD4obnVsbCk7XG5cbiAgLy8gSGFuZGxlIGZpbmFsIGNhcmQgY29tcGxldGlvblxuICBjb25zdCBoYW5kbGVGaW5hbENhcmRDb21wbGV0aW9uID0gdXNlQ2FsbGJhY2soYXN5bmMgKGNhcmREYXRhOiBhbnkpID0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+OryBoYW5kbGVGaW5hbENhcmRDb21wbGV0aW9uIGNhbGxlZCB3aXRoIGNhcmREYXRhOicsIGNhcmREYXRhKTtcbiAgICBjb25zb2xlLmxvZygn8J+OryBDdXJyZW50IHVzZXJFbWFpbCBzdGF0ZTonLCBwcm9wcy51c2VyRW1haWwpO1xuICAgIGNvbnNvbGUubG9nKCfwn46vIEN1cnJlbnQgc3RhdGVzOicsIHtcbiAgICAgIGlzR2VuZXJhdGluZyxcbiAgICAgIGlzQ2FyZENvbXBsZXRlZCxcbiAgICAgIGdlbmVyYXRlZENhcmQ6IGdlbmVyYXRlZENhcmQgPyAnUHJlc2VudCcgOiAnTm9uZSdcbiAgICB9KTtcbiAgICBsZXQgY2FyZFdpdGhRUiA9IHsgLi4uY2FyZERhdGEgfTtcbiAgICBcbiAgICAvLyBFbnN1cmUgdGhlIGNhcmQgaGFzIGEgdmFsaWQgY3JlYXRlZEF0IGRhdGVcbiAgICBpZiAoIWNhcmRXaXRoUVIuY3JlYXRlZEF0KSB7XG4gICAgICBjYXJkV2l0aFFSLmNyZWF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2FyZFdpdGhRUi5jcmVhdGVkQXQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjYXJkV2l0aFFSLmNyZWF0ZWRBdCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNhcmRXaXRoUVIuY3JlYXRlZEF0ID0gbmV3IERhdGUoY2FyZFdpdGhRUi5jcmVhdGVkQXQpO1xuICAgIH1cbiAgICBcbiAgICAvLyBFbnN1cmUgdGhlIGNhcmQgaGFzIGEgdmFsaWQgSURcbiAgICBpZiAoIWNhcmRXaXRoUVIuaWQpIHtcbiAgICAgIGNhcmRXaXRoUVIuaWQgPSBgY2FyZC0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XG4gICAgfVxuICAgIFxuICAgIC8vIEFkZCBtZXNzYWdlIGRhdGEgZm9yIGhhbmR3cml0dGVuIG92ZXJsYXlcbiAgICBpZiAocHJvcHMuaXNIYW5kd3JpdHRlbk1lc3NhZ2UpIHtcbiAgICAgIGNhcmRXaXRoUVIubWVzc2FnZSA9IHByb3BzLmZpbmFsQ2FyZE1lc3NhZ2U7XG4gICAgICBjYXJkV2l0aFFSLmlzSGFuZHdyaXR0ZW5NZXNzYWdlID0gdHJ1ZTtcbiAgICAgIC8vIFRPRE86IEFkZCBoYW5kd3JpdGluZyBzdHlsZSBwcmVmZXJlbmNlIHdoZW4gaW1wbGVtZW50ZWQgaW4gVUlcbiAgICAgIGNhcmRXaXRoUVIuaGFuZHdyaXRpbmdTdHlsZSA9ICdjYXZlYXQnOyAvLyBEZWZhdWx0IGZvciBub3dcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/CflIQgRmluYWwgY2FyZCBkYXRhIHByZXBhcmVkOicsIGNhcmRXaXRoUVIpO1xuICAgIFxuICAgIC8vIE5vdGU6IFFSIGNvZGUgb3ZlcmxheSBpcyBub3cgaGFuZGxlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBiYWNrZW5kXG4gICAgY29uc29sZS5sb2coJ+KchSBDYXJkIGNvbXBsZXRpb24gcHJvY2Vzc2luZyBmaW5pc2hlZCAtIFFSIGNvZGVzIGhhbmRsZWQgYnkgYmFja2VuZCcpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn46vIFNldHRpbmcgZmluYWwgY2FyZCBzdGF0ZTonLCBjYXJkV2l0aFFSKTtcbiAgICBcbiAgICAvLyBTZXQgdGhlIGNhcmQgc3RhdGVzXG4gICAgc2V0R2VuZXJhdGVkQ2FyZChjYXJkV2l0aFFSKTtcbiAgICBzZXRHZW5lcmF0ZWRDYXJkcyhbY2FyZFdpdGhRUl0pO1xuICAgIHNldFNlbGVjdGVkQ2FyZEluZGV4KDApO1xuICAgIHNldElzQ2FyZENvbXBsZXRlZCh0cnVlKTtcbiAgICBzZXRJc0dlbmVyYXRpbmcoZmFsc2UpO1xuICAgIHByb3BzLnNldElzR2VuZXJhdGluZ0ZpbmFsQ2FyZChmYWxzZSk7XG4gICAgcHJvcHMuc2V0SXNEcmFmdE1vZGUoZmFsc2UpO1xuICAgIHByb3BzLnNldERyYWZ0Q29tcGxldGlvblNob3duKGZhbHNlKTtcbiAgICBwcm9wcy5zZXREcmFmdENvbXBsZXRpb25Db3VudCgwKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+OryBDYXJkIHN0YXRlcyB1cGRhdGVkIC0gaXNDYXJkQ29tcGxldGVkOicsIHRydWUsICdnZW5lcmF0ZWRDYXJkOicsIGNhcmRXaXRoUVIpO1xuICAgIC8vIERvbid0IGNsZWFyIHRoZSBwcm9ncmVzcyBtZXNzYWdlIGhlcmUgLSBpdCB3aWxsIGJlIHNldCBieSB0aGUgV2ViU29ja2V0IGhhbmRsZXJcbiAgICAvLyBzZXRHZW5lcmF0aW9uUHJvZ3Jlc3MoXCJcIik7XG4gICAgXG4gICAgLy8gU2Nyb2xsIHRvIGNhcmQgcHJldmlld1xuICAgIHNjcm9sbFRvQ2FyZFByZXZpZXcoKTtcbiAgICBcbiAgICAvLyBDYXB0dXJlIGdlbmVyYXRpb24gdGltZSBmcm9tIGJhY2tlbmRcbiAgICBpZiAoY2FyZERhdGEuZ2VuZXJhdGlvblRpbWVTZWNvbmRzKSB7XG4gICAgICBzZXRHZW5lcmF0aW9uRHVyYXRpb24oY2FyZERhdGEuZ2VuZXJhdGlvblRpbWVTZWNvbmRzKTtcbiAgICB9XG4gICAgXG4gICAgLy8gU3RvcCBlbGFwc2VkIHRpbWUgdHJhY2tpbmdcbiAgICBwcm9wcy5zdG9wRWxhcHNlZFRpbWVUcmFja2luZygpO1xuICAgIFxuICAgIC8vIFNldCBmaW5hbCBwcm9ncmVzcyBhZnRlciBhbGwgc3RhdGVzIGFyZSB1cGRhdGVkXG4gICAgLy8gVXNlIGEgdGltZW91dCB0byBlbnN1cmUgUmVhY3QgaGFzIHByb2Nlc3NlZCBhbGwgc3RhdGUgdXBkYXRlc1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0R2VuZXJhdGlvblByb2dyZXNzKFwiR2VuZXJhdGlvbiBjb21wbGV0ZSEgKDEwMCUpXCIpO1xuICAgIH0sIDEwMCk7XG4gICAgXG4gICAgdG9hc3Quc3VjY2VzcyhcIvCfjokgWW91ciBjYXJkIGlzIHJlYWR5IVwiKTtcbiAgICBcbiAgICAvLyBTaG93IGVtYWlsIGNvbmZpcm1hdGlvbiB0b2FzdCBpZiBlbWFpbCBpcyBwcm92aWRlZFxuICAgIGlmIChwcm9wcy51c2VyRW1haWwudHJpbSgpKSB7XG4gICAgICB0b2FzdC5zdWNjZXNzKGDinInvuI8gQ2FyZCBzZW50IHRvICR7cHJvcHMudXNlckVtYWlsfWAsIHtcbiAgICAgICAgZHVyYXRpb246IDUwMDAsXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gRW1haWwgbm90aWZpY2F0aW9ucyBhcmUgaGFuZGxlZCBieSB0aGUgYmFja2VuZFxuICAgIGNvbnNvbGUubG9nKCfwn5OnIEVtYWlsIHNlbmRpbmcgZGlzYWJsZWQgLSBiYWNrZW5kIGhhbmRsZXMgZW1haWwgbm90aWZpY2F0aW9ucycpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfinIUgRmluYWwgY2FyZCBjb21wbGV0aW9uIHByb2Nlc3MgZmluaXNoZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgY29uc29sZS5sb2coJ+KchSBGaW5hbCBzdGF0ZXM6Jywge1xuICAgICAgaXNDYXJkQ29tcGxldGVkOiB0cnVlLFxuICAgICAgZ2VuZXJhdGVkQ2FyZDogY2FyZFdpdGhRUlxuICAgIH0pO1xuICB9LCBbcHJvcHMsIGlzR2VuZXJhdGluZywgaXNDYXJkQ29tcGxldGVkLCBnZW5lcmF0ZWRDYXJkXSk7XG5cbiAgLy8gTWFpbiBjYXJkIGdlbmVyYXRpb24gZnVuY3Rpb25cbiAgY29uc3QgaGFuZGxlR2VuZXJhdGVDYXJkQXN5bmMgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlckVtYWlsLFxuICAgICAgc2VsZWN0ZWRUeXBlLFxuICAgICAgY3VzdG9tQ2FyZFR5cGUsXG4gICAgICBzZWxlY3RlZFRvbmUsXG4gICAgICBzZWxlY3RlZEFydGlzdGljU3R5bGUsXG4gICAgICBjdXN0b21TdHlsZURlc2NyaXB0aW9uLFxuICAgICAgc2VsZWN0ZWRJbWFnZU1vZGVsLFxuICAgICAgcmVmZXJlbmNlSW1hZ2VVcmxzLFxuICAgICAgcHJvbXB0LFxuICAgICAgdG9GaWVsZCxcbiAgICAgIGZyb21GaWVsZCxcbiAgICAgIGZpbmFsQ2FyZE1lc3NhZ2UsXG4gICAgICBpc0hhbmR3cml0dGVuTWVzc2FnZSxcbiAgICAgIGlzRnJvbnRCYWNrT25seSxcbiAgICAgIHNlbGVjdGVkUGFwZXJTaXplLFxuICAgICAgbnVtYmVyT2ZDYXJkcyxcbiAgICAgIHNhdmVKb2JUb1N0b3JhZ2UsXG4gICAgICBzdWJzY3JpYmVUb0pvYixcbiAgICAgIHN0YXJ0RWxhcHNlZFRpbWVUcmFja2luZyxcbiAgICAgIHNldEN1cnJlbnRKb2JJZCxcbiAgICAgIHNldElzRHJhZnRNb2RlLFxuICAgICAgc2V0RHJhZnRDYXJkcyxcbiAgICAgIHNldFNlbGVjdGVkRHJhZnRJbmRleCxcbiAgICAgIHNldElzR2VuZXJhdGluZ0ZpbmFsQ2FyZCxcbiAgICAgIHNldFByZXZpZXdpbmdEcmFmdEluZGV4LFxuICAgICAgc2V0RHJhZnRDb21wbGV0aW9uU2hvd24sXG4gICAgICBzZXREcmFmdENvbXBsZXRpb25Db3VudFxuICAgIH0gPSBwcm9wcztcblxuICAgIGlmICghdXNlckVtYWlsLnRyaW0oKSkge1xuICAgICAgdG9hc3QuZXJyb3IoXCJQbGVhc2UgZW50ZXIgeW91ciBlbWFpbCBhZGRyZXNzXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEJhc2ljIGVtYWlsIHZhbGlkYXRpb25cbiAgICBjb25zdCBlbWFpbFJlZ2V4ID0gL15bXlxcc0BdK0BbXlxcc0BdK1xcLlteXFxzQF0rJC87XG4gICAgaWYgKCFlbWFpbFJlZ2V4LnRlc3QodXNlckVtYWlsKSkge1xuICAgICAgdG9hc3QuZXJyb3IoXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIGN1c3RvbSBzdHlsZSBpZiBzZWxlY3RlZFxuICAgIGlmIChzZWxlY3RlZEFydGlzdGljU3R5bGUgPT09IFwiY3VzdG9tXCIgJiYgIWN1c3RvbVN0eWxlRGVzY3JpcHRpb24udHJpbSgpKSB7XG4gICAgICB0b2FzdC5lcnJvcihcIlBsZWFzZSBkZXNjcmliZSB5b3VyIGN1c3RvbSBhcnRpc3RpYyBzdHlsZVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSByZWZlcmVuY2UgaW1hZ2VzIHdpdGggbW9kZWwgY29tcGF0aWJpbGl0eVxuICAgIGlmIChyZWZlcmVuY2VJbWFnZVVybHMubGVuZ3RoID4gMCAmJiBzZWxlY3RlZEltYWdlTW9kZWwgIT09IFwiZ3B0LWltYWdlLTFcIikge1xuICAgICAgdG9hc3QuZXJyb3IoXCJSZWZlcmVuY2UgcGhvdG9zIGFyZSBvbmx5IHN1cHBvcnRlZCB3aXRoIEdQVCBJbWFnZSAxIG1vZGVsLiBQbGVhc2Ugc3dpdGNoIHRvIEdQVCBJbWFnZSAxIGluIEFkdmFuY2VkIE9wdGlvbnMgb3IgcmVtb3ZlIHJlZmVyZW5jZSBwaG90b3MuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENsZWFyIGFsbCBkcmFmdCBtb2RlIHN0YXRlcyB0byBwcmV2ZW50IFVJIGNvbmZsaWN0c1xuICAgIHNldElzRHJhZnRNb2RlKGZhbHNlKTtcbiAgICBzZXREcmFmdENhcmRzKFtudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsXSk7XG4gICAgc2V0U2VsZWN0ZWREcmFmdEluZGV4KC0xKTtcbiAgICBzZXRJc0dlbmVyYXRpbmdGaW5hbENhcmQoZmFsc2UpO1xuICAgIHNldFByZXZpZXdpbmdEcmFmdEluZGV4KC0xKTtcbiAgICBzZXREcmFmdENvbXBsZXRpb25TaG93bihmYWxzZSk7XG4gICAgc2V0RHJhZnRDb21wbGV0aW9uQ291bnQoMCk7XG4gICAgXG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGNhcmQgc3RhdGVzXG4gICAgc2V0R2VuZXJhdGVkQ2FyZHMoW10pO1xuICAgIHNldEdlbmVyYXRlZENhcmQobnVsbCk7XG4gICAgc2V0U2VsZWN0ZWRDYXJkSW5kZXgoMCk7XG4gICAgc2V0Q3VycmVudENhcmRJZChudWxsKTtcbiAgICBzZXRJc0NhcmRDb21wbGV0ZWQoZmFsc2UpO1xuXG4gICAgLy8gU3RvcCBhbnkgZXhpc3RpbmcgdGltZXJzIGZpcnN0XG4gICAgcHJvcHMuc3RvcEVsYXBzZWRUaW1lVHJhY2tpbmcoKTtcbiAgICBcbiAgICBzZXRJc0dlbmVyYXRpbmcodHJ1ZSk7XG4gICAgc3RhcnRFbGFwc2VkVGltZVRyYWNraW5nKCdmaW5hbCcpO1xuICAgIHNldEdlbmVyYXRpb25Qcm9ncmVzcyhcIkNyZWF0aW5nIHlvdXIgcGVyc29uYWxpemVkIGNhcmQuLi5cIik7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQ3JlYXRlIGpvYiB0cmFja2luZ1xuICAgICAgY29uc3Qgam9iSWQgPSB1dWlkdjQoKTtcbiAgICAgIHNldEN1cnJlbnRKb2JJZChqb2JJZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGNhcmRUeXBlRm9yUHJvbXB0ID0gc2VsZWN0ZWRUeXBlID09PSBcImN1c3RvbVwiID8gY3VzdG9tQ2FyZFR5cGUgOiBzZWxlY3RlZFR5cGU7XG4gICAgICBjb25zdCBzZWxlY3RlZFRvbmVPYmogPSBjYXJkVG9uZXMuZmluZCh0b25lID0+IHRvbmUuaWQgPT09IHNlbGVjdGVkVG9uZSk7XG4gICAgICBsZXQgbWVzc2FnZUNvbnRlbnQgPSBmaW5hbENhcmRNZXNzYWdlO1xuICAgICAgXG4gICAgICAvLyBIYW5kbGUgbWVzc2FnZSBnZW5lcmF0aW9uIGlmIG5lZWRlZFxuICAgICAgaWYgKGlzSGFuZHdyaXR0ZW5NZXNzYWdlKSB7XG4gICAgICAgIG1lc3NhZ2VDb250ZW50ID0gXCJbQmxhbmsgc3BhY2UgZm9yIGhhbmR3cml0dGVuIG1lc3NhZ2VdXCI7XG4gICAgICB9IGVsc2UgaWYgKCFtZXNzYWdlQ29udGVudC50cmltKCkgJiYgIWlzRnJvbnRCYWNrT25seSkge1xuICAgICAgICBzZXRHZW5lcmF0aW9uUHJvZ3Jlc3MoXCLinI3vuI8gV3JpdGluZyB0aGUgcGVyZmVjdCBtZXNzYWdlLi4uXCIpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYXV0b01lc3NhZ2VQcm9tcHQgPSBgQ3JlYXRlIGEgaGVhcnRmZWx0IG1lc3NhZ2UgZm9yIGEgJHtjYXJkVHlwZUZvclByb21wdH0gZ3JlZXRpbmcgY2FyZC5cblxuQ2FyZCBUaGVtZS9EZXNjcmlwdGlvbjogXCIke3Byb21wdCB8fCBgQSBiZWF1dGlmdWwgJHtjYXJkVHlwZUZvclByb21wdH0gY2FyZGB9XCJcbiR7dG9GaWVsZCA/IGBSZWNpcGllbnQ6ICR7dG9GaWVsZH1gIDogXCJSZWNpcGllbnQ6IFtub3Qgc3BlY2lmaWVkXVwifVxuJHtmcm9tRmllbGQgPyBgU2VuZGVyOiAke2Zyb21GaWVsZH1gIDogXCJTZW5kZXI6IFtub3Qgc3BlY2lmaWVkXVwifVxuXG5JbnN0cnVjdGlvbnM6XG4tIFdyaXRlIGEgbWVzc2FnZSB0aGF0IGZlZWxzIHBlcnNvbmFsIGFuZCBnZW51aW5lXG4tIEtlZXAgaXQgY29uY2lzZSBidXQgbWVhbmluZ2Z1bCAoMi00IHNlbnRlbmNlcyBpZGVhbClcbi0gTWFrZSBpdCBmZWVsIGF1dGhlbnRpYywgbm90IGdlbmVyaWNcbi0gS2VlcCBjb250ZW50IGZhbWlseS1mcmllbmRseSBhbmQgYXBwcm9wcmlhdGUgZm9yIGFsbCBhZ2VzXG4tICR7ZnJvbUZpZWxkID8gYEVuZCB0aGUgbWVzc2FnZSB3aXRoIGEgc2lnbmF0dXJlIGxpbmUgbGlrZSBcIkxvdmUsICR7ZnJvbUZpZWxkfVwiIG9yIFwiLSAke2Zyb21GaWVsZH1cIiBvciBzaW1pbGFyLCBuYXR1cmFsbHkgaW50ZWdyYXRlZCBpbnRvIHRoZSBtZXNzYWdlLmAgOiBcIlwifVxuXG5SZXR1cm4gT05MWSB0aGUgbWVzc2FnZSB0ZXh0IHRoYXQgc2hvdWxkIGFwcGVhciBpbnNpZGUgdGhlIGNhcmQuXG5cbklNUE9SVEFOVDogV3JhcCB5b3VyIGZpbmFsIG1lc3NhZ2UgaW4gPE1FU1NBR0U+IDwvTUVTU0FHRT4gdGFncy5gO1xuXG4gICAgICAgIGNvbnN0IGdlbmVyYXRlZE1lc3NhZ2UgPSBhd2FpdCBjaGF0V2l0aEFJKGF1dG9NZXNzYWdlUHJvbXB0LCB7XG4gICAgICAgICAgbW9kZWw6IFwiZ2VtaW5pLTIuNS1wcm9cIixcbiAgICAgICAgICBpbmNsdWRlVGhvdWdodHM6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKGdlbmVyYXRlZE1lc3NhZ2U/LnRyaW0oKSkge1xuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VNYXRjaCA9IGdlbmVyYXRlZE1lc3NhZ2UubWF0Y2goLzxNRVNTQUdFPihbXFxzXFxTXSo/KTxcXC9NRVNTQUdFPi8pO1xuICAgICAgICAgIGlmIChtZXNzYWdlTWF0Y2ggJiYgbWVzc2FnZU1hdGNoWzFdKSB7XG4gICAgICAgICAgICBtZXNzYWdlQ29udGVudCA9IG1lc3NhZ2VNYXRjaFsxXS50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEdlbmVyYXRlIHN0eWxlIGFuZCBwYXBlciBjb25maWdcbiAgICAgIGNvbnN0IHNlbGVjdGVkU3R5bGUgPSBhcnRpc3RpY1N0eWxlcy5maW5kKHN0eWxlID0+IHN0eWxlLmlkID09PSBzZWxlY3RlZEFydGlzdGljU3R5bGUpO1xuICAgICAgY29uc3Qgc3R5bGVNb2RpZmllciA9IHNlbGVjdGVkQXJ0aXN0aWNTdHlsZSA9PT0gXCJjdXN0b21cIiBcbiAgICAgICAgPyBjdXN0b21TdHlsZURlc2NyaXB0aW9uIFxuICAgICAgICA6IHNlbGVjdGVkU3R5bGU/LnByb21wdE1vZGlmaWVyIHx8IFwiXCI7XG5cbiAgICAgIGNvbnN0IHBhcGVyQ29uZmlnID0gcGFwZXJTaXplcy5maW5kKHNpemUgPT4gc2l6ZS5pZCA9PT0gc2VsZWN0ZWRQYXBlclNpemUpIHx8IHBhcGVyU2l6ZXNbMF07XG5cbiAgICAgIHNldEdlbmVyYXRpb25Qcm9ncmVzcyhcIvCfjqggQ3JlYXRpbmcgYXJ0aXN0aWMgdmlzaW9uIGZvciB5b3VyIGNhcmQuLi5cIik7XG5cbiAgICAgIC8vIFVzZSBQcm9tcHRHZW5lcmF0b3IgZm9yIGNhcmQgcHJvbXB0c1xuICAgICAgY29uc3QgY2FyZENvbmZpZzogQ2FyZENvbmZpZyA9IHtcbiAgICAgICAgY2FyZFR5cGU6IHNlbGVjdGVkVHlwZSxcbiAgICAgICAgY3VzdG9tQ2FyZFR5cGU6IGN1c3RvbUNhcmRUeXBlLFxuICAgICAgICB0b25lOiBzZWxlY3RlZFRvbmUsXG4gICAgICAgIHRvbmVEZXNjcmlwdGlvbjogc2VsZWN0ZWRUb25lT2JqPy5kZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpIHx8IFwiaGVhcnRmZWx0IGFuZCBzaW5jZXJlXCIsXG4gICAgICAgIHRoZW1lOiBwcm9tcHQgfHwgYEEgYmVhdXRpZnVsICR7Y2FyZFR5cGVGb3JQcm9tcHR9IGNhcmRgLFxuICAgICAgICB0b0ZpZWxkOiB0b0ZpZWxkLFxuICAgICAgICBmcm9tRmllbGQ6IGZyb21GaWVsZCxcbiAgICAgICAgcmVsYXRpb25zaGlwRmllbGQ6IHByb3BzLnJlbGF0aW9uc2hpcEZpZWxkLFxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlQ29udGVudCxcbiAgICAgICAgaXNIYW5kd3JpdHRlbk1lc3NhZ2U6IGlzSGFuZHdyaXR0ZW5NZXNzYWdlLFxuICAgICAgICBhcnRpc3RpY1N0eWxlOiBzZWxlY3RlZFN0eWxlLFxuICAgICAgICByZWZlcmVuY2VJbWFnZVVybHM6IHJlZmVyZW5jZUltYWdlVXJscyxcbiAgICAgICAgcGhvdG9SZWZlcmVuY2VzOiBwcm9wcy5waG90b1JlZmVyZW5jZXMsXG4gICAgICAgIGlzRnJvbnRCYWNrT25seTogaXNGcm9udEJhY2tPbmx5LFxuICAgICAgICBzZWxlY3RlZEltYWdlTW9kZWw6IHNlbGVjdGVkSW1hZ2VNb2RlbFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZ2VuZXJhdGVkUHJvbXB0cyA9IFByb21wdEdlbmVyYXRvci5nZW5lcmF0ZUNhcmRQcm9tcHRzKGNhcmRDb25maWcpO1xuXG4gICAgICAvLyBBcHBseSByZWZlcmVuY2UgcGhvdG8gZW5oYW5jZW1lbnRzIGZvciBHUFQtMVxuICAgICAgaWYgKHJlZmVyZW5jZUltYWdlVXJscy5sZW5ndGggPiAwICYmIHNlbGVjdGVkSW1hZ2VNb2RlbCA9PT0gXCJncHQtMVwiKSB7XG4gICAgICAgIGdlbmVyYXRlZFByb21wdHMuZnJvbnRDb3ZlciA9IFByb21wdEdlbmVyYXRvci5lbmhhbmNlUHJvbXB0V2l0aFJlZmVyZW5jZVBob3RvcyhcbiAgICAgICAgICBnZW5lcmF0ZWRQcm9tcHRzLmZyb250Q292ZXIsIFxuICAgICAgICAgIHRydWUsIFxuICAgICAgICAgIHNlbGVjdGVkSW1hZ2VNb2RlbFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmb3JtYXR0ZWRQcm9tcHRzID0ge1xuICAgICAgICBmcm9udENvdmVyOiBnZW5lcmF0ZWRQcm9tcHRzLmZyb250Q292ZXIsXG4gICAgICAgIGJhY2tDb3ZlcjogZ2VuZXJhdGVkUHJvbXB0cy5iYWNrQ292ZXIsXG4gICAgICAgIC4uLihpc0Zyb250QmFja09ubHkgPyB7fSA6IHtcbiAgICAgICAgICBsZWZ0SW50ZXJpb3I6IGdlbmVyYXRlZFByb21wdHMubGVmdEludGVyaW9yLFxuICAgICAgICAgIHJpZ2h0SW50ZXJpb3I6IGdlbmVyYXRlZFByb21wdHMucmlnaHRJbnRlcmlvclxuICAgICAgICB9KVxuICAgICAgfTtcblxuICAgICAgaWYgKCFmb3JtYXR0ZWRQcm9tcHRzIHx8ICFmb3JtYXR0ZWRQcm9tcHRzLmZyb250Q292ZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdlbmVyYXRlIGltYWdlIHByb21wdHNcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIFNhdmUgam9iIGRhdGFcbiAgICAgIGNvbnN0IGpvYkRhdGEgPSB7XG4gICAgICAgIHByb21wdDogcHJvbXB0IHx8IGBBIGJlYXV0aWZ1bCAke2NhcmRUeXBlRm9yUHJvbXB0fSBjYXJkYCxcbiAgICAgICAgc2VsZWN0ZWRUeXBlLFxuICAgICAgICBjdXN0b21DYXJkVHlwZSxcbiAgICAgICAgc2VsZWN0ZWRUb25lLFxuICAgICAgICBmaW5hbENhcmRNZXNzYWdlOiBtZXNzYWdlQ29udGVudCxcbiAgICAgICAgdG9GaWVsZCxcbiAgICAgICAgZnJvbUZpZWxkLFxuICAgICAgICB1c2VyRW1haWwsXG4gICAgICAgIHNlbGVjdGVkQXJ0aXN0aWNTdHlsZSxcbiAgICAgICAgY3VzdG9tU3R5bGVEZXNjcmlwdGlvbixcbiAgICAgICAgc2VsZWN0ZWRJbWFnZU1vZGVsLFxuICAgICAgICBpc0Zyb250QmFja09ubHksXG4gICAgICAgIG51bWJlck9mQ2FyZHMsXG4gICAgICAgIHNlbGVjdGVkUGFwZXJTaXplLFxuICAgICAgICBwcm9tcHRzOiBmb3JtYXR0ZWRQcm9tcHRzLFxuICAgICAgICBwYXBlckNvbmZpZ1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgc2F2ZUpvYlRvU3RvcmFnZShqb2JJZCwgam9iRGF0YSk7XG4gICAgICBcbiAgICAgIHNldEdlbmVyYXRpb25Qcm9ncmVzcyhcIvCfmoAgU3RhcnRpbmcgYmFja2dyb3VuZCBnZW5lcmF0aW9uLi4uXCIpO1xuICAgICAgXG4gICAgICAvLyBQcmVwYXJlIGlucHV0IGltYWdlcyBmb3IgcmVmZXJlbmNlIHBob3RvIHN1cHBvcnRcbiAgICAgIGNvbnN0IGlucHV0SW1hZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgaWYgKHJlZmVyZW5jZUltYWdlVXJscy5sZW5ndGggPiAwICYmIHNlbGVjdGVkSW1hZ2VNb2RlbCA9PT0gXCJncHQtaW1hZ2UtMVwiKSB7XG4gICAgICAgIGlucHV0SW1hZ2VzLnB1c2goLi4ucmVmZXJlbmNlSW1hZ2VVcmxzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9nZW5lcmF0ZS1jYXJkLWFzeW5jJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBqb2JJZCxcbiAgICAgICAgICBwcm9tcHRzOiBmb3JtYXR0ZWRQcm9tcHRzLFxuICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgdXNlck51bWJlcjogXCIrMTcxNDU5ODYxMDVcIixcbiAgICAgICAgICAgIG1vZGVsVmVyc2lvbjogc2VsZWN0ZWRJbWFnZU1vZGVsLFxuICAgICAgICAgICAgYXNwZWN0UmF0aW86IHBhcGVyQ29uZmlnLmFzcGVjdFJhdGlvLFxuICAgICAgICAgICAgcXVhbGl0eTogXCJoaWdoXCIsXG4gICAgICAgICAgICBvdXRwdXRGb3JtYXQ6IFwianBlZ1wiLFxuICAgICAgICAgICAgb3V0cHV0Q29tcHJlc3Npb246IDEwMCxcbiAgICAgICAgICAgIG1vZGVyYXRpb246IFwibG93XCIsXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBwYXBlckNvbmZpZy5kaW1lbnNpb25zLFxuICAgICAgICAgICAgaXNGcm9udEJhY2tPbmx5LFxuICAgICAgICAgICAgdXNlckVtYWlsLFxuICAgICAgICAgICAgY2FyZFR5cGU6IGNhcmRUeXBlRm9yUHJvbXB0LFxuICAgICAgICAgICAgdG9GaWVsZCxcbiAgICAgICAgICAgIGZyb21GaWVsZCxcbiAgICAgICAgICAgIGlzRHJhZnRNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIC4uLihpbnB1dEltYWdlcy5sZW5ndGggPiAwICYmIHsgXG4gICAgICAgICAgICAgIGlucHV0X2ltYWdlczogaW5wdXRJbWFnZXMsXG4gICAgICAgICAgICAgIGlucHV0X2ltYWdlc19tb2RlOiBcImZyb250X2NvdmVyX29ubHlcIlxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvLyBJbmNsdWRlIG1lc3NhZ2UgZGF0YSBmb3IgaGFuZHdyaXR0ZW4gb3ZlcmxheVxuICAgICAgICAgICAgLi4uKGlzSGFuZHdyaXR0ZW5NZXNzYWdlICYmIHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogZmluYWxDYXJkTWVzc2FnZSxcbiAgICAgICAgICAgICAgaXNIYW5kd3JpdHRlbk1lc3NhZ2U6IHRydWUsXG4gICAgICAgICAgICAgIGhhbmR3cml0aW5nU3R5bGU6ICdjYXZlYXQnIC8vIERlZmF1bHQgZm9yIG5vd1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNlcnZlciBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIFxuICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgIT09ICdwcm9jZXNzaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0Lm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBzdGFydCBjYXJkIGdlbmVyYXRpb24nKTtcbiAgICAgIH1cblxuICAgICAgc2V0R2VuZXJhdGlvblByb2dyZXNzKFwi4pyoIEJyaW5naW5nIHlvdXIgdmlzaW9uIHRvIGxpZmUuLi5cIik7XG4gICAgICB0b2FzdC5zdWNjZXNzKFwi8J+OiSBDYXJkIGdlbmVyYXRpb24gc3RhcnRlZCFcIik7XG4gICAgICBcbiAgICAgIC8vIFN1YnNjcmliZSB0byBXZWJTb2NrZXQgdXBkYXRlcyBmb3IgcmVhbC10aW1lIHByb2dyZXNzXG4gICAgICBzdWJzY3JpYmVUb0pvYihqb2JJZCk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignQ2FyZCBnZW5lcmF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRvYXN0LmVycm9yKFwiRmFpbGVkIHRvIGdlbmVyYXRlIGNhcmQuIFBsZWFzZSB0cnkgYWdhaW4uXCIpO1xuICAgICAgXG4gICAgICBpZiAoY3VycmVudENhcmRJZCkge1xuICAgICAgICBwcm9wcy5yZW1vdmVKb2JGcm9tU3RvcmFnZShjdXJyZW50Q2FyZElkKTtcbiAgICAgICAgc2V0Q3VycmVudENhcmRJZChudWxsKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgc2V0SXNHZW5lcmF0aW5nKGZhbHNlKTtcbiAgICAgIHNldEdlbmVyYXRpb25Qcm9ncmVzcyhcIlwiKTtcbiAgICAgIHByb3BzLnN0b3BFbGFwc2VkVGltZVRyYWNraW5nKCk7XG4gICAgfVxuICB9LCBbcHJvcHMsIGN1cnJlbnRDYXJkSWRdKTtcblxuICByZXR1cm4ge1xuICAgIGlzR2VuZXJhdGluZyxcbiAgICBzZXRJc0dlbmVyYXRpbmcsXG4gICAgZ2VuZXJhdGVkQ2FyZCxcbiAgICBzZXRHZW5lcmF0ZWRDYXJkLFxuICAgIGdlbmVyYXRlZENhcmRzLFxuICAgIHNldEdlbmVyYXRlZENhcmRzLFxuICAgIHNlbGVjdGVkQ2FyZEluZGV4LFxuICAgIHNldFNlbGVjdGVkQ2FyZEluZGV4LFxuICAgIGlzQ2FyZENvbXBsZXRlZCxcbiAgICBzZXRJc0NhcmRDb21wbGV0ZWQsXG4gICAgZ2VuZXJhdGlvblByb2dyZXNzLFxuICAgIHNldEdlbmVyYXRpb25Qcm9ncmVzcyxcbiAgICBjdXJyZW50Q2FyZElkLFxuICAgIHNldEN1cnJlbnRDYXJkSWQsXG4gICAgZ2VuZXJhdGlvbkR1cmF0aW9uLFxuICAgIHNldEdlbmVyYXRpb25EdXJhdGlvbixcbiAgICBoYW5kbGVHZW5lcmF0ZUNhcmRBc3luYyxcbiAgICBoYW5kbGVGaW5hbENhcmRDb21wbGV0aW9uXG4gIH07XG59Il0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJ0b2FzdCIsInY0IiwidXVpZHY0IiwiUHJvbXB0R2VuZXJhdG9yIiwiY2FyZFRvbmVzIiwiYXJ0aXN0aWNTdHlsZXMiLCJwYXBlclNpemVzIiwiY2hhdFdpdGhBSSIsInNjcm9sbFRvQ2FyZFByZXZpZXciLCJ1c2VDYXJkR2VuZXJhdGlvbiIsInByb3BzIiwiaXNHZW5lcmF0aW5nIiwic2V0SXNHZW5lcmF0aW5nIiwiZ2VuZXJhdGVkQ2FyZCIsInNldEdlbmVyYXRlZENhcmQiLCJnZW5lcmF0ZWRDYXJkcyIsInNldEdlbmVyYXRlZENhcmRzIiwic2VsZWN0ZWRDYXJkSW5kZXgiLCJzZXRTZWxlY3RlZENhcmRJbmRleCIsImlzQ2FyZENvbXBsZXRlZCIsInNldElzQ2FyZENvbXBsZXRlZCIsImdlbmVyYXRpb25Qcm9ncmVzcyIsInNldEdlbmVyYXRpb25Qcm9ncmVzcyIsImN1cnJlbnRDYXJkSWQiLCJzZXRDdXJyZW50Q2FyZElkIiwiZ2VuZXJhdGlvbkR1cmF0aW9uIiwic2V0R2VuZXJhdGlvbkR1cmF0aW9uIiwiaGFuZGxlRmluYWxDYXJkQ29tcGxldGlvbiIsImNhcmREYXRhIiwiY29uc29sZSIsImxvZyIsInVzZXJFbWFpbCIsImNhcmRXaXRoUVIiLCJjcmVhdGVkQXQiLCJEYXRlIiwiaWQiLCJNYXRoIiwibm93IiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiLCJpc0hhbmR3cml0dGVuTWVzc2FnZSIsIm1lc3NhZ2UiLCJmaW5hbENhcmRNZXNzYWdlIiwiaGFuZHdyaXRpbmdTdHlsZSIsInNldElzR2VuZXJhdGluZ0ZpbmFsQ2FyZCIsInNldElzRHJhZnRNb2RlIiwic2V0RHJhZnRDb21wbGV0aW9uU2hvd24iLCJzZXREcmFmdENvbXBsZXRpb25Db3VudCIsImdlbmVyYXRpb25UaW1lU2Vjb25kcyIsInN0b3BFbGFwc2VkVGltZVRyYWNraW5nIiwic2V0VGltZW91dCIsInN1Y2Nlc3MiLCJ0cmltIiwiZHVyYXRpb24iLCJoYW5kbGVHZW5lcmF0ZUNhcmRBc3luYyIsInNlbGVjdGVkVHlwZSIsImN1c3RvbUNhcmRUeXBlIiwic2VsZWN0ZWRUb25lIiwic2VsZWN0ZWRBcnRpc3RpY1N0eWxlIiwiY3VzdG9tU3R5bGVEZXNjcmlwdGlvbiIsInNlbGVjdGVkSW1hZ2VNb2RlbCIsInJlZmVyZW5jZUltYWdlVXJscyIsInByb21wdCIsInRvRmllbGQiLCJmcm9tRmllbGQiLCJpc0Zyb250QmFja09ubHkiLCJzZWxlY3RlZFBhcGVyU2l6ZSIsIm51bWJlck9mQ2FyZHMiLCJzYXZlSm9iVG9TdG9yYWdlIiwic3Vic2NyaWJlVG9Kb2IiLCJzdGFydEVsYXBzZWRUaW1lVHJhY2tpbmciLCJzZXRDdXJyZW50Sm9iSWQiLCJzZXREcmFmdENhcmRzIiwic2V0U2VsZWN0ZWREcmFmdEluZGV4Iiwic2V0UHJldmlld2luZ0RyYWZ0SW5kZXgiLCJlcnJvciIsImVtYWlsUmVnZXgiLCJ0ZXN0IiwibGVuZ3RoIiwiam9iSWQiLCJjYXJkVHlwZUZvclByb21wdCIsInNlbGVjdGVkVG9uZU9iaiIsImZpbmQiLCJ0b25lIiwibWVzc2FnZUNvbnRlbnQiLCJhdXRvTWVzc2FnZVByb21wdCIsImdlbmVyYXRlZE1lc3NhZ2UiLCJtb2RlbCIsImluY2x1ZGVUaG91Z2h0cyIsIm1lc3NhZ2VNYXRjaCIsIm1hdGNoIiwic2VsZWN0ZWRTdHlsZSIsInN0eWxlIiwic3R5bGVNb2RpZmllciIsInByb21wdE1vZGlmaWVyIiwicGFwZXJDb25maWciLCJzaXplIiwiY2FyZENvbmZpZyIsImNhcmRUeXBlIiwidG9uZURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJ0b0xvd2VyQ2FzZSIsInRoZW1lIiwicmVsYXRpb25zaGlwRmllbGQiLCJhcnRpc3RpY1N0eWxlIiwicGhvdG9SZWZlcmVuY2VzIiwiZ2VuZXJhdGVkUHJvbXB0cyIsImdlbmVyYXRlQ2FyZFByb21wdHMiLCJmcm9udENvdmVyIiwiZW5oYW5jZVByb21wdFdpdGhSZWZlcmVuY2VQaG90b3MiLCJmb3JtYXR0ZWRQcm9tcHRzIiwiYmFja0NvdmVyIiwibGVmdEludGVyaW9yIiwicmlnaHRJbnRlcmlvciIsIkVycm9yIiwiam9iRGF0YSIsInByb21wdHMiLCJpbnB1dEltYWdlcyIsInB1c2giLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY29uZmlnIiwidXNlck51bWJlciIsIm1vZGVsVmVyc2lvbiIsImFzcGVjdFJhdGlvIiwicXVhbGl0eSIsIm91dHB1dEZvcm1hdCIsIm91dHB1dENvbXByZXNzaW9uIiwibW9kZXJhdGlvbiIsImRpbWVuc2lvbnMiLCJpc0RyYWZ0TW9kZSIsImlucHV0X2ltYWdlcyIsImlucHV0X2ltYWdlc19tb2RlIiwib2siLCJzdGF0dXMiLCJyZXN1bHQiLCJqc29uIiwicmVtb3ZlSm9iRnJvbVN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/cardStudio/useCardGeneration.ts\n"));

/***/ })

});