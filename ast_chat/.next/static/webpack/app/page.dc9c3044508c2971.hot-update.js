"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/cardStudio/useDraftGeneration.ts":
/*!************************************************!*\
  !*** ./hooks/cardStudio/useDraftGeneration.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDraftGeneration: function() { return /* binding */ useDraftGeneration; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/promptGenerator */ \"(app-pages-browser)/./lib/promptGenerator.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./hooks/cardStudio/constants.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./hooks/cardStudio/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ useDraftGeneration auto */ \n\n\n\n\n\nfunction useDraftGeneration(props) {\n    // Draft mode state\n    const [isDraftMode, setIsDraftMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [draftCards, setDraftCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedDraftIndex, setSelectedDraftIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1);\n    const [isGeneratingFinalCard, setIsGeneratingFinalCard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [previewingDraftIndex, setPreviewingDraftIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1);\n    const [draftCompletionShown, setDraftCompletionShown] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [draftCompletionCount, setDraftCompletionCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isGenerating, setIsGenerating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [generationProgress, setGenerationProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [generatedCard, setGeneratedCard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [generatedCards, setGeneratedCards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isCardCompleted, setIsCardCompleted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [currentJobId, setCurrentJobId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Draft mode generation - creates 5 front cover variations\n    const handleGenerateDraftCards = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        const { userEmail, selectedArtisticStyle, customStyleDescription, referenceImageUrls, selectedDraftModel, selectedType, customCardType, selectedTone, prompt, toField, fromField, selectedPaperSize, saveJobToStorage, subscribeToJob, startElapsedTimeTracking } = props;\n        if (!userEmail.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter your email address\");\n            return;\n        }\n        // Basic email validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(userEmail)) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please enter a valid email address\");\n            return;\n        }\n        // Validate custom style if selected\n        if (selectedArtisticStyle === \"custom\" && !customStyleDescription.trim()) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please describe your custom artistic style\");\n            return;\n        }\n        // Validate reference images with model compatibility\n        if (referenceImageUrls.length > 0 && selectedDraftModel !== \"gpt-image-1\") {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Reference photos are only supported with GPT Image 1 model. Please switch to GPT Image 1 for draft mode or remove reference photos.\");\n            return;\n        }\n        // Stop any existing timers first\n        props.stopElapsedTimeTracking();\n        // Clear any existing progress interval\n        if (progressInterval) {\n            clearInterval(progressInterval);\n            setProgressInterval(null);\n        }\n        // Clear ALL WebSocket subscriptions before starting\n        if (props.unsubscribeFromAllJobs) {\n            props.unsubscribeFromAllJobs();\n        }\n        // Clear all old draft jobs from localStorage before starting new generation\n        if (true) {\n            console.log(\"\\uD83E\\uDDF9 Clearing old draft jobs before starting new generation\");\n            const keys = Object.keys(localStorage);\n            keys.forEach((key)=>{\n                if (key.startsWith(\"cardJob_draft-\")) {\n                    localStorage.removeItem(key);\n                }\n            });\n            // Also clear from pending jobs list\n            const pendingJobs = JSON.parse(localStorage.getItem(\"pendingCardJobs\") || \"[]\");\n            const filteredJobs = pendingJobs.filter((id)=>!id.startsWith(\"draft-\"));\n            localStorage.setItem(\"pendingCardJobs\", JSON.stringify(filteredJobs));\n        }\n        setIsDraftMode(true);\n        setIsGenerating(true);\n        startElapsedTimeTracking(\"draft\");\n        setGenerationProgress(\"\\uD83C\\uDFA8 Creating 5 front cover variations for you to choose from...\");\n        setProgressPercentage(0);\n        setDraftCards([\n            null,\n            null,\n            null,\n            null,\n            null\n        ]); // Initialize with 5 empty slots\n        setSelectedDraftIndex(-1);\n        setDraftCompletionShown(false);\n        setDraftCompletionCount(0);\n        // Clear any previous card state\n        setGeneratedCard(null);\n        setGeneratedCards([]);\n        setIsCardCompleted(false);\n        // Simple time-based progress - increases by ~2.2% per second (45 seconds to reach 100%)\n        const interval = setInterval(()=>{\n            setProgressPercentage((prev)=>{\n                const newProgress = prev + 2.2;\n                return newProgress >= 95 ? 95 : newProgress; // Cap at 95% until completion\n            });\n        }, 1000); // Update every second\n        setProgressInterval(interval);\n        try {\n            console.log(\"\\uD83D\\uDE80 Starting draft mode generation with 5 variations\");\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = _constants__WEBPACK_IMPORTED_MODULE_3__.cardTones.find((tone)=>tone.id === selectedTone);\n            const toneDescription = selectedToneObj ? selectedToneObj.description.toLowerCase() : \"heartfelt and sincere\";\n            const effectivePrompt = prompt.trim() || \"A beautiful \".concat(cardTypeForPrompt, \" card with \").concat(toneDescription, \" style\");\n            // Generate 5 draft variations\n            const draftPromises = Array.from({\n                length: 5\n            }, async (_, index)=>{\n                try {\n                    var _paperSizes_find, _paperSizes_find1;\n                    console.log(\"\\uD83C\\uDFA8 Starting draft variation \".concat(index + 1));\n                    // For smart style, use predefined styles\n                    let styleOverride = undefined;\n                    let styleLabel = undefined;\n                    if (selectedArtisticStyle === \"ai-smart-style\") {\n                        const predefinedStyles = [\n                            \"watercolor\",\n                            \"botanical\",\n                            \"comic-book\",\n                            \"dreamy-fantasy\",\n                            \"minimalist\"\n                        ];\n                        const styleLabels = [\n                            \"\\uD83C\\uDFA8 Watercolor\",\n                            \"\\uD83C\\uDF3F Botanical\",\n                            \"\\uD83D\\uDCA5 Comic Book\",\n                            \"\\uD83C\\uDF38 Dreamy Fantasy\",\n                            \"✨ Minimalist\"\n                        ];\n                        styleOverride = predefinedStyles[index];\n                        styleLabel = styleLabels[index];\n                    }\n                    // Generate front cover prompt\n                    const selectedStyle = _constants__WEBPACK_IMPORTED_MODULE_3__.artisticStyles.find((style)=>style.id === (styleOverride || selectedArtisticStyle));\n                    const draftConfig = {\n                        cardType: selectedType,\n                        customCardType: customCardType,\n                        tone: selectedTone,\n                        toneLabel: selectedToneObj ? selectedToneObj.label : \"Heartfelt\",\n                        toneDescription: toneDescription,\n                        theme: effectivePrompt,\n                        toField: toField,\n                        fromField: fromField,\n                        artisticStyle: selectedStyle,\n                        referenceImageUrls: referenceImageUrls,\n                        photoAnalyses: props.photoAnalyses,\n                        isDraftVariation: selectedArtisticStyle === \"smart\",\n                        variationIndex: index\n                    };\n                    const { prompt: frontCoverPromptQuery, images } = _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.generateDraftPromptWithImages(draftConfig);\n                    const frontCoverPrompt = await (0,_utils__WEBPACK_IMPORTED_MODULE_4__.chatWithAI)(frontCoverPromptQuery, {\n                        model: \"gemini-2.5-pro\",\n                        attachments: images\n                    });\n                    if (!(frontCoverPrompt === null || frontCoverPrompt === void 0 ? void 0 : frontCoverPrompt.trim())) {\n                        throw new Error(\"Failed to generate front cover prompt\");\n                    }\n                    // Enhance with reference image instructions\n                    let enhancedFrontCoverPrompt = frontCoverPrompt.trim();\n                    enhancedFrontCoverPrompt = _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.enhancePromptWithReferencePhotos(enhancedFrontCoverPrompt, referenceImageUrls.length > 0, selectedDraftModel);\n                    // Generate the image\n                    const jobId = \"draft-\".concat(index, \"-\").concat((0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])());\n                    const inputImages = [];\n                    if (referenceImageUrls.length > 0 && selectedDraftModel === \"gpt-image-1\") {\n                        inputImages.push(...referenceImageUrls);\n                    }\n                    const response = await fetch(\"/api/generate-card-async\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            jobId,\n                            prompts: {\n                                frontCover: enhancedFrontCoverPrompt\n                            },\n                            config: {\n                                userNumber: \"+17145986105\",\n                                modelVersion: selectedDraftModel,\n                                aspectRatio: ((_paperSizes_find = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find === void 0 ? void 0 : _paperSizes_find.aspectRatio) || \"9:16\",\n                                quality: \"low\",\n                                outputFormat: \"jpeg\",\n                                outputCompression: 100,\n                                moderation: \"low\",\n                                dimensions: ((_paperSizes_find1 = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find1 === void 0 ? void 0 : _paperSizes_find1.dimensions) || \"1024x1536\",\n                                isFrontBackOnly: true,\n                                userEmail,\n                                cardType: cardTypeForPrompt,\n                                toField,\n                                fromField,\n                                isDraftMode: true,\n                                ...inputImages.length > 0 && {\n                                    input_images: inputImages,\n                                    input_images_mode: \"front_cover_only\"\n                                }\n                            }\n                        })\n                    });\n                    if (!response.ok) {\n                        throw new Error(\"Server error: \".concat(response.status));\n                    }\n                    const result = await response.json();\n                    if (result.status !== \"processing\") {\n                        throw new Error(result.message || \"Failed to start draft generation\");\n                    }\n                    console.log(\"✅ Draft variation \".concat(index + 1, \" job started:\"), jobId);\n                    // Save draft job to storage for recovery\n                    saveJobToStorage(jobId, {\n                        isDraft: true,\n                        draftIndex: index,\n                        styleInfo: styleOverride ? {\n                            styleName: styleOverride,\n                            styleLabel: styleLabel\n                        } : undefined,\n                        frontCoverPrompt: enhancedFrontCoverPrompt,\n                        userEmail,\n                        selectedType,\n                        selectedTone,\n                        toField,\n                        fromField,\n                        draftCards: [] // Will be updated as drafts complete\n                    });\n                    // Subscribe to WebSocket updates\n                    subscribeToJob(jobId);\n                } catch (error) {\n                    console.error(\"❌ Draft variation \".concat(index + 1, \" failed:\"), error);\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Draft variation \".concat(index + 1, \" failed: \").concat(error instanceof Error ? error.message : \"Unknown error\"));\n                }\n            });\n            // Wait for all draft generations to start\n            await Promise.allSettled(draftPromises);\n            console.log(\"\\uD83D\\uDE80 All draft variations started\");\n        } catch (error) {\n            console.error(\"Draft card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to start draft generation: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n            setIsGenerating(false);\n            setIsDraftMode(false);\n            setDraftCompletionShown(false);\n            setDraftCompletionCount(0);\n            setGenerationProgress(\"\");\n            props.stopElapsedTimeTracking();\n            // Clear progress interval on error\n            if (progressInterval) {\n                clearInterval(progressInterval);\n                setProgressInterval(null);\n            }\n        }\n    }, [\n        props,\n        progressInterval\n    ]);\n    // Generate final high-quality card from selected draft\n    const handleGenerateFinalFromDraft = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (displayIndex)=>{\n        // Prevent duplicate calls\n        if (isGeneratingFinalCard) {\n            console.log(\"⚠️ Final card generation already in progress, skipping duplicate call\");\n            return;\n        }\n        const selectedDraft = draftCards[displayIndex];\n        if (!selectedDraft) {\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Please wait for the draft to complete before selecting\");\n            return;\n        }\n        const { selectedType, customCardType, selectedTone, prompt, toField, fromField, finalCardMessage, isHandwrittenMessage, selectedArtisticStyle, customStyleDescription, isFrontBackOnly, selectedImageModel, selectedPaperSize, userEmail, referenceImageUrls, startElapsedTimeTracking, subscribeToJob } = props;\n        // Stop any existing timers first\n        props.stopElapsedTimeTracking();\n        // Clear any existing progress interval\n        clearProgressInterval();\n        setIsGeneratingFinalCard(true);\n        setIsDraftMode(false); // Switch out of draft mode for final generation\n        setSelectedDraftIndex(displayIndex);\n        startElapsedTimeTracking(\"final\");\n        setGenerationProgress(\"\\uD83C\\uDFA8 Creating high-quality version of your selected design...\");\n        setProgressPercentage(0);\n        // Simple time-based progress for final card - increases by ~1.1% per second (90 seconds to reach 100%)\n        const interval = setInterval(()=>{\n            setProgressPercentage((prev)=>{\n                const newProgress = prev + 1.1;\n                return newProgress >= 95 ? 95 : newProgress; // Cap at 95% until completion\n            });\n        }, 1000); // Update every second\n        setProgressInterval(interval);\n        try {\n            var _selectedDraft_generatedPrompts, _paperSizes_find, _paperSizes_find1;\n            const jobId = (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n            // Generate the missing prompts\n            const storedFrontCoverPrompt = (_selectedDraft_generatedPrompts = selectedDraft.generatedPrompts) === null || _selectedDraft_generatedPrompts === void 0 ? void 0 : _selectedDraft_generatedPrompts.frontCover;\n            if (!storedFrontCoverPrompt) {\n                throw new Error(\"Selected draft is missing frontCover prompt\");\n            }\n            const cardTypeForPrompt = selectedType === \"custom\" ? customCardType : selectedType;\n            const selectedToneObj = _constants__WEBPACK_IMPORTED_MODULE_3__.cardTones.find((tone)=>tone.id === selectedTone);\n            const toneDescription = selectedToneObj ? selectedToneObj.description.toLowerCase() : \"heartfelt and sincere\";\n            const effectivePrompt = prompt.trim() || \"A beautiful \".concat(cardTypeForPrompt, \" card with \").concat(toneDescription, \" style\");\n            let messageContent = finalCardMessage;\n            if (isHandwrittenMessage) {\n                messageContent = \"[Blank space for handwritten message]\";\n            }\n            // Get style from the selected draft\n            const draftStyleInfo = selectedDraft.styleInfo;\n            let selectedStyle;\n            if (draftStyleInfo && draftStyleInfo.styleName) {\n                selectedStyle = _constants__WEBPACK_IMPORTED_MODULE_3__.artisticStyles.find((style)=>style.id === draftStyleInfo.styleName);\n            } else {\n                selectedStyle = _constants__WEBPACK_IMPORTED_MODULE_3__.artisticStyles.find((style)=>style.id === selectedArtisticStyle);\n            }\n            // Use PromptGenerator for final card from draft\n            const finalFromDraftConfig = {\n                frontCoverPrompt: storedFrontCoverPrompt,\n                cardType: selectedType,\n                customCardType: customCardType,\n                theme: effectivePrompt,\n                tone: selectedTone,\n                toneDescription: toneDescription,\n                toField: toField,\n                fromField: fromField,\n                message: messageContent,\n                isHandwrittenMessage: isHandwrittenMessage,\n                artisticStyle: selectedStyle,\n                isFrontBackOnly: isFrontBackOnly\n            };\n            const finalPrompts = await _lib_promptGenerator__WEBPACK_IMPORTED_MODULE_2__.PromptGenerator.generateFinalFromDraftPromptsCombined(finalFromDraftConfig);\n            if (!finalPrompts || !finalPrompts.frontCover || !finalPrompts.backCover) {\n                throw new Error(\"Failed to generate complete prompts for final card\");\n            }\n            // Prepare input images for final generation\n            const inputImages = [];\n            if (referenceImageUrls.length > 0 && selectedImageModel === \"gpt-image-1\") {\n                inputImages.push(...referenceImageUrls);\n            }\n            const response = await fetch(\"/api/generate-card-async\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    jobId,\n                    prompts: finalPrompts,\n                    config: {\n                        userNumber: \"+17145986105\",\n                        modelVersion: selectedImageModel,\n                        aspectRatio: ((_paperSizes_find = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find === void 0 ? void 0 : _paperSizes_find.aspectRatio) || \"9:16\",\n                        quality: \"high\",\n                        outputFormat: \"jpeg\",\n                        outputCompression: 100,\n                        moderation: \"low\",\n                        dimensions: ((_paperSizes_find1 = _constants__WEBPACK_IMPORTED_MODULE_3__.paperSizes.find((size)=>size.id === selectedPaperSize)) === null || _paperSizes_find1 === void 0 ? void 0 : _paperSizes_find1.dimensions) || \"1024x1536\",\n                        isFrontBackOnly,\n                        userEmail,\n                        cardType: selectedType === \"custom\" ? customCardType : selectedType,\n                        toField,\n                        fromField,\n                        isDraftMode: false,\n                        ...inputImages.length > 0 && {\n                            input_images: inputImages,\n                            input_images_mode: \"front_cover_only\"\n                        }\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server error: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status !== \"processing\") {\n                throw new Error(result.message || \"Failed to start final card generation\");\n            }\n            setCurrentJobId(jobId);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"\\uD83C\\uDFA8 Generating high-quality version of your selected design!\");\n            // Subscribe to WebSocket updates\n            subscribeToJob(jobId);\n        } catch (error) {\n            console.error(\"Final card generation error:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Failed to generate final card. Please try again.\");\n            setIsGeneratingFinalCard(false);\n            setGenerationProgress(\"\");\n            setProgressPercentage(0);\n            props.stopElapsedTimeTracking();\n            clearProgressInterval(); // Clear time-based progress on error\n        }\n    }, [\n        draftCards,\n        isGeneratingFinalCard,\n        props\n    ]);\n    return {\n        isDraftMode,\n        setIsDraftMode,\n        draftCards,\n        setDraftCards,\n        selectedDraftIndex,\n        setSelectedDraftIndex,\n        isGeneratingFinalCard,\n        setIsGeneratingFinalCard,\n        previewingDraftIndex,\n        setPreviewingDraftIndex,\n        draftCompletionShown,\n        setDraftCompletionShown,\n        draftCompletionCount,\n        setDraftCompletionCount,\n        handleGenerateDraftCards,\n        handleGenerateFinalFromDraft,\n        isGenerating,\n        setIsGenerating,\n        generationProgress,\n        setGenerationProgress,\n        progressPercentage,\n        setProgressPercentage,\n        generatedCard,\n        setGeneratedCard,\n        generatedCards,\n        setGeneratedCards,\n        isCardCompleted,\n        setIsCardCompleted,\n        currentJobId,\n        setCurrentJobId,\n        clearProgressInterval\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/cardStudio/useDraftGeneration.ts\n"));

/***/ })

});