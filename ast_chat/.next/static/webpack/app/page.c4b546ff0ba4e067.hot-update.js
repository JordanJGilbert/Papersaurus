"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/wizard/CardWizardHelpers.tsx":
/*!*************************************************!*\
  !*** ./components/wizard/CardWizardHelpers.tsx ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFileUploadWrapper: function() { return /* binding */ createFileUploadWrapper; },\n/* harmony export */   createMessageHelpWrapper: function() { return /* binding */ createMessageHelpWrapper; },\n/* harmony export */   createRedoWrapper: function() { return /* binding */ createRedoWrapper; },\n/* harmony export */   createUndoWrapper: function() { return /* binding */ createUndoWrapper; },\n/* harmony export */   extractCardTypeFromPrompt: function() { return /* binding */ extractCardTypeFromPrompt; },\n/* harmony export */   handleResumeDraft: function() { return /* binding */ handleResumeDraft; },\n/* harmony export */   handleTemplateSelect: function() { return /* binding */ handleTemplateSelect; }\n/* harmony export */ });\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ extractCardTypeFromPrompt,createFileUploadWrapper,createMessageHelpWrapper,createUndoWrapper,createRedoWrapper,handleTemplateSelect,handleResumeDraft auto */ \n// Extract card type from prompt (basic implementation)\nconst extractCardTypeFromPrompt = (prompt)=>{\n    if (!prompt) return null;\n    const lowerPrompt = prompt.toLowerCase();\n    if (lowerPrompt.includes(\"birthday\")) return \"birthday\";\n    if (lowerPrompt.includes(\"thank\") || lowerPrompt.includes(\"grateful\")) return \"thank-you\";\n    if (lowerPrompt.includes(\"anniversary\")) return \"anniversary\";\n    if (lowerPrompt.includes(\"congratulat\")) return \"congratulations\";\n    if (lowerPrompt.includes(\"holiday\") || lowerPrompt.includes(\"christmas\") || lowerPrompt.includes(\"new year\")) return \"holiday\";\n    if (lowerPrompt.includes(\"love\") || lowerPrompt.includes(\"romantic\")) return \"love\";\n    if (lowerPrompt.includes(\"wedding\")) return \"wedding\";\n    if (lowerPrompt.includes(\"graduat\")) return \"graduation\";\n    if (lowerPrompt.includes(\"baby\")) return \"new-baby\";\n    if (lowerPrompt.includes(\"sorry\") || lowerPrompt.includes(\"apolog\")) return \"apology\";\n    return null;\n};\n// Create a wrapper for handleFileUpload that updates both form and cardStudio\nconst createFileUploadWrapper = (cardStudio, cardForm, updateFormData)=>{\n    return async (file, type)=>{\n        // Store the current state before upload\n        const prevImages = cardForm.formData.referenceImages || [];\n        const prevUrls = cardForm.formData.referenceImageUrls || [];\n        // Use the handleFileUpload method from cardStudio (useFileHandling hook)\n        // This will properly trigger the photo analysis modal\n        await cardStudio.handleFileUpload(file, type);\n        // After successful upload, sync the form data with cardStudio state\n        // For reference images, we need to sync the state immediately\n        if (type === \"reference\") {\n            // Wait a moment to ensure cardStudio state is updated\n            // This needs to be longer to avoid race conditions with CardWizardEffects\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n            // Check if the upload was successful by comparing arrays\n            if (cardStudio.referenceImages.length > prevImages.length) {\n                console.log(\"\\uD83D\\uDD04 Syncing reference images to form data:\", {\n                    images: cardStudio.referenceImages.length,\n                    urls: cardStudio.referenceImageUrls\n                });\n                updateFormData({\n                    referenceImages: cardStudio.referenceImages,\n                    referenceImageUrls: cardStudio.referenceImageUrls\n                });\n            }\n        }\n    };\n};\n// Create a wrapper for handleGetMessageHelp that updates both form and cardStudio\nconst createMessageHelpWrapper = (cardStudio, updateFormData)=>{\n    return async ()=>{\n        const generatedMessage = await cardStudio.handleGetMessageHelp();\n        // After message generation, update the form data with the new message\n        if (generatedMessage) {\n            updateFormData({\n                finalCardMessage: generatedMessage\n            });\n        }\n    };\n};\n// Create wrappers for undo/redo that update both form and cardStudio\nconst createUndoWrapper = (cardStudio, updateFormData)=>{\n    return ()=>{\n        cardStudio.undoMessage();\n        // Update form data with the new message from history\n        if (cardStudio.currentMessageIndex > 0) {\n            const newMessage = cardStudio.messageHistory[cardStudio.currentMessageIndex - 1];\n            updateFormData({\n                finalCardMessage: newMessage\n            });\n        }\n    };\n};\nconst createRedoWrapper = (cardStudio, updateFormData)=>{\n    return ()=>{\n        cardStudio.redoMessage();\n        // Update form data with the new message from history\n        if (cardStudio.currentMessageIndex < cardStudio.messageHistory.length - 1) {\n            const newMessage = cardStudio.messageHistory[cardStudio.currentMessageIndex + 1];\n            updateFormData({\n                finalCardMessage: newMessage\n            });\n        }\n    };\n};\n// Handle template selection\nconst handleTemplateSelect = (template, updateFormData, cardStudio)=>{\n    var _template_styleInfo;\n    // Update form data with template information\n    updateFormData({\n        prompt: template.prompt || \"\",\n        selectedType: extractCardTypeFromPrompt(template.prompt) || cardStudio.selectedType,\n        selectedArtisticStyle: ((_template_styleInfo = template.styleInfo) === null || _template_styleInfo === void 0 ? void 0 : _template_styleInfo.styleName) || cardStudio.selectedArtisticStyle\n    });\n    // Store template info in cardStudio for later use\n    cardStudio.setSelectedTemplate(template);\n};\n// Resume draft session\nconst handleResumeDraft = (sessionId, cardHistory, cardForm, cardStudio, wizardState, setIsResumingDraft)=>{\n    // Set flag to prevent auto-saving during resume\n    setIsResumingDraft(true);\n    const session = cardHistory.resumeDraftSession(sessionId);\n    if (session) {\n        // Update form data with saved session data\n        cardForm.updateFormData(session.formData);\n        // Update cardStudio with draft cards\n        cardStudio.setDraftCards(session.draftCards);\n        cardStudio.setSelectedDraftIndex(session.selectedDraftIndex);\n        cardStudio.setIsDraftMode(true);\n        // Navigate to appropriate step\n        if (session.draftCards.length > 0) {\n            // If drafts exist, go to draft selection step\n            wizardState.goToStep(5);\n        } else {\n            // Otherwise go to content creation step\n            wizardState.goToStep(2);\n        }\n        sonner__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Draft session resumed successfully!\");\n        // Reset flag after a short delay to allow state updates to complete\n        setTimeout(()=>{\n            setIsResumingDraft(false);\n        }, 100);\n    } else {\n        setIsResumingDraft(false);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/wizard/CardWizardHelpers.tsx\n"));

/***/ })

});