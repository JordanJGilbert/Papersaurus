"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ChatPage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_mode_toggle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/mode-toggle */ \"(app-pages-browser)/./components/mode-toggle.tsx\");\n/* harmony import */ var _components_ui_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/ui/button */ \"(app-pages-browser)/./components/ui/button.tsx\");\n/* harmony import */ var _components_ui_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/ui/input */ \"(app-pages-browser)/./components/ui/input.tsx\");\n/* harmony import */ var _components_ui_scroll_area__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/ui/scroll-area */ \"(app-pages-browser)/./components/ui/scroll-area.tsx\");\n/* harmony import */ var _barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowUp,ChevronDown,Loader2,MapPin,Menu,Paperclip!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/menu.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowUp,ChevronDown,Loader2,MapPin,Menu,Paperclip!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chevron-down.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowUp,ChevronDown,Loader2,MapPin,Menu,Paperclip!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/loader-circle.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowUp,ChevronDown,Loader2,MapPin,Menu,Paperclip!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/paperclip.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowUp,ChevronDown,Loader2,MapPin,Menu,Paperclip!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/map-pin.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowUp,ChevronDown,Loader2,MapPin,Menu,Paperclip!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-up.js\");\n/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! marked */ \"(app-pages-browser)/./node_modules/marked/lib/marked.esm.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! dompurify */ \"(app-pages-browser)/./node_modules/dompurify/dist/purify.es.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _components_ToolCallDisplay__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/ToolCallDisplay */ \"(app-pages-browser)/./components/ToolCallDisplay.tsx\");\n/* harmony import */ var _components_URLPreview__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/URLPreview */ \"(app-pages-browser)/./components/URLPreview.tsx\");\n/* harmony import */ var _components_MapDisplay__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/MapDisplay */ \"(app-pages-browser)/./components/MapDisplay.tsx\");\n/* harmony import */ var _components_DirectionsSteps__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/DirectionsSteps */ \"(app-pages-browser)/./components/DirectionsSteps.tsx\");\n/* harmony import */ var _components_ImageDisplay__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/ImageDisplay */ \"(app-pages-browser)/./components/ImageDisplay.tsx\");\n/* harmony import */ var next_themes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next-themes */ \"(app-pages-browser)/./node_modules/next-themes/dist/index.mjs\");\n/* harmony import */ var _hooks_useContentPreviews__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/hooks/useContentPreviews */ \"(app-pages-browser)/./hooks/useContentPreviews.ts\");\n/* harmony import */ var _components_ContentPreview__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/components/ContentPreview */ \"(app-pages-browser)/./components/ContentPreview.tsx\");\n/* harmony import */ var _utils_previewExtractors__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/utils/previewExtractors */ \"(app-pages-browser)/./utils/previewExtractors.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Ensure marked runs synchronously for this page too, if not already global\nmarked__WEBPACK_IMPORTED_MODULE_6__.marked.setOptions({\n    async: false\n});\n// Configuration for the backend API endpoint\nconst BACKEND_API_BASE_URL = \"https://jordanjohngilbert.link\" || 0; // Default to localhost:5001\nfunction ChatPage() {\n    _s();\n    const [userInput, setUserInput] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedFiles, setSelectedFiles] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]); // <-- New state for selected files\n    const fileInputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // <-- Ref for file input\n    const [fileProcessingStatus, setFileProcessingStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // <-- Status for file processing\n    const [showInitialView, setShowInitialView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const scrollAreaRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Ref for the ScrollArea's viewport element\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Ready\");\n    const [apiSender] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"+17145986105\");\n    const [currentUserLocation, setCurrentUserLocation] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [sendLocation, setSendLocation] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false); // New state for toggle\n    const [directionsData, setDirectionsData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [googleMapsApiKey] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"AIzaSyC0_w7ucVDKZ7pD3JinvokDwxl9OohMkwQ\" || 0);\n    const [mapDisplayKey, setMapDisplayKey] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0); // Key for forcing MapDisplay re-render\n    const [showTraffic, setShowTraffic] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false); // State for traffic layer\n    const [isMapSectionVisible, setIsMapSectionVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false); // <-- State for map section visibility\n    const { theme: appTheme } = (0,next_themes__WEBPACK_IMPORTED_MODULE_13__.useTheme)(); // Get current application theme\n    // NEW: Add content previews hook\n    const { upsertPreview, updatePreview, getPreviewsForMessage, removePreview } = (0,_hooks_useContentPreviews__WEBPACK_IMPORTED_MODULE_14__.useContentPreviews)();\n    // Define available models as an array of objects for the dropdown\n    const modelOptions = [\n        {\n            value: \"gemini-2.5-flash-preview-05-20\",\n            label: \"Gemini 2.5 Flash\"\n        },\n        {\n            value: \"gemini-2.5-pro-preview-05-06\",\n            label: \"Gemini 2.5 Pro\"\n        }\n    ];\n    const [selectedModel, setSelectedModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(modelOptions[1].value); // Default to the second model (Pro)\n    // NEW: Helper function to process tool calls for preview extraction\n    const processToolCallForPreview = (toolCall, messageId)=>{\n        if ((0,_utils_previewExtractors__WEBPACK_IMPORTED_MODULE_16__.shouldExtractPreview)(toolCall)) {\n            const extractedPreview = (0,_utils_previewExtractors__WEBPACK_IMPORTED_MODULE_16__.extractPreviewFromToolCall)(toolCall);\n            if (extractedPreview && extractedPreview.shouldShow) {\n                console.log(\"[PAGE.TSX] Extracted preview for tool \".concat(toolCall.name, \":\"), extractedPreview);\n                upsertPreview(extractedPreview.id, extractedPreview.type, extractedPreview.data, messageId, {\n                    name: toolCall.name,\n                    call_id: toolCall.call_id,\n                    status: toolCall.status\n                });\n            }\n        }\n    };\n    // Function to detect and convert HEIC files to JPEG\n    const convertHeicToJpeg = async (file)=>{\n        const isHeic = file.name.toLowerCase().endsWith(\".heic\") || file.name.toLowerCase().endsWith(\".heif\") || file.type === \"image/heic\" || file.type === \"image/heif\";\n        if (!isHeic) {\n            return file; // Return original file if not HEIC\n        }\n        try {\n            console.log('\\uD83D\\uDD04 Converting HEIC file \"'.concat(file.name, '\" to JPEG...'));\n            // Dynamic import to avoid SSR issues\n            const { default: heic2any } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_heic2any_dist_heic2any_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! heic2any */ \"(app-pages-browser)/./node_modules/heic2any/dist/heic2any.js\", 23));\n            // Try heic2any conversion\n            const convertedBlob = await heic2any({\n                blob: file,\n                toType: \"image/jpeg\",\n                quality: 0.85\n            });\n            // Create new filename with .jpg extension\n            const originalName = file.name.replace(/\\.(heic|heif)$/i, \"\");\n            const newFileName = \"\".concat(originalName, \".jpg\");\n            // Create new File object with converted blob\n            const convertedFile = new File([\n                convertedBlob\n            ], newFileName, {\n                type: \"image/jpeg\",\n                lastModified: file.lastModified\n            });\n            console.log('✅ Successfully converted \"'.concat(file.name, '\" to \"').concat(newFileName, '\" (').concat(Math.round(convertedFile.size / 1024), \"KB)\"));\n            return convertedFile;\n        } catch (error) {\n            console.warn('⚠️ Frontend HEIC conversion failed for \"'.concat(file.name, '\":'), error);\n            // Try Canvas API fallback\n            try {\n                console.log('\\uD83D\\uDD04 Attempting Canvas API fallback for \"'.concat(file.name, '\"...'));\n                const imageBitmap = await createImageBitmap(file);\n                const canvas = document.createElement(\"canvas\");\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx) {\n                    throw new Error(\"Could not get canvas context\");\n                }\n                canvas.width = imageBitmap.width;\n                canvas.height = imageBitmap.height;\n                ctx.drawImage(imageBitmap, 0, 0);\n                const canvasBlob = await new Promise((resolve, reject)=>{\n                    canvas.toBlob((blob)=>{\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject(new Error(\"Canvas toBlob failed\"));\n                        }\n                    }, \"image/jpeg\", 0.85);\n                });\n                const originalName = file.name.replace(/\\.(heic|heif)$/i, \"\");\n                const newFileName = \"\".concat(originalName, \".jpg\");\n                const convertedFile = new File([\n                    canvasBlob\n                ], newFileName, {\n                    type: \"image/jpeg\",\n                    lastModified: file.lastModified\n                });\n                console.log('✅ Canvas API fallback succeeded for \"'.concat(file.name, '\" → \"').concat(newFileName, '\"'));\n                return convertedFile;\n            } catch (canvasError) {\n                console.warn('⚠️ Canvas API fallback also failed for \"'.concat(file.name, '\":'), canvasError);\n                // Final fallback: Upload HEIC file and let backend handle conversion\n                console.log('\\uD83D\\uDD04 Will upload \"'.concat(file.name, '\" for server-side conversion...'));\n                // Mark this file for server-side conversion by adding a special property\n                const fileWithConversionFlag = new File([\n                    file\n                ], file.name, {\n                    type: file.type || \"image/heic\",\n                    lastModified: file.lastModified\n                });\n                // Add a custom property to indicate this needs server-side conversion\n                fileWithConversionFlag.needsServerConversion = true;\n                return fileWithConversionFlag;\n            }\n        }\n    };\n    const examplePrompts = [\n        {\n            title: \"What are the advantages\",\n            detail: \"of using Next.js?\"\n        },\n        {\n            title: \"Write code to\",\n            detail: \"demonstrate dijkstra\\\\'s algorithm\"\n        },\n        {\n            title: \"Help me write an essay\",\n            detail: \"about silicon valley\"\n        },\n        {\n            title: \"What is the weather\",\n            detail: \"in San Francisco?\"\n        }\n    ];\n    // Helper to ensure markdown block elements are properly spaced\n    const normalizeFragment = (fragment, _prevContent)=>{\n        // TEMPORARILY A PASS-THROUGH\n        return fragment;\n    };\n    // NEW: Function to convert standalone image/video URLs to HTML elements\n    const convertMediaUrls = (text)=>{\n        // Common image extensions\n        const imageExtensions = /\\.(jpg|jpeg|png|gif|webp|svg|bmp|ico|tiff)(\\?[^)\\s\"']*)?$/i;\n        // Common video extensions  \n        const videoExtensions = /\\.(mp4|webm|ogg|mov|avi|wmv|flv|m4v)(\\?[^)\\s\"']*)?$/i;\n        // More comprehensive URL pattern that handles URLs in various contexts\n        // This pattern looks for http/https URLs that are not already in markdown image/link format\n        const urlPattern = RegExp(\"(?<!!\\\\[)(?<!\\\\]\\\\()(?<!\\\\[.*?\\\\]\\\\()https?:\\\\/\\\\/[^\\\\s<>\\\"'\\\\]\\\\)]+\", \"g\");\n        let processedText = text.replace(urlPattern, (url)=>{\n            // Remove trailing punctuation that might not be part of the URL\n            const cleanUrl = url.replace(/[.,;:!?)\"']+$/, \"\");\n            if (imageExtensions.test(cleanUrl)) {\n                return \"![Image](\".concat(cleanUrl, \")\");\n            } else if (videoExtensions.test(cleanUrl)) {\n                var _cleanUrl_split_pop;\n                return '<video controls style=\"max-width: 100%; height: auto; max-height: 400px; border-radius: 0.375rem; margin: 0.5em auto; display: block;\">\\n          <source src=\"'.concat(cleanUrl, '\" type=\"video/').concat(((_cleanUrl_split_pop = cleanUrl.split(\".\").pop()) === null || _cleanUrl_split_pop === void 0 ? void 0 : _cleanUrl_split_pop.split(\"?\")[0]) || \"mp4\", '\">\\n          Your browser does not support the video tag.\\n          <a href=\"').concat(cleanUrl, '\" target=\"_blank\" rel=\"noopener noreferrer\">View video</a>\\n        </video>');\n            }\n            return url; // Return original URL if not media\n        });\n        // Additional aggressive pattern to catch any URLs that might be in quotes or other contexts\n        const aggressiveUrlPattern = /https?:\\/\\/[^\\s<>\"'\\]\\)\\}]+\\.(jpg|jpeg|png|gif|webp|svg|bmp|ico|tiff|mp4|webm|ogg|mov|avi|wmv|flv|m4v)(\\?[^\\s<>\"'\\]\\)\\}]*)?/gi;\n        processedText = processedText.replace(aggressiveUrlPattern, (url)=>{\n            // Check if this URL is already converted to markdown\n            if (processedText.includes(\"![Image](\".concat(url, \")\"))) {\n                return url;\n            }\n            const cleanUrl = url.replace(/[.,;:!?)\"'\\}]+$/, \"\");\n            return \"![Image](\".concat(cleanUrl, \")\");\n        });\n        return processedText;\n    };\n    const renderSanitizedMarkdown = (text)=>{\n        // First convert standalone media URLs to proper markdown/HTML\n        const textWithMedia = convertMediaUrls(text);\n        // This function assumes it's running in a browser environment\n        // due to the \"use client\" directive on the component and use of DOMPurify.\n        // marked.parse is configured to run synchronously.\n        const dirtyHtml = marked__WEBPACK_IMPORTED_MODULE_6__.marked.parse(textWithMedia, {\n            gfm: true,\n            breaks: true\n        });\n        return dompurify__WEBPACK_IMPORTED_MODULE_7__[\"default\"].sanitize(dirtyHtml);\n    };\n    const parseTextWithURLs = (text)=>{\n        const urlRegex = /https?:\\/\\/[^\\s<>\"'\\]\\)\\}]+/g;\n        const parts = [];\n        let lastIndex = 0;\n        let match;\n        while((match = urlRegex.exec(text)) !== null){\n            // Add text before the URL\n            if (match.index > lastIndex) {\n                const beforeText = text.substring(lastIndex, match.index);\n                if (beforeText.trim()) {\n                    parts.push({\n                        type: \"text\",\n                        content: beforeText\n                    });\n                }\n            }\n            // Add the URL (clean up trailing punctuation)\n            const url = match[0].replace(/[.,;:!?)\"'\\}]+$/, \"\");\n            // Skip if it's already an image/video (handled by markdown)\n            const isMedia = /\\.(jpg|jpeg|png|gif|webp|svg|bmp|ico|tiff|mp4|webm|ogg|mov|avi|wmv|flv|m4v)(\\?[^)\\s\"']*)?$/i.test(url);\n            if (!isMedia) {\n                parts.push({\n                    type: \"url\",\n                    content: url\n                });\n            } else {\n                // Keep as text for markdown processing\n                parts.push({\n                    type: \"text\",\n                    content: match[0]\n                });\n            }\n            lastIndex = urlRegex.lastIndex;\n        }\n        // Add remaining text\n        if (lastIndex < text.length) {\n            const remainingText = text.substring(lastIndex);\n            if (remainingText.trim()) {\n                parts.push({\n                    type: \"text\",\n                    content: remainingText\n                });\n            }\n        }\n        // If no URLs found, return the whole text as one part\n        if (parts.length === 0) {\n            parts.push({\n                type: \"text\",\n                content: text\n            });\n        }\n        return parts;\n    };\n    const getCurrentLocation = ()=>{\n        console.log(\"[PAGE.TSX] getCurrentLocation called\");\n        return new Promise((resolve, reject)=>{\n            if (!navigator.geolocation) {\n                console.error(\"[PAGE.TSX] Geolocation not supported\");\n                reject(\"Geolocation is not supported by your browser.\");\n                return;\n            }\n            const timeoutId = setTimeout(()=>{\n                console.error(\"[PAGE.TSX] Geolocation timeout\");\n                reject(\"Failed to get location: Timeout.\");\n            }, 10000); // 10 second timeout\n            navigator.geolocation.getCurrentPosition((position)=>{\n                clearTimeout(timeoutId);\n                const coords = \"\".concat(position.coords.latitude, \",\").concat(position.coords.longitude);\n                console.log(\"[PAGE.TSX] Geolocation success:\", coords);\n                setCurrentUserLocation(coords); // Update state here as well\n                resolve(coords);\n            }, (error)=>{\n                clearTimeout(timeoutId);\n                console.error(\"[PAGE.TSX] Geolocation error:\", error);\n                let message = \"Unable to retrieve your location. Please ensure location services are enabled.\";\n                switch(error.code){\n                    case error.PERMISSION_DENIED:\n                        message = \"Location permission denied. Please enable it in your browser settings.\";\n                        break;\n                    case error.POSITION_UNAVAILABLE:\n                        message = \"Location information is unavailable.\";\n                        break;\n                    case error.TIMEOUT:\n                        message = \"Request to get user location timed out.\"; // This case might be preempted by our own setTimeout\n                        break;\n                }\n                reject(message);\n            }, {\n                enableHighAccuracy: true,\n                timeout: 8000,\n                maximumAge: 0\n            } // Added options\n            );\n        });\n    };\n    const handleFileSelect = async (event)=>{\n        if (event.target.files) {\n            const files = Array.from(event.target.files);\n            // Check if any files are HEIC\n            const heicFiles = files.filter((file)=>file.name.toLowerCase().endsWith(\".heic\") || file.name.toLowerCase().endsWith(\".heif\") || file.type === \"image/heic\" || file.type === \"image/heif\");\n            if (heicFiles.length > 0) {\n                setFileProcessingStatus(\"Converting \".concat(heicFiles.length, \" HEIC file\").concat(heicFiles.length > 1 ? \"s\" : \"\", \" to JPEG...\"));\n            }\n            try {\n                // Convert any HEIC files to JPEG\n                const convertedFiles = await Promise.all(files.map((file)=>convertHeicToJpeg(file)));\n                // Check if any files need server-side conversion\n                const serverConversionFiles = convertedFiles.filter((file)=>file.needsServerConversion);\n                if (serverConversionFiles.length > 0) {\n                    setFileProcessingStatus(\"\\uD83D\\uDCE4 Sending \".concat(serverConversionFiles.length, \" HEIC file\").concat(serverConversionFiles.length > 1 ? \"s\" : \"\", \" for server-side conversion...\"));\n                } else {\n                    setFileProcessingStatus(null); // Clear status when done\n                }\n                setSelectedFiles((prevFiles)=>[\n                        ...prevFiles,\n                        ...convertedFiles\n                    ]);\n            } catch (error) {\n                console.error(\"Error processing selected files:\", error);\n                // Show user-friendly error message\n                if (error instanceof Error && error.message.includes(\"Unable to convert HEIC\")) {\n                    setFileProcessingStatus(\"❌ HEIC conversion failed. Please try a different image format.\");\n                    setTimeout(()=>setFileProcessingStatus(null), 5000);\n                } else {\n                    // Fall back to adding original files if conversion fails\n                    setSelectedFiles((prevFiles)=>[\n                            ...prevFiles,\n                            ...files\n                        ]);\n                    setFileProcessingStatus(null); // Clear status on error\n                }\n            }\n            event.target.value = \"\"; // Reset file input to allow selecting the same file again\n        }\n    };\n    const removeSelectedFile = (fileNameToRemove)=>{\n        setSelectedFiles((prevFiles)=>prevFiles.filter((file)=>file.name !== fileNameToRemove));\n    };\n    const fileToBase64 = (file)=>{\n        return new Promise((resolve, reject)=>{\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = ()=>{\n                const result = reader.result;\n                resolve(result.split(\",\")[1]); // Get data part after comma\n            };\n            reader.onerror = (error)=>reject(error);\n        });\n    };\n    // NEW: Upload files immediately and get URLs\n    const uploadFiles = async (files)=>{\n        const uploadPromises = files.map(async (file)=>{\n            const formData = new FormData();\n            formData.append(\"file\", file);\n            // Check if this file needs server-side HEIC conversion\n            const needsServerConversion = file.needsServerConversion;\n            if (needsServerConversion) {\n                formData.append(\"convert_heic\", \"true\");\n                console.log('\\uD83D\\uDCE4 Uploading \"'.concat(file.name, '\" for server-side HEIC conversion...'));\n            }\n            try {\n                const response = await fetch(\"\".concat(BACKEND_API_BASE_URL, \"/upload\"), {\n                    method: \"POST\",\n                    body: formData\n                });\n                if (!response.ok) {\n                    throw new Error(\"Upload failed: \".concat(response.status));\n                }\n                const result = await response.json();\n                // Log server-side HEIC conversion if it occurred\n                if (result.converted_from_heic) {\n                    console.log('✅ Server converted HEIC file \"'.concat(result.original_filename, '\" to JPEG: \"').concat(result.filename, '\"'));\n                }\n                return result.url; // Backend should return { url: \"...\" }\n            } catch (error) {\n                console.error(\"Failed to upload \".concat(file.name, \":\"), error);\n                throw error;\n            }\n        });\n        return Promise.all(uploadPromises);\n    };\n    const handleSend = async (e)=>{\n        if (e && typeof e.preventDefault === \"function\") {\n            e.preventDefault();\n        }\n        let currentMessageText = userInput.trim(); // Use a mutable variable for message text\n        if (!currentMessageText && selectedFiles.length === 0) return; // Return if no text and no files\n        // --- NEW: Upload files immediately and get URLs ---\n        let attachmentUrls = [];\n        if (selectedFiles.length > 0) {\n            try {\n                setStatus(\"Uploading files...\");\n                attachmentUrls = await uploadFiles(selectedFiles);\n                console.log(\"Files uploaded successfully:\", attachmentUrls);\n            } catch (error) {\n                console.error(\"File upload failed:\", error);\n                setStatus(\"Ready\");\n                // Show error to user\n                const errorMessageId = (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])();\n                setMessages((prev)=>[\n                        ...prev,\n                        {\n                            id: errorMessageId,\n                            sender: \"bot\",\n                            parts: [\n                                {\n                                    type: \"text\",\n                                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                    content: '<strong style=\"color: red;\">Upload Error:</strong> Failed to upload files. Please try again.'\n                                }\n                            ],\n                            timestamp: Date.now(),\n                            thinking: false,\n                            is_error_message: true\n                        }\n                    ]);\n                return;\n            }\n        }\n        // --- Location Appending Logic ---\n        let resolvedOriginForQuery = undefined;\n        if (sendLocation) {\n            if (currentUserLocation) {\n                resolvedOriginForQuery = currentUserLocation;\n            } else {\n                try {\n                    console.log(\"Attempting to get current location because toggle is on...\");\n                    const location = await getCurrentLocation();\n                    resolvedOriginForQuery = location;\n                    console.log(\"Current location obtained for query:\", location);\n                } catch (locationError) {\n                    console.error(\"Error getting location for query:\", locationError);\n                    // Display error to user immediately, similar to before, but tied to bot's thinking message\n                    const tempBotMessageId = (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(); // Create a temporary ID for this error message\n                    setMessages((prev)=>[\n                            ...prev,\n                            {\n                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                sender: \"user\",\n                                parts: currentMessageText ? [\n                                    {\n                                        type: \"text\",\n                                        id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                        content: currentMessageText\n                                    }\n                                ] : [],\n                                timestamp: Date.now()\n                            },\n                            {\n                                id: tempBotMessageId,\n                                sender: \"bot\",\n                                parts: [\n                                    {\n                                        type: \"text\",\n                                        id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                        content: '<strong style=\"color: red;\">Location Error:</strong> '.concat(locationError)\n                                    }\n                                ],\n                                timestamp: Date.now(),\n                                thinking: false,\n                                is_error_message: true\n                            }\n                        ]);\n                    if (showInitialView) setShowInitialView(false);\n                    setUserInput(\"\"); // Clear input\n                    setSelectedFiles([]); // Clear files\n                    setStatus(\"Ready\");\n                    return;\n                }\n            }\n            if (resolvedOriginForQuery) {\n                // Append to the message text that will be sent\n                currentMessageText = \"\".concat(currentMessageText, \" (My current location is: \").concat(resolvedOriginForQuery, \")\");\n            }\n        }\n        // --- End Location Appending Logic ---\n        // --- NEW: Include attachment URLs directly in the message ---\n        if (attachmentUrls.length > 0) {\n            const attachmentList = attachmentUrls.map((url, index)=>{\n                var _selectedFiles_index;\n                const fileName = ((_selectedFiles_index = selectedFiles[index]) === null || _selectedFiles_index === void 0 ? void 0 : _selectedFiles_index.name) || \"Attachment \".concat(index + 1);\n                return \"- \".concat(fileName, \": \").concat(url);\n            }).join(\"\\n\");\n            currentMessageText += \"\\n\\nAttached files:\\n\".concat(attachmentList);\n        }\n        const userMessageId = (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])();\n        const userMessageParts = [];\n        if (currentMessageText) {\n            userMessageParts.push({\n                type: \"text\",\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                content: currentMessageText\n            });\n        }\n        const userMessage = {\n            id: userMessageId,\n            sender: \"user\",\n            parts: userMessageParts,\n            timestamp: Date.now()\n        };\n        setMessages((prevMessages)=>[\n                ...prevMessages,\n                userMessage\n            ]);\n        setUserInput(\"\");\n        if (showInitialView) setShowInitialView(false);\n        const botMessageId = (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])();\n        setMessages((prevMessages)=>[\n                ...prevMessages,\n                {\n                    id: botMessageId,\n                    sender: \"bot\",\n                    parts: [\n                        {\n                            type: \"thought_summary\",\n                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                            content: \"\"\n                        }\n                    ],\n                    timestamp: Date.now(),\n                    thinking: true\n                }\n            ]);\n        try {\n            // --- NEW: Simplified payload with URLs instead of base64 ---\n            const payload = {\n                sender: apiSender,\n                query: currentMessageText,\n                timestamp: Date.now(),\n                stream: true,\n                model: selectedModel,\n                attachment_urls: attachmentUrls.length > 0 ? attachmentUrls : undefined\n            };\n            // Clear selected files now that they're uploaded and in the message\n            setSelectedFiles([]);\n            setStatus(\"Processing...\");\n            const response = await fetch(\"\".concat(BACKEND_API_BASE_URL, \"/query\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                let errorDetail = \"HTTP error! status: \".concat(response.status);\n                try {\n                    const errorJson = JSON.parse(errorText);\n                    errorDetail = errorJson.error || errorJson.detail || errorDetail;\n                } catch (parseError) {\n                    if (errorText) errorDetail += \" - \".concat(errorText);\n                }\n                throw new Error(errorDetail);\n            }\n            if (!response.body) throw new Error(\"Response body is null\");\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n            let buffer = \"\"; // Buffer for accumulating stream data\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) {\n                    if (buffer.trim() !== \"\") {\n                        try {\n                            const parsedChunk = JSON.parse(buffer);\n                            console.log(\"[PAGE.TSX] Final Buffer Chunk:\", JSON.stringify(parsedChunk));\n                            if (parsedChunk.type === \"text_chunk\" && parsedChunk.content) {\n                                setMessages((prev)=>prev.map((msg)=>{\n                                        if (msg.id === botMessageId) {\n                                            let currentContent = parsedChunk.content;\n                                            let newParts = [\n                                                ...msg.parts\n                                            ];\n                                            const lastPart = newParts.length > 0 ? newParts[newParts.length - 1] : null;\n                                            if (lastPart && lastPart.type === \"text\") {\n                                                currentContent = normalizeFragment(currentContent, lastPart.content);\n                                                lastPart.content += currentContent;\n                                            } else {\n                                                currentContent = normalizeFragment(currentContent, \"\");\n                                                newParts.push({\n                                                    type: \"text\",\n                                                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                    content: currentContent\n                                                });\n                                            }\n                                            return {\n                                                ...msg,\n                                                parts: newParts,\n                                                thinking: true\n                                            };\n                                        }\n                                        return msg;\n                                    }));\n                            } else if (parsedChunk.type === \"thought_summary\" && parsedChunk.content) {\n                                setMessages((prev)=>prev.map((msg)=>{\n                                        if (msg.id === botMessageId) {\n                                            const newParts = msg.parts.map((part)=>{\n                                                if (part.type === \"thought_summary\") {\n                                                    const contentFromChunk = normalizeFragment(parsedChunk.content, part.content);\n                                                    return {\n                                                        ...part,\n                                                        content: part.content + contentFromChunk\n                                                    };\n                                                }\n                                                return part;\n                                            });\n                                            return {\n                                                ...msg,\n                                                parts: newParts,\n                                                thinking: true\n                                            };\n                                        }\n                                        return msg;\n                                    }));\n                            } else if (parsedChunk.type === \"tool_call_pending\" && parsedChunk.name && parsedChunk.arguments) {\n                                const call_id_from_chunk = parsedChunk.call_id || \"tool-\".concat((0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])());\n                                setMessages((prev)=>prev.map((msg)=>{\n                                        if (msg.id === botMessageId) {\n                                            const existingToolCallPart = msg.parts.find((part)=>part.type === \"tool_call\" && part.toolCall.call_id === call_id_from_chunk);\n                                            if (existingToolCallPart) {\n                                                console.log(\"[PAGE.TSX] (final buffer) Tool call with ID \".concat(call_id_from_chunk, \" already exists. Ignoring duplicate pending.\"));\n                                                return msg;\n                                            }\n                                            const newToolCallData = {\n                                                call_id: call_id_from_chunk,\n                                                name: parsedChunk.name,\n                                                arguments: typeof parsedChunk.arguments === \"string\" ? parsedChunk.arguments : JSON.stringify(parsedChunk.arguments),\n                                                status: \"Pending...\"\n                                            };\n                                            console.log(\"[PAGE.TSX] (final buffer) Tool Call Pending (New):\", JSON.parse(JSON.stringify(newToolCallData)));\n                                            const newParts = [\n                                                ...msg.parts\n                                            ];\n                                            newParts.push({\n                                                type: \"tool_call\",\n                                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                toolCall: newToolCallData\n                                            });\n                                            newParts.push({\n                                                type: \"text\",\n                                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                content: \"\"\n                                            });\n                                            return {\n                                                ...msg,\n                                                parts: newParts,\n                                                thinking: true\n                                            };\n                                        }\n                                        return msg;\n                                    }));\n                            } else if (parsedChunk.type === \"tool_result\" && parsedChunk.call_id && typeof parsedChunk.result !== \"undefined\") {\n                                setMessages((prev)=>prev.map((msg)=>{\n                                        if (msg.id === botMessageId) {\n                                            if (parsedChunk.name === \"get_directions\") {\n                                                console.log(\"[PAGE.TSX] (Final Buffer) RAW get_directions tool_result CHUNK:\", JSON.stringify(parsedChunk));\n                                            }\n                                            let matchedToolCallInParts = false;\n                                            const newParts = msg.parts.map((part)=>{\n                                                if (part.type === \"tool_call\" && part.toolCall.call_id === parsedChunk.call_id) {\n                                                    matchedToolCallInParts = true;\n                                                    const tc = part.toolCall;\n                                                    let finalResult = typeof parsedChunk.result === \"string\" ? parsedChunk.result : JSON.stringify(parsedChunk.result);\n                                                    const isPartial = typeof parsedChunk.is_partial === \"boolean\" ? parsedChunk.is_partial : false;\n                                                    const isError = typeof parsedChunk.is_error === \"boolean\" ? parsedChunk.is_error : false;\n                                                    const newStatus = isPartial ? \"Streaming...\" : isError ? \"Error\" : \"Completed\";\n                                                    const updatedToolCall = {\n                                                        ...tc,\n                                                        result: isPartial && tc.result && tc.status === \"Streaming...\" ? tc.result + \"\\n---\\n\" + finalResult : finalResult,\n                                                        status: newStatus,\n                                                        is_error: isError,\n                                                        is_partial: isPartial\n                                                    };\n                                                    let toolResponse = null;\n                                                    if (tc.name === \"get_directions\" && parsedChunk.result) {\n                                                        // Handle both old wrapped format and new direct format\n                                                        if (typeof parsedChunk.result === \"object\") {\n                                                            const responseKey = \"\".concat(tc.name, \"_response\");\n                                                            if (parsedChunk.result[responseKey]) {\n                                                                // Old wrapped format\n                                                                toolResponse = parsedChunk.result[responseKey];\n                                                                console.log(\"[PAGE.TSX] (Stream Loop) Using wrapped format for directions, toolResponse:\", JSON.stringify(toolResponse).substring(0, 200) + \"...\");\n                                                            } else {\n                                                                // New direct format from FastMCP\n                                                                toolResponse = parsedChunk.result;\n                                                                console.log(\"[PAGE.TSX] (Stream Loop) Using direct format for directions, toolResponse:\", JSON.stringify(toolResponse).substring(0, 200) + \"...\");\n                                                            }\n                                                        }\n                                                    }\n                                                    if (tc.name === \"get_directions\" && toolResponse && toolResponse.status === \"success\" && toolResponse.data && !isError && !isPartial) {\n                                                        console.log(\"[PAGE.TSX] (Final Buffer) Setting directionsData with:\", JSON.stringify(toolResponse.data).substring(0, 200) + \"...\");\n                                                        setDirectionsData(toolResponse.data);\n                                                        setMapDisplayKey((prevKey)=>prevKey + 1);\n                                                        setIsMapSectionVisible(true);\n                                                    } else if (tc.name === \"get_directions\" && !toolResponse) {\n                                                        console.error(\"[PAGE.TSX] (Final Buffer) ERROR: get_directions_response missing!\");\n                                                    }\n                                                    // NEW: Process tool call for preview extraction\n                                                    processToolCallForPreview(updatedToolCall, msg.id);\n                                                    // NEW: Web app detection logic\n                                                    if ((tc.name === \"create_web_app\" || tc.name === \"edit_web_app\") && !isError && !isPartial && tc.result) {\n                                                        try {\n                                                            const resultData = typeof tc.result === \"string\" ? JSON.parse(tc.result) : tc.result;\n                                                            if (resultData.status === \"success\" && resultData.url) {\n                                                                console.log(\"[PAGE.TSX] (Final Buffer) Setting webAppUrl with:\", resultData.url);\n                                                            // This will be set on the message object below\n                                                            }\n                                                        } catch (e) {\n                                                            console.warn(\"[PAGE.TSX] (Final Buffer) Failed to parse web app result:\", e);\n                                                        }\n                                                    }\n                                                    // NEW: Image generation detection logic\n                                                    if (tc.name === \"generate_images_with_prompts\" && !isError && !isPartial && tc.result) {\n                                                        try {\n                                                            const resultData = typeof tc.result === \"string\" ? JSON.parse(tc.result) : tc.result;\n                                                            if (resultData.status === \"success\" && resultData.results) {\n                                                                // Extract all image URLs from the results array\n                                                                const imageUrls = [];\n                                                                resultData.results.forEach((resultArray)=>{\n                                                                    if (Array.isArray(resultArray)) {\n                                                                        imageUrls.push(...resultArray);\n                                                                    }\n                                                                });\n                                                                if (imageUrls.length > 0) {\n                                                                    console.log(\"[PAGE.TSX] (Stream Loop) Setting generatedImageUrls with:\", imageUrls.length, \"images\");\n                                                                // This will be set on the message object below\n                                                                }\n                                                            }\n                                                        } catch (e) {\n                                                            console.warn(\"[PAGE.TSX] (Stream Loop) Failed to parse image generation result:\", e);\n                                                        }\n                                                    }\n                                                    return {\n                                                        ...part,\n                                                        toolCall: updatedToolCall\n                                                    };\n                                                }\n                                                return part;\n                                            });\n                                            if (!matchedToolCallInParts) {\n                                                console.warn(\"[PAGE.TSX] (Final Buffer) Tool call id \".concat(parsedChunk.call_id, \" not found in \").concat(msg.id));\n                                            }\n                                            let toolResponse = null;\n                                            if (parsedChunk.name === \"get_directions\" && parsedChunk.result) {\n                                                if (typeof parsedChunk.result === \"object\") {\n                                                    const responseKey = \"\".concat(parsedChunk.name, \"_response\");\n                                                    if (parsedChunk.result[responseKey]) {\n                                                        toolResponse = parsedChunk.result[responseKey];\n                                                    } else {\n                                                        toolResponse = parsedChunk.result;\n                                                    }\n                                                }\n                                            }\n                                            let finalMsgObject = {\n                                                ...msg,\n                                                parts: newParts,\n                                                thinking: true\n                                            };\n                                            if (parsedChunk.name === \"get_directions\" && toolResponse && !(typeof parsedChunk.is_partial === \"boolean\" && parsedChunk.is_partial) && !(typeof parsedChunk.is_error === \"boolean\" && parsedChunk.is_error) && toolResponse.status === \"success\" && toolResponse.data) {\n                                                finalMsgObject.showMapToggleForThisMessage = true;\n                                                finalMsgObject.directionsData = toolResponse.data;\n                                                console.log(\"[PAGE.TSX] (Final Buffer) Setting message directions data:\", JSON.stringify(toolResponse.data).substring(0, 200) + \"...\");\n                                            }\n                                            // NEW: Web app message object updates\n                                            if ((parsedChunk.name === \"create_web_app\" || parsedChunk.name === \"edit_web_app\") && !(typeof parsedChunk.is_partial === \"boolean\" && parsedChunk.is_partial) && !(typeof parsedChunk.is_error === \"boolean\" && parsedChunk.is_error) && parsedChunk.result) {\n                                                try {\n                                                    const resultData = typeof parsedChunk.result === \"string\" ? JSON.parse(parsedChunk.result) : parsedChunk.result;\n                                                    if (resultData.status === \"success\" && resultData.url) {\n                                                        finalMsgObject.showWebAppForThisMessage = true;\n                                                        finalMsgObject.webAppUrl = resultData.url;\n                                                    }\n                                                } catch (e) {\n                                                    console.warn(\"[PAGE.TSX] (Final Buffer) Failed to parse web app result for message:\", e);\n                                                }\n                                            }\n                                            // NEW: Image generation message object updates\n                                            if (parsedChunk.name === \"generate_images_with_prompts\" && !(typeof parsedChunk.is_partial === \"boolean\" && parsedChunk.is_partial) && !(typeof parsedChunk.is_error === \"boolean\" && parsedChunk.is_error) && parsedChunk.result) {\n                                                try {\n                                                    const resultData = typeof parsedChunk.result === \"string\" ? JSON.parse(parsedChunk.result) : parsedChunk.result;\n                                                    if (resultData.status === \"success\" && resultData.results) {\n                                                        // Extract all image URLs from the results array\n                                                        const imageUrls = [];\n                                                        resultData.results.forEach((resultArray)=>{\n                                                            if (Array.isArray(resultArray)) {\n                                                                imageUrls.push(...resultArray);\n                                                            }\n                                                        });\n                                                        if (imageUrls.length > 0) {\n                                                            finalMsgObject.showImagesForThisMessage = true;\n                                                            finalMsgObject.generatedImageUrls = imageUrls;\n                                                            console.log(\"[PAGE.TSX] (Final Buffer) Setting generatedImageUrls with:\", imageUrls.length, \"images\");\n                                                        }\n                                                    }\n                                                } catch (e) {\n                                                    console.warn(\"[PAGE.TSX] (Final Buffer) Failed to parse image generation result for message:\", e);\n                                                }\n                                            }\n                                            return finalMsgObject;\n                                        }\n                                        return msg;\n                                    }));\n                            } else if (parsedChunk.type === \"tool_sample_text_chunk\" && parsedChunk.parent_tool_call_id && typeof parsedChunk.content === \"string\") {\n                                setMessages((prev)=>prev.map((msg)=>{\n                                        if (msg.id === botMessageId) {\n                                            const newParts = msg.parts.map((part)=>{\n                                                if (part.type === \"tool_call\" && part.toolCall.call_id === parsedChunk.parent_tool_call_id) {\n                                                    const tc = part.toolCall;\n                                                    const currentPairs = tc.sampleCallPairs || [];\n                                                    let newPairs;\n                                                    if (currentPairs.length > 0) {\n                                                        const lastPair = currentPairs[currentPairs.length - 1];\n                                                        // Create new pair object with updated output\n                                                        const updatedLastPair = {\n                                                            ...lastPair,\n                                                            output: (lastPair.output || \"\") + parsedChunk.content\n                                                        };\n                                                        // Create new array with updated last pair\n                                                        newPairs = [\n                                                            ...currentPairs.slice(0, -1),\n                                                            updatedLastPair\n                                                        ];\n                                                    } else {\n                                                        // Create new pair\n                                                        newPairs = [\n                                                            {\n                                                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                                output: parsedChunk.content\n                                                            }\n                                                        ];\n                                                    }\n                                                    console.log(\"[PAGE.TSX] (Final Buffer) Updated sampleCallPairs (output) for \".concat(parsedChunk.parent_tool_call_id, \":\"), JSON.parse(JSON.stringify(newPairs)));\n                                                    return {\n                                                        ...part,\n                                                        toolCall: {\n                                                            ...tc,\n                                                            sampleCallPairs: newPairs\n                                                        }\n                                                    };\n                                                }\n                                                return part;\n                                            });\n                                            return {\n                                                ...msg,\n                                                parts: newParts,\n                                                thinking: true\n                                            };\n                                        }\n                                        return msg;\n                                    }));\n                            } else if (parsedChunk.type === \"tool_sample_thought_chunk\" && parsedChunk.parent_tool_call_id && typeof parsedChunk.content === \"string\") {\n                                setMessages((prev)=>prev.map((msg)=>{\n                                        if (msg.id === botMessageId) {\n                                            const newParts = msg.parts.map((part)=>{\n                                                if (part.type === \"tool_call\" && part.toolCall.call_id === parsedChunk.parent_tool_call_id) {\n                                                    const tc = part.toolCall;\n                                                    const currentPairs = tc.sampleCallPairs || [];\n                                                    let newPairs;\n                                                    // If lastPair exists and is still 'open' (no output yet), append thoughts.\n                                                    // Otherwise, this is a new sampling call's thoughts, so create a new pair.\n                                                    if (currentPairs.length > 0) {\n                                                        const lastPair = currentPairs[currentPairs.length - 1];\n                                                        if (typeof lastPair.output === \"undefined\") {\n                                                            // Update existing pair with thoughts\n                                                            const updatedLastPair = {\n                                                                ...lastPair,\n                                                                thoughts: (lastPair.thoughts || \"\") + parsedChunk.content\n                                                            };\n                                                            newPairs = [\n                                                                ...currentPairs.slice(0, -1),\n                                                                updatedLastPair\n                                                            ];\n                                                        } else {\n                                                            // Create new pair for new sampling call\n                                                            newPairs = [\n                                                                ...currentPairs,\n                                                                {\n                                                                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                                    thoughts: parsedChunk.content\n                                                                }\n                                                            ];\n                                                        }\n                                                    } else {\n                                                        // Create first pair\n                                                        newPairs = [\n                                                            {\n                                                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                                thoughts: parsedChunk.content\n                                                            }\n                                                        ];\n                                                    }\n                                                    console.log(\"[PAGE.TSX] (Final Buffer) Updated sampleCallPairs (thoughts) for \".concat(parsedChunk.parent_tool_call_id, \":\"), JSON.parse(JSON.stringify(newPairs)));\n                                                    return {\n                                                        ...part,\n                                                        toolCall: {\n                                                            ...tc,\n                                                            sampleCallPairs: newPairs\n                                                        }\n                                                    };\n                                                }\n                                                return part;\n                                            });\n                                            return {\n                                                ...msg,\n                                                parts: newParts,\n                                                thinking: true\n                                            };\n                                        }\n                                        return msg;\n                                    }));\n                            } else if (parsedChunk.type === \"stream_end\") {\n                                setMessages((prev)=>prev.map((msg)=>msg.id === botMessageId ? {\n                                            ...msg,\n                                            thinking: false\n                                        } : msg));\n                                setStatus(\"Ready\");\n                            } else if (parsedChunk.type === \"error\" && parsedChunk.content) {\n                                setMessages((prev)=>prev.map((msg)=>{\n                                        if (msg.id === botMessageId) {\n                                            const errorTextPart = {\n                                                type: \"text\",\n                                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                content: '<strong style=\"color: red;\">Stream Error:</strong> '.concat(renderSanitizedMarkdown(parsedChunk.content))\n                                            };\n                                            const newParts = [\n                                                ...msg.parts,\n                                                errorTextPart\n                                            ];\n                                            return {\n                                                ...msg,\n                                                parts: newParts,\n                                                thinking: false,\n                                                is_error_message: true\n                                            };\n                                        }\n                                        return msg;\n                                    }));\n                                setStatus(\"Ready\"); // Reset status after error\n                            }\n                        } catch (err) {\n                            console.error(\"Error parsing final stream chunk JSON:\", err, \"Raw final buffer:\", buffer);\n                        }\n                    }\n                    console.log(\"[PAGE.TSX] HTTP Response Stream Reader finished.\");\n                    setMessages((prev)=>prev.map((msg)=>msg.id === botMessageId && msg.thinking ? {\n                                ...msg,\n                                thinking: false\n                            } : msg));\n                    if (status !== \"Ready\") setStatus(\"Ready\");\n                    break;\n                }\n                buffer += decoder.decode(value, {\n                    stream: true\n                });\n                let newlineIndex;\n                while((newlineIndex = buffer.indexOf(\"\\n\")) >= 0){\n                    const line = buffer.substring(0, newlineIndex);\n                    buffer = buffer.substring(newlineIndex + 1);\n                    if (line.trim() === \"\") continue;\n                    try {\n                        const parsedChunk = JSON.parse(line);\n                        // console.log('[PAGE.TSX] Streamed Chunk:', JSON.stringify(parsedChunk)); // General log exists\n                        if (parsedChunk.type === \"text_chunk\" && parsedChunk.content) {\n                            setMessages((prev)=>prev.map((msg)=>{\n                                    if (msg.id === botMessageId) {\n                                        console.log(\"[PAGE.TSX] Updating message \".concat(msg.id, \" with text_chunk (stream loop). Current parts:\"), JSON.parse(JSON.stringify(msg.parts))); // DEEP COPY LOGGING\n                                        const newParts = [\n                                            ...msg.parts\n                                        ]; // Shallow copy of parts array\n                                        const lastPartIndex = newParts.length > 0 ? newParts.length - 1 : -1;\n                                        const lastPart = lastPartIndex !== -1 ? newParts[lastPartIndex] : null;\n                                        // Normalize the incoming chunk's content.\n                                        // The second argument to normalizeFragment was lastPart.content or \"\" in the original logic.\n                                        const contentFromChunk = normalizeFragment(parsedChunk.content, lastPart && lastPart.type === \"text\" ? lastPart.content : \"\");\n                                        if (lastPart && lastPart.type === \"text\") {\n                                            // Update the last part immutably by creating a new object\n                                            newParts[lastPartIndex] = {\n                                                ...lastPart,\n                                                content: lastPart.content + contentFromChunk\n                                            };\n                                        } else {\n                                            // Add a new text part if no previous text part or parts array is empty\n                                            newParts.push({\n                                                type: \"text\",\n                                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                content: contentFromChunk\n                                            });\n                                        }\n                                        return {\n                                            ...msg,\n                                            parts: newParts,\n                                            thinking: true\n                                        };\n                                    }\n                                    return msg;\n                                }));\n                        } else if (parsedChunk.type === \"thought_summary\" && parsedChunk.content) {\n                            setMessages((prev)=>prev.map((msg)=>{\n                                    if (msg.id === botMessageId) {\n                                        console.log(\"[PAGE.TSX] Updating message \".concat(msg.id, \" with thought_summary. Current parts:\"), JSON.parse(JSON.stringify(msg.parts)));\n                                        const newParts = [\n                                            ...msg.parts\n                                        ];\n                                        const lastPartIndex = newParts.length > 0 ? newParts.length - 1 : -1;\n                                        const lastPart = lastPartIndex !== -1 ? newParts[lastPartIndex] : null;\n                                        const contentFromChunk = normalizeFragment(parsedChunk.content, lastPart && lastPart.type === \"thought_summary\" ? lastPart.content : \"\");\n                                        if (lastPart && lastPart.type === \"thought_summary\") {\n                                            newParts[lastPartIndex] = {\n                                                ...lastPart,\n                                                content: lastPart.content + contentFromChunk\n                                            };\n                                        } else {\n                                            newParts.push({\n                                                type: \"thought_summary\",\n                                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                content: contentFromChunk\n                                            });\n                                        }\n                                        return {\n                                            ...msg,\n                                            parts: newParts,\n                                            thinking: true\n                                        };\n                                    }\n                                    return msg;\n                                }));\n                        } else if (parsedChunk.type === \"tool_call_pending\" && parsedChunk.name && parsedChunk.arguments) {\n                            const call_id_from_chunk = parsedChunk.call_id || \"tool-\".concat((0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])());\n                            setMessages((prev)=>prev.map((msg)=>{\n                                    if (msg.id === botMessageId) {\n                                        const existingToolCallPart = msg.parts.find((part)=>part.type === \"tool_call\" && part.toolCall.call_id === call_id_from_chunk);\n                                        if (existingToolCallPart) {\n                                            console.log(\"[PAGE.TSX] (stream loop) Tool call with ID \".concat(call_id_from_chunk, \" already exists in pending state. Ignoring duplicate pending message.\"));\n                                            return msg;\n                                        }\n                                        const newToolCallData = {\n                                            call_id: call_id_from_chunk,\n                                            name: parsedChunk.name,\n                                            arguments: typeof parsedChunk.arguments === \"string\" ? parsedChunk.arguments : JSON.stringify(parsedChunk.arguments),\n                                            status: \"Pending...\"\n                                        };\n                                        console.log(\"[PAGE.TSX] Tool Call Pending (New):\", JSON.parse(JSON.stringify(newToolCallData)));\n                                        const newParts = [\n                                            ...msg.parts\n                                        ];\n                                        newParts.push({\n                                            type: \"tool_call\",\n                                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                            toolCall: newToolCallData\n                                        });\n                                        newParts.push({\n                                            type: \"text\",\n                                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                            content: \"\"\n                                        });\n                                        return {\n                                            ...msg,\n                                            parts: newParts,\n                                            thinking: true\n                                        };\n                                    }\n                                    return msg;\n                                }));\n                        } else if (parsedChunk.type === \"tool_result\" && parsedChunk.call_id && typeof parsedChunk.result !== \"undefined\") {\n                            console.log(\"[PAGE.TSX] Received tool_result chunk:\", JSON.parse(JSON.stringify(parsedChunk))); // DEEP COPY LOGGING\n                            if (parsedChunk.name === \"get_directions\") {\n                                console.log(\"[PAGE.TSX] RAW get_directions tool_result CHUNK (repeated block):\", JSON.stringify(parsedChunk));\n                            }\n                            // console.log(`[PAGE.TSX] Parsed chunk is_partial value: ${parsedChunk.is_partial}`); // Keep for debugging if needed\n                            setMessages((prev)=>prev.map((msg)=>{\n                                    if (msg.id === botMessageId) {\n                                        console.log(\"[PAGE.TSX] Updating message \".concat(msg.id, \" with tool_result. Current parts:\"), JSON.parse(JSON.stringify(msg.parts))); // DEEP COPY LOGGING\n                                        let matchedToolCallInParts = false;\n                                        const newParts = msg.parts.map((part)=>{\n                                            if (part.type === \"tool_call\" && part.toolCall.call_id === parsedChunk.call_id) {\n                                                matchedToolCallInParts = true;\n                                                const tc = part.toolCall;\n                                                // console.log(`[PAGE.TSX] Existing tool call data for ${tc.call_id}:`, JSON.parse(JSON.stringify(tc)));\n                                                let finalResult = typeof parsedChunk.result === \"string\" ? parsedChunk.result : JSON.stringify(parsedChunk.result);\n                                                const isPartial = typeof parsedChunk.is_partial === \"boolean\" ? parsedChunk.is_partial : false;\n                                                const isError = typeof parsedChunk.is_error === \"boolean\" ? parsedChunk.is_error : false;\n                                                const newStatus = isPartial ? \"Streaming...\" : isError ? \"Error\" : \"Completed\";\n                                                // console.log(`[PAGE.TSX] Updating tool: ${tc.call_id}, New Status: ${newStatus}, Is Partial (derived): ${isPartial}, Is Error (derived): ${isError}`);\n                                                const updatedToolCall = {\n                                                    ...tc,\n                                                    result: isPartial && tc.result && tc.status === \"Streaming...\" ? tc.result + \"\\n---\\n\" + finalResult : finalResult,\n                                                    status: newStatus,\n                                                    is_error: isError,\n                                                    is_partial: isPartial\n                                                };\n                                                // console.log(`[PAGE.TSX] New tool call data for ${tc.call_id}:`, JSON.parse(JSON.stringify(updatedToolCall)));\n                                                // --- NEW: Extract get_directions_response ---\n                                                let toolResponse = null;\n                                                if (tc.name === \"get_directions\" && parsedChunk.result) {\n                                                    // Handle both old wrapped format and new direct format\n                                                    if (typeof parsedChunk.result === \"object\") {\n                                                        const responseKey = \"\".concat(tc.name, \"_response\");\n                                                        if (parsedChunk.result[responseKey]) {\n                                                            // Old wrapped format\n                                                            toolResponse = parsedChunk.result[responseKey];\n                                                            console.log(\"[PAGE.TSX] (Stream Loop) Using wrapped format for directions, toolResponse:\", JSON.stringify(toolResponse).substring(0, 200) + \"...\");\n                                                        } else {\n                                                            // New direct format from FastMCP\n                                                            toolResponse = parsedChunk.result;\n                                                            console.log(\"[PAGE.TSX] (Stream Loop) Using direct format for directions, toolResponse:\", JSON.stringify(toolResponse).substring(0, 200) + \"...\");\n                                                        }\n                                                    }\n                                                }\n                                                // --- END NEW ---\n                                                // If this is the final result for get_directions, set map data\n                                                if (tc.name === \"get_directions\" && toolResponse && toolResponse.status === \"success\" && toolResponse.data && !isError && !isPartial) {\n                                                    console.log(\"[PAGE.TSX] (Stream Loop) Setting directionsData with:\", JSON.stringify(toolResponse.data).substring(0, 200) + \"...\");\n                                                    setDirectionsData(toolResponse.data);\n                                                    setMapDisplayKey((prevKey)=>prevKey + 1);\n                                                    setIsMapSectionVisible(true); // MODIFIED: Show map section automatically\n                                                } else if (tc.name === \"get_directions\" && !toolResponse) {\n                                                    console.error(\"[PAGE.TSX] ERROR (stream loop): get_directions_response missing in parsedChunk.result!\");\n                                                }\n                                                // NEW: Web app detection logic\n                                                if ((tc.name === \"create_web_app\" || tc.name === \"edit_web_app\") && !isError && !isPartial && tc.result) {\n                                                    try {\n                                                        const resultData = typeof tc.result === \"string\" ? JSON.parse(tc.result) : tc.result;\n                                                        if (resultData.status === \"success\" && resultData.url) {\n                                                            console.log(\"[PAGE.TSX] (Final Buffer) Setting webAppUrl with:\", resultData.url);\n                                                        // This will be set on the message object below\n                                                        }\n                                                    } catch (e) {\n                                                        console.warn(\"[PAGE.TSX] (Final Buffer) Failed to parse web app result:\", e);\n                                                    }\n                                                }\n                                                // NEW: Image generation detection logic\n                                                if (tc.name === \"generate_images_with_prompts\" && !isError && !isPartial && tc.result) {\n                                                    try {\n                                                        const resultData = typeof tc.result === \"string\" ? JSON.parse(tc.result) : tc.result;\n                                                        if (resultData.status === \"success\" && resultData.results) {\n                                                            // Extract all image URLs from the results array\n                                                            const imageUrls = [];\n                                                            resultData.results.forEach((resultArray)=>{\n                                                                if (Array.isArray(resultArray)) {\n                                                                    imageUrls.push(...resultArray);\n                                                                }\n                                                            });\n                                                            if (imageUrls.length > 0) {\n                                                                console.log(\"[PAGE.TSX] (Stream Loop) Setting generatedImageUrls with:\", imageUrls.length, \"images\");\n                                                            // This will be set on the message object below\n                                                            }\n                                                        }\n                                                    } catch (e) {\n                                                        console.warn(\"[PAGE.TSX] (Stream Loop) Failed to parse image generation result:\", e);\n                                                    }\n                                                }\n                                                // NEW: Process tool call for preview extraction (streaming loop)\n                                                processToolCallForPreview(updatedToolCall, msg.id);\n                                                return {\n                                                    ...part,\n                                                    toolCall: updatedToolCall\n                                                };\n                                            }\n                                            return part;\n                                        });\n                                        if (!matchedToolCallInParts) {\n                                            console.warn(\"[PAGE.TSX] (stream loop) Tool call with id \".concat(parsedChunk.call_id, \" not found in message \").concat(msg.id, \" parts\"));\n                                        }\n                                        // --- NEW: Attach directionsData to message for rendering ---\n                                        let toolResponse = null;\n                                        if (parsedChunk.name === \"get_directions\" && parsedChunk.result) {\n                                            // Handle both old wrapped format and new direct format\n                                            if (typeof parsedChunk.result === \"object\") {\n                                                const responseKey = \"\".concat(parsedChunk.name, \"_response\");\n                                                if (parsedChunk.result[responseKey]) {\n                                                    // Old wrapped format\n                                                    toolResponse = parsedChunk.result[responseKey];\n                                                    console.log(\"[PAGE.TSX] (Stream Loop Message) Using wrapped format for directions, toolResponse:\", JSON.stringify(toolResponse).substring(0, 200) + \"...\");\n                                                } else {\n                                                    // New direct format from FastMCP\n                                                    toolResponse = parsedChunk.result;\n                                                    console.log(\"[PAGE.TSX] (Stream Loop Message) Using direct format for directions, toolResponse:\", JSON.stringify(toolResponse).substring(0, 200) + \"...\");\n                                                }\n                                            }\n                                        }\n                                        let finalMsgObject = {\n                                            ...msg,\n                                            parts: newParts,\n                                            thinking: true\n                                        };\n                                        if (parsedChunk.name === \"get_directions\" && toolResponse && !(typeof parsedChunk.is_partial === \"boolean\" && parsedChunk.is_partial) && !(typeof parsedChunk.is_error === \"boolean\" && parsedChunk.is_error) && toolResponse.status === \"success\" && toolResponse.data) {\n                                            finalMsgObject.showMapToggleForThisMessage = true;\n                                            finalMsgObject.directionsData = toolResponse.data;\n                                            console.log(\"[PAGE.TSX] (Stream Loop Message) Setting message directions data:\", JSON.stringify(toolResponse.data).substring(0, 200) + \"...\");\n                                        }\n                                        // NEW: Web app message object updates for streaming loop\n                                        if ((parsedChunk.name === \"create_web_app\" || parsedChunk.name === \"edit_web_app\") && !(typeof parsedChunk.is_partial === \"boolean\" && parsedChunk.is_partial) && !(typeof parsedChunk.is_error === \"boolean\" && parsedChunk.is_error) && parsedChunk.result) {\n                                            try {\n                                                const resultData = typeof parsedChunk.result === \"string\" ? JSON.parse(parsedChunk.result) : parsedChunk.result;\n                                                if (resultData.status === \"success\" && resultData.url) {\n                                                    finalMsgObject.showWebAppForThisMessage = true;\n                                                    finalMsgObject.webAppUrl = resultData.url;\n                                                }\n                                            } catch (e) {\n                                                console.warn(\"[PAGE.TSX] (Stream Loop) Failed to parse web app result for message:\", e);\n                                            }\n                                        }\n                                        // NEW: Image generation message object updates\n                                        if (parsedChunk.name === \"generate_images_with_prompts\" && !(typeof parsedChunk.is_partial === \"boolean\" && parsedChunk.is_partial) && !(typeof parsedChunk.is_error === \"boolean\" && parsedChunk.is_error) && parsedChunk.result) {\n                                            try {\n                                                const resultData = typeof parsedChunk.result === \"string\" ? JSON.parse(parsedChunk.result) : parsedChunk.result;\n                                                if (resultData.status === \"success\" && resultData.results) {\n                                                    // Extract all image URLs from the results array\n                                                    const imageUrls = [];\n                                                    resultData.results.forEach((resultArray)=>{\n                                                        if (Array.isArray(resultArray)) {\n                                                            imageUrls.push(...resultArray);\n                                                        }\n                                                    });\n                                                    if (imageUrls.length > 0) {\n                                                        finalMsgObject.showImagesForThisMessage = true;\n                                                        finalMsgObject.generatedImageUrls = imageUrls;\n                                                        console.log(\"[PAGE.TSX] (Final Buffer) Setting generatedImageUrls with:\", imageUrls.length, \"images\");\n                                                    }\n                                                }\n                                            } catch (e) {\n                                                console.warn(\"[PAGE.TSX] (Final Buffer) Failed to parse image generation result for message:\", e);\n                                            }\n                                        }\n                                        return finalMsgObject;\n                                    }\n                                    return msg;\n                                }));\n                        } else if (parsedChunk.type === \"stream_end\") {\n                            console.log(\"[PAGE.TSX] Stream ended for botMessageId:\", botMessageId);\n                            setMessages((prev)=>prev.map((msg)=>msg.id === botMessageId ? {\n                                        ...msg,\n                                        thinking: false\n                                    } : msg));\n                            setStatus(\"Ready\");\n                        } else if (parsedChunk.type === \"error\" && parsedChunk.content) {\n                            console.error(\"[PAGE.TSX] Received stream error chunk:\", parsedChunk);\n                            setMessages((prev)=>prev.map((msg)=>{\n                                    if (msg.id === botMessageId) {\n                                        const errorTextPart = {\n                                            type: \"text\",\n                                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                            content: '<strong style=\"color: red;\">Stream Error:</strong> '.concat(renderSanitizedMarkdown(parsedChunk.content))\n                                        };\n                                        const newParts = [\n                                            ...msg.parts,\n                                            errorTextPart\n                                        ];\n                                        return {\n                                            ...msg,\n                                            parts: newParts,\n                                            thinking: false,\n                                            is_error_message: true\n                                        };\n                                    }\n                                    return msg;\n                                }));\n                            setStatus(\"Ready\"); // Reset status after error\n                        } else if (parsedChunk.type === \"tool_sample_text_chunk\" && parsedChunk.parent_tool_call_id && typeof parsedChunk.content === \"string\") {\n                            setMessages((prev)=>prev.map((msg)=>{\n                                    if (msg.id === botMessageId) {\n                                        const newParts = msg.parts.map((part)=>{\n                                            if (part.type === \"tool_call\" && part.toolCall.call_id === parsedChunk.parent_tool_call_id) {\n                                                const tc = part.toolCall;\n                                                const currentPairs = tc.sampleCallPairs || [];\n                                                let newPairs;\n                                                if (currentPairs.length > 0) {\n                                                    const lastPair = currentPairs[currentPairs.length - 1];\n                                                    // Create new pair object with updated output\n                                                    const updatedLastPair = {\n                                                        ...lastPair,\n                                                        output: (lastPair.output || \"\") + parsedChunk.content\n                                                    };\n                                                    // Create new array with updated last pair\n                                                    newPairs = [\n                                                        ...currentPairs.slice(0, -1),\n                                                        updatedLastPair\n                                                    ];\n                                                } else {\n                                                    // Create new pair\n                                                    newPairs = [\n                                                        {\n                                                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                            output: parsedChunk.content\n                                                        }\n                                                    ];\n                                                }\n                                                console.log(\"[PAGE.TSX] (Stream Line) Updated sampleCallPairs (output) for \".concat(parsedChunk.parent_tool_call_id, \":\"), JSON.parse(JSON.stringify(newPairs)));\n                                                return {\n                                                    ...part,\n                                                    toolCall: {\n                                                        ...tc,\n                                                        sampleCallPairs: newPairs\n                                                    }\n                                                };\n                                            }\n                                            return part;\n                                        });\n                                        return {\n                                            ...msg,\n                                            parts: newParts,\n                                            thinking: true\n                                        };\n                                    }\n                                    return msg;\n                                }));\n                        } else if (parsedChunk.type === \"tool_sample_thought_chunk\" && parsedChunk.parent_tool_call_id && typeof parsedChunk.content === \"string\") {\n                            setMessages((prev)=>prev.map((msg)=>{\n                                    if (msg.id === botMessageId) {\n                                        const newParts = msg.parts.map((part)=>{\n                                            if (part.type === \"tool_call\" && part.toolCall.call_id === parsedChunk.parent_tool_call_id) {\n                                                const tc = part.toolCall;\n                                                const currentPairs = tc.sampleCallPairs || [];\n                                                let newPairs;\n                                                // If lastPair exists and is still 'open' (no output yet), append thoughts.\n                                                // Otherwise, this is a new sampling call's thoughts, so create a new pair.\n                                                if (currentPairs.length > 0) {\n                                                    const lastPair = currentPairs[currentPairs.length - 1];\n                                                    if (typeof lastPair.output === \"undefined\") {\n                                                        // Update existing pair with thoughts\n                                                        const updatedLastPair = {\n                                                            ...lastPair,\n                                                            thoughts: (lastPair.thoughts || \"\") + parsedChunk.content\n                                                        };\n                                                        newPairs = [\n                                                            ...currentPairs.slice(0, -1),\n                                                            updatedLastPair\n                                                        ];\n                                                    } else {\n                                                        // Create new pair for new sampling call\n                                                        newPairs = [\n                                                            ...currentPairs,\n                                                            {\n                                                                id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                                thoughts: parsedChunk.content\n                                                            }\n                                                        ];\n                                                    }\n                                                } else {\n                                                    // Create first pair\n                                                    newPairs = [\n                                                        {\n                                                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                                            thoughts: parsedChunk.content\n                                                        }\n                                                    ];\n                                                }\n                                                console.log(\"[PAGE.TSX] (Stream Line) Updated sampleCallPairs (thoughts) for \".concat(parsedChunk.parent_tool_call_id, \":\"), JSON.parse(JSON.stringify(newPairs)));\n                                                return {\n                                                    ...part,\n                                                    toolCall: {\n                                                        ...tc,\n                                                        sampleCallPairs: newPairs\n                                                    }\n                                                };\n                                            }\n                                            return part;\n                                        });\n                                        return {\n                                            ...msg,\n                                            parts: newParts,\n                                            thinking: true\n                                        };\n                                    }\n                                    return msg;\n                                }));\n                        }\n                    // ---- END: New chunk types for per-line stream processing ----\n                    } catch (err) {\n                        console.error(\"Error parsing stream chunk JSON:\", err, \"Raw line:\", line);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error sending message or processing stream:\", error);\n            const errorContent = error instanceof Error ? error.message : \"Sorry, I encountered an error processing your request.\";\n            const renderedErrorContent = renderSanitizedMarkdown(errorContent);\n            let botMessageFoundAndUpdated = false;\n            setMessages((prev)=>prev.map((msg)=>{\n                    if (msg.id === botMessageId) {\n                        botMessageFoundAndUpdated = true;\n                        const newErrorPart = {\n                            type: \"text\",\n                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                            content: renderedErrorContent\n                        };\n                        const updatedParts = [\n                            ...msg.parts || [],\n                            newErrorPart\n                        ]; // Ensure msg.parts exists\n                        return {\n                            ...msg,\n                            parts: updatedParts,\n                            thinking: false,\n                            is_error_message: true\n                        };\n                    }\n                    return msg;\n                }));\n            if (!botMessageFoundAndUpdated) {\n                setMessages((prevMessages)=>[\n                        ...prevMessages,\n                        {\n                            id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                            sender: \"bot\",\n                            parts: [\n                                {\n                                    type: \"text\",\n                                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(),\n                                    content: renderedErrorContent\n                                }\n                            ],\n                            timestamp: Date.now(),\n                            thinking: false,\n                            is_error_message: true\n                        }\n                    ]);\n            }\n        } finally{}\n    };\n    const handleExamplePromptClick = (title, detail)=>{\n        setUserInput(\"\".concat(title, \" \").concat(detail));\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const viewport = scrollAreaRef.current;\n        if (viewport) {\n            // The viewport itself is the scrollable container in ScrollArea\n            viewport.scrollTop = viewport.scrollHeight;\n        }\n    }, [\n        messages\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const style = document.createElement(\"style\");\n        style.innerHTML = \"\\n      .animated-ellipsis span {\\n        opacity: 0;\\n        animation: an_ellipsis 1.2s infinite;\\n        animation-fill-mode: forwards; /* Keep the final state of the animation */\\n      }\\n      .animated-ellipsis span:nth-child(1) { animation-delay: 0.1s; }\\n      .animated-ellipsis span:nth-child(2) { animation-delay: 0.25s; }\\n      .animated-ellipsis span:nth-child(3) { animation-delay: 0.4s; }\\n      @keyframes an_ellipsis {\\n        0% { opacity: 0; transform: translateY(-0.1em);}\\n        30% { opacity: 1; transform: translateY(0);}\\n        70% { opacity: 1; transform: translateY(0);}\\n        100% { opacity: 0; transform: translateY(0.1em);}\\n      }\\n      /* Add CSS for thought summary details arrow rotation */\\n      .thought-summary-details[open] > summary .details-arrow {\\n        transform: rotate(180deg);\\n      }\\n      /* Add CSS for tool call details arrow rotation */\\n      .tool-call-display[open] > summary .details-arrow {\\n        transform: rotate(180deg);\\n      }\\n      /* Ensure tool call displays don't cause horizontal overflow */\\n      .tool-call-display {\\n        max-width: 100%;\\n        overflow-wrap: break-word;\\n        word-break: break-all;\\n      }\\n      .tool-call-display pre {\\n        max-width: 100%;\\n        overflow-x: auto;\\n        word-break: break-all;\\n        white-space: pre-wrap;\\n        overflow-wrap: anywhere;\\n      }\\n      .tool-call-display .tool-call-content {\\n        max-width: 100%;\\n        overflow-wrap: break-word;\\n      }\\n      /* Add some basic prose styling for markdown content if not already globally available */\\n      .prose {\\n        line-height: 1.35; /* Increased for better readability */\\n        font-size: 0.94rem;\\n        word-wrap: break-word; /* Force word wrapping */\\n        overflow-wrap: break-word; /* Modern equivalent */\\n        word-break: break-word; /* Break long words */\\n      }\\n      .prose p { \\n        margin-bottom: 0.5em; /* Reduced for tighter spacing */\\n        word-wrap: break-word;\\n        overflow-wrap: break-word;\\n      }\\n      /* Specific URL and link handling to prevent overflow */\\n      .prose a {\\n        word-break: break-all; /* Break URLs aggressively */\\n        overflow-wrap: break-word;\\n        hyphens: auto;\\n      }\\n      /* Line clamp utilities for text truncation */\\n      .line-clamp-1 {\\n        overflow: hidden;\\n        display: -webkit-box;\\n        -webkit-box-orient: vertical;\\n        -webkit-line-clamp: 1;\\n      }\\n      .line-clamp-2 {\\n        overflow: hidden;\\n        display: -webkit-box;\\n        -webkit-box-orient: vertical;\\n        -webkit-line-clamp: 2;\\n      }\\n      .line-clamp-3 {\\n        overflow: hidden;\\n        display: -webkit-box;\\n        -webkit-box-orient: vertical;\\n        -webkit-line-clamp: 3;\\n      }\\n      .prose ul {\\n        list-style-type: disc;\\n        margin-block-start: 0;\\n        margin-block-end: 0.5em; /* Reduced */\\n        padding-inline-start: 1.25rem;\\n      }\\n      .prose ul ul {\\n        list-style-type: circle;\\n      }\\n      .prose ul ul ul {\\n        list-style-type: square;\\n      }\\n      .prose ol {\\n        list-style-type: decimal;\\n        margin-block-start: 0;\\n        margin-block-end: 0.5em; /* Reduced */\\n        padding-inline-start: 1.25rem;\\n      }\\n      .prose li p {\\n        display: inline;\\n        margin-bottom: 0.2em;\\n      }\\n      .prose li {\\n        overflow-wrap: break-word;\\n        word-break: break-word; \\n        white-space: normal; \\n      }\\n      .prose pre {\\n        background-color: hsl(var(--muted));\\n        color: hsl(var(--muted-foreground));\\n        padding: 1em;\\n        border-radius: 0.375rem; \\n        overflow-x: auto;\\n        font-size: 0.875em;\\n        border: 1px solid hsl(var(--border));\\n      }\\n      .prose code:not(pre code) {\\n        background-color: hsl(var(--muted));\\n        color: hsl(var(--primary)); /* Using primary color for inline code for better visibility */\\n        padding: 0.2em 0.4em;\\n        margin: 0 0.1em;\\n        font-size: 0.85em;\\n        border-radius: 0.25rem;\\n      }\\n      .dark .prose pre {\\n        background-color: hsl(var(--secondary)); /* A slightly different dark for pre blocks */\\n         border: 1px solid hsl(var(--border));\\n      }\\n       .dark .prose code:not(pre code) {\\n        background-color: hsl(var(--secondary));\\n      }\\n      /* Responsive images in prose */\\n      .prose img {\\n        max-width: 100%; /* Ensure images are responsive by default */\\n        height: auto;    /* Allow image to set its own height based on aspect ratio */\\n        min-height: 150px; /* Reserve some minimum space to reduce layout shift on mobile */\\n        max-height: 350px; /* Prevent images from becoming excessively tall */\\n        object-fit: contain; /* Ensure the image fits within bounds & maintains aspect ratio */\\n        display: block;  /* Allows margin auto to work for centering */\\n        margin-left: auto;\\n        margin-right: auto;\\n        margin-top: 0.5em;\\n        margin-bottom: 0.5em;\\n        border-radius: 0.375rem; /* Add a slight rounding to images */\\n        background-color: hsl(var(--muted-foreground) / 0.05); /* Subtle background for loading state */\\n      }\\n\\n      .dark .prose img {\\n        background-color: hsl(var(--muted-foreground) / 0.1); /* Slightly more visible on dark for loading */\\n      }\\n\\n      /* Video styling to match images */\\n      .prose video {\\n        max-width: 100%;\\n        height: auto;\\n        max-height: 400px;\\n        border-radius: 0.375rem;\\n        margin: 0.5em auto;\\n        display: block;\\n        background-color: hsl(var(--muted-foreground) / 0.05);\\n        border: 1px solid hsl(var(--border));\\n      }\\n\\n      .dark .prose video {\\n        background-color: hsl(var(--muted-foreground) / 0.1);\\n        border: 1px solid hsl(var(--border));\\n      }\\n\\n      @media (min-width: 1024px) { /* Desktop screens */\\n        .prose img {\\n          max-width: 60%; /* Make images smaller on desktop */\\n          max-height: 500px; /* Allow larger images on desktop */\\n        }\\n        \\n        .prose video {\\n          max-width: 70%; /* Make videos slightly larger than images on desktop */\\n          max-height: 600px; /* Allow larger videos on desktop */\\n        }\\n      }\\n    \";\n        document.head.appendChild(style);\n        // Cleanup function to remove the style when the component unmounts\n        return ()=>{\n            document.head.removeChild(style);\n        };\n    }, []); // Empty dependency array ensures this runs only once on mount and unmount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const setVh = ()=>{\n            document.documentElement.style.setProperty(\"--vh\", \"\".concat(window.innerHeight, \"px\"));\n        };\n        window.addEventListener(\"resize\", setVh);\n        setVh();\n        return ()=>window.removeEventListener(\"resize\", setVh);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Force re-render of MapDisplay when appTheme changes to apply new mapId\n        setMapDisplayKey((prevKey)=>prevKey + 1);\n    }, [\n        appTheme\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col h-[calc(var(--vh))] bg-background text-foreground transition-colors duration-300\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                className: \"px-2 py-2 sm:px-4 sm:py-3 border-b border-border flex justify-between items-center bg-muted/40 transition-colors duration-300\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center space-x-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                variant: \"ghost\",\n                                size: \"icon\",\n                                className: \"hover:bg-muted\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                                    className: \"w-5 h-5\"\n                                }, void 0, false, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1611,\n                                    columnNumber: 13\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                lineNumber: 1610,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"relative\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                        value: selectedModel,\n                                        onChange: (e)=>setSelectedModel(e.target.value),\n                                        className: \"bg-background border border-input text-foreground rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-ring hover:bg-muted cursor-pointer appearance-none pr-8 w-auto sm:min-w-[150px]\",\n                                        children: modelOptions.map((option)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                value: option.value,\n                                                children: option.label\n                                            }, option.value, false, {\n                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                lineNumber: 1621,\n                                                columnNumber: 17\n                                            }, this))\n                                    }, void 0, false, {\n                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                        lineNumber: 1615,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                                        className: \"w-4 h-4 absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none text-muted-foreground\"\n                                    }, void 0, false, {\n                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                        lineNumber: 1626,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                lineNumber: 1614,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                        lineNumber: 1609,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center space-x-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_mode_toggle__WEBPACK_IMPORTED_MODULE_2__.ModeToggle, {}, void 0, false, {\n                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                lineNumber: 1630,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                variant: \"ghost\",\n                                size: \"icon\",\n                                className: \"hover:bg-muted\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                                    className: \"w-5 h-5\"\n                                }, void 0, false, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1632,\n                                    columnNumber: 13\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                lineNumber: 1631,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                        lineNumber: 1629,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                lineNumber: 1608,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: \"flex-grow flex flex-col items-center p-2 sm:p-4 relative overflow-hidden transition-colors duration-300\",\n                children: showInitialView ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    id: \"initialView\",\n                    className: \"text-center w-full px-2 flex-grow flex flex-col justify-center items-center\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-3xl sm:text-4xl font-semibold text-foreground mb-2 transition-colors duration-300\",\n                            children: \"AST. Chat\"\n                        }, void 0, false, {\n                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                            lineNumber: 1640,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-md sm:text-lg text-muted-foreground mb-6 sm:mb-10 transition-colors duration-300\",\n                            children: \"How can I help you today?\"\n                        }, void 0, false, {\n                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                            lineNumber: 1643,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 max-w-4xl lg:max-w-5xl xl:max-w-7xl mx-auto w-full\",\n                            children: examplePrompts.map((prompt, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                    variant: \"outline\",\n                                    className: \"h-auto text-left p-3 sm:p-4 border-border rounded-lg shadow hover:shadow-md dark:hover:bg-muted transition\",\n                                    onClick: ()=>handleExamplePromptClick(prompt.title, prompt.detail),\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                            className: \"font-semibold text-foreground text-sm sm:text-base\",\n                                            children: prompt.title\n                                        }, void 0, false, {\n                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                            lineNumber: 1654,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-xs sm:text-sm text-muted-foreground\",\n                                            children: prompt.detail\n                                        }, void 0, false, {\n                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                            lineNumber: 1657,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, index, true, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1648,\n                                    columnNumber: 17\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                            lineNumber: 1646,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                    lineNumber: 1639,\n                    columnNumber: 11\n                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_scroll_area__WEBPACK_IMPORTED_MODULE_5__.ScrollArea, {\n                    className: \"w-full mx-auto flex-grow\",\n                    ref: scrollAreaRef,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        id: \"chatLog\",\n                        className: \"space-y-3 sm:space-y-4 flex flex-col pb-[calc(68px+env(safe-area-inset-bottom))] max-w-4xl lg:max-w-5xl xl:max-w-7xl mx-auto px-2 sm:px-4\",\n                        children: messages.map((msg)=>{\n                            var _msg_directionsData_routes__legs, _msg_directionsData_routes_, _msg_directionsData_routes, _msg_directionsData, _msg_directionsData_routes__legs__duration, _msg_directionsData_routes__legs__distance;\n                            // Define base and conditional classes for the message bubble\n                            let bubbleClasses = \"flex flex-col break-words\"; // Common base for all\n                            let thinkingIndicatorColor = \"text-muted-foreground\"; // Default for thinking indicator\n                            if (msg.sender === \"user\") {\n                                bubbleClasses += \" p-2 rounded-2xl max-w-[95%] sm:max-w-[85%] bg-sky-400 text-sky-900 self-end\";\n                            } else {\n                                if (msg.is_error_message) {\n                                    bubbleClasses += \" px-1 py-1 sm:p-2 rounded-xl max-w-[95%] sm:max-w-[85%] bg-destructive text-destructive-foreground self-start rounded-bl-sm\";\n                                    thinkingIndicatorColor = \"text-destructive-foreground\"; // Match error bubble text\n                                } else {\n                                    // Normal bot message - less \"bubble\" like ChatGPT\n                                    bubbleClasses += \" w-full self-start py-1 sm:py-2 text-foreground\"; // Use page foreground color\n                                    // Add some vertical margin to distinguish bot messages, and horizontal padding for content.\n                                    bubbleClasses += \" my-2 sm:my-3 px-1 sm:px-2\";\n                                    thinkingIndicatorColor = \"text-foreground\"; // Match normal bot text\n                                }\n                            }\n                            // Compute which parts to render: for direction messages, only show text before the get_directions tool call\n                            const partsToRender = msg.directionsData ? (()=>{\n                                const idx = msg.parts.findIndex((p)=>p.type === \"tool_call\" && p.toolCall.name === \"get_directions\");\n                                return idx >= 0 ? msg.parts.slice(0, idx) : msg.parts;\n                            })() : msg.parts;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: bubbleClasses,\n                                children: [\n                                    partsToRender.map((part)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), {\n                                            children: [\n                                                part.type === \"text\" && part.content && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"w-full max-w-full min-w-0\",\n                                                    children: parseTextWithURLs(part.content).map((textPart, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), {\n                                                            children: textPart.type === \"text\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"message-content prose dark:prose-invert w-full max-w-full min-w-0 text-part-fade-in\",\n                                                                style: {\n                                                                    wordBreak: \"break-word\",\n                                                                    overflowWrap: \"anywhere\"\n                                                                },\n                                                                dangerouslySetInnerHTML: {\n                                                                    __html: renderSanitizedMarkdown(textPart.content)\n                                                                }\n                                                            }, \"\".concat(part.id, \"-text-\").concat(index), false, {\n                                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                lineNumber: 1706,\n                                                                columnNumber: 35\n                                                            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_URLPreview__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                                                url: textPart.content,\n                                                                className: \"my-2 w-full max-w-full\"\n                                                            }, \"\".concat(part.id, \"-url-\").concat(index), false, {\n                                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                lineNumber: 1713,\n                                                                columnNumber: 35\n                                                            }, this)\n                                                        }, \"\".concat(part.id, \"-\").concat(index), false, {\n                                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                            lineNumber: 1704,\n                                                            columnNumber: 31\n                                                        }, this))\n                                                }, void 0, false, {\n                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                    lineNumber: 1702,\n                                                    columnNumber: 27\n                                                }, this),\n                                                part.type === \"tool_call\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ToolCallDisplay__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                                                        toolCall: part.toolCall,\n                                                        renderSanitizedMarkdown: renderSanitizedMarkdown\n                                                    }, void 0, false, {\n                                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                        lineNumber: 1725,\n                                                        columnNumber: 29\n                                                    }, this)\n                                                }, void 0, false),\n                                                part.type === \"thought_summary\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"details\", {\n                                                    className: \"thought-summary-details my-2 rounded-lg border border-border bg-muted/20 shadow-sm\",\n                                                    open: false,\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"summary\", {\n                                                            className: \"thought-summary-summary cursor-pointer p-3 list-none flex items-center justify-between text-sm font-medium text-muted-foreground hover:bg-muted/40 rounded-t-lg\",\n                                                            children: [\n                                                                msg.thinking ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"flex items-center\",\n                                                                    children: [\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n                                                                            className: \"w-4 h-4 mr-2 animate-spin\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                            lineNumber: 1737,\n                                                                            columnNumber: 35\n                                                                        }, this),\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                            className: \"italic\",\n                                                                            children: \"AST. thinking\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                            lineNumber: 1738,\n                                                                            columnNumber: 35\n                                                                        }, this)\n                                                                    ]\n                                                                }, void 0, true, {\n                                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                    lineNumber: 1736,\n                                                                    columnNumber: 33\n                                                                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                    className: \"italic\",\n                                                                    children: \"Thought Process\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                    lineNumber: 1741,\n                                                                    columnNumber: 33\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                                                                    className: \"w-5 h-5 transition-transform duration-200 details-arrow\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                    lineNumber: 1743,\n                                                                    columnNumber: 31\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                            lineNumber: 1734,\n                                                            columnNumber: 29\n                                                        }, this),\n                                                        part.content && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \"w-full max-w-full min-w-0 p-3 border-t border-border bg-background rounded-b-lg\",\n                                                            children: parseTextWithURLs(part.content).map((textPart, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), {\n                                                                    children: textPart.type === \"text\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"message-content prose-sm italic text-muted-foreground dark:prose-invert w-full max-w-full min-w-0 text-part-fade-in\",\n                                                                        style: {\n                                                                            wordBreak: \"break-word\",\n                                                                            overflowWrap: \"anywhere\"\n                                                                        },\n                                                                        dangerouslySetInnerHTML: {\n                                                                            __html: renderSanitizedMarkdown(textPart.content)\n                                                                        }\n                                                                    }, \"\".concat(part.id, \"-thought-text-\").concat(index), false, {\n                                                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                        lineNumber: 1750,\n                                                                        columnNumber: 39\n                                                                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_URLPreview__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                                                        url: textPart.content,\n                                                                        className: \"my-2 w-full max-w-full\"\n                                                                    }, \"\".concat(part.id, \"-thought-url-\").concat(index), false, {\n                                                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                        lineNumber: 1757,\n                                                                        columnNumber: 39\n                                                                    }, this)\n                                                                }, \"\".concat(part.id, \"-thought-\").concat(index), false, {\n                                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                                    lineNumber: 1748,\n                                                                    columnNumber: 35\n                                                                }, this))\n                                                        }, void 0, false, {\n                                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                            lineNumber: 1746,\n                                                            columnNumber: 31\n                                                        }, this)\n                                                    ]\n                                                }, \"\".concat(part.id, \"-thought-details\"), true, {\n                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                    lineNumber: 1729,\n                                                    columnNumber: 27\n                                                }, this)\n                                            ]\n                                        }, part.id, true, {\n                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                            lineNumber: 1700,\n                                            columnNumber: 23\n                                        }, this)),\n                                    getPreviewsForMessage(msg.id).map((preview)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ContentPreview__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                                            id: preview.id,\n                                            type: preview.type,\n                                            data: preview.data,\n                                            toolCall: preview.toolCall,\n                                            onUpdate: updatePreview\n                                        }, preview.id, false, {\n                                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                            lineNumber: 1774,\n                                            columnNumber: 23\n                                        }, this)),\n                                    msg.directionsData && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                        children: [\n                                            console.log(\"[PAGE.TSX] Rendering MapDisplay for message\", msg.id, msg.directionsData),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"border rounded-lg shadow-md bg-muted/40 p-0 overflow-hidden mt-2\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MapDisplay__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                                                    directionsResponse: msg.directionsData,\n                                                    googleMapsApiKey: googleMapsApiKey,\n                                                    showTraffic: showTraffic,\n                                                    theme: appTheme === \"dark\" ? _components_MapDisplay__WEBPACK_IMPORTED_MODULE_10__.nightTheme : _components_MapDisplay__WEBPACK_IMPORTED_MODULE_10__.defaultTheme\n                                                }, mapDisplayKey, false, {\n                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                    lineNumber: 1788,\n                                                    columnNumber: 27\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                lineNumber: 1787,\n                                                columnNumber: 25\n                                            }, this),\n                                            ((_msg_directionsData = msg.directionsData) === null || _msg_directionsData === void 0 ? void 0 : (_msg_directionsData_routes = _msg_directionsData.routes) === null || _msg_directionsData_routes === void 0 ? void 0 : (_msg_directionsData_routes_ = _msg_directionsData_routes[0]) === null || _msg_directionsData_routes_ === void 0 ? void 0 : (_msg_directionsData_routes__legs = _msg_directionsData_routes_.legs) === null || _msg_directionsData_routes__legs === void 0 ? void 0 : _msg_directionsData_routes__legs[0]) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"p-2\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_DirectionsSteps__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                                                    steps: msg.directionsData.routes[0].legs[0].steps,\n                                                    totalDuration: (_msg_directionsData_routes__legs__duration = msg.directionsData.routes[0].legs[0].duration) === null || _msg_directionsData_routes__legs__duration === void 0 ? void 0 : _msg_directionsData_routes__legs__duration.text,\n                                                    totalDistance: (_msg_directionsData_routes__legs__distance = msg.directionsData.routes[0].legs[0].distance) === null || _msg_directionsData_routes__legs__distance === void 0 ? void 0 : _msg_directionsData_routes__legs__distance.text\n                                                }, void 0, false, {\n                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                    lineNumber: 1798,\n                                                    columnNumber: 29\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                lineNumber: 1797,\n                                                columnNumber: 27\n                                            }, this)\n                                        ]\n                                    }, void 0, true),\n                                    msg.showImagesForThisMessage && msg.generatedImageUrls && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"mt-4 border rounded-lg shadow-md bg-muted/40 overflow-hidden\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"flex items-center justify-between p-3 bg-background border-b border-border\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                                    className: \"text-sm font-semibold text-foreground\",\n                                                    children: \"Generated Images\"\n                                                }, void 0, false, {\n                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                    lineNumber: 1810,\n                                                    columnNumber: 27\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                lineNumber: 1809,\n                                                columnNumber: 25\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"bg-background\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ImageDisplay__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                                    imageUrls: msg.generatedImageUrls\n                                                }, void 0, false, {\n                                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                    lineNumber: 1813,\n                                                    columnNumber: 27\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                lineNumber: 1812,\n                                                columnNumber: 25\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                        lineNumber: 1808,\n                                        columnNumber: 23\n                                    }, this)\n                                ]\n                            }, msg.id, true, {\n                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                lineNumber: 1695,\n                                columnNumber: 19\n                            }, this);\n                        })\n                    }, void 0, false, {\n                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                        lineNumber: 1666,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                    lineNumber: 1665,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                lineNumber: 1637,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"footer\", {\n                className: \"flex-none px-2 pb-[env(safe-area-inset-bottom)] pt-2 sm:px-4 sm:pb-[env(safe-area-inset-bottom)] sm:pt-3 bg-muted/40 border-t border-border transition-colors duration-300\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"form\", {\n                        onSubmit: handleSend,\n                        className: \"max-w-4xl lg:max-w-5xl xl:max-w-7xl mx-auto\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center bg-background border border-input rounded-xl shadow-sm p-2 transition-colors duration-300 focus-within:ring-2 focus-within:ring-ring\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                    type: \"button\",\n                                    variant: \"ghost\",\n                                    size: \"icon\",\n                                    className: \"text-muted-foreground hover:text-foreground\",\n                                    onClick: ()=>{\n                                        var _fileInputRef_current;\n                                        return (_fileInputRef_current = fileInputRef.current) === null || _fileInputRef_current === void 0 ? void 0 : _fileInputRef_current.click();\n                                    },\n                                    title: \"Attach files\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n                                        className: \"w-5 h-5\"\n                                    }, void 0, false, {\n                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                        lineNumber: 1836,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1828,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                    type: \"file\",\n                                    multiple: true,\n                                    ref: fileInputRef,\n                                    onChange: handleFileSelect,\n                                    style: {\n                                        display: \"none\"\n                                    },\n                                    accept: \"image/*,.heic,.heif,application/pdf,.txt,.md,.py,.js,.html,.css,.json,.csv,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n                                }, void 0, false, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1839,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                    type: \"button\",\n                                    variant: sendLocation ? \"secondary\" : \"ghost\",\n                                    size: \"icon\",\n                                    onClick: ()=>setSendLocation(!sendLocation),\n                                    className: \"mr-2 \".concat(sendLocation ? \"text-primary\" : \"text-muted-foreground\", \" hover:text-foreground\"),\n                                    title: sendLocation ? \"Stop sending location\" : \"Send current location with query\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_22__[\"default\"], {\n                                        className: \"w-5 h-5\"\n                                    }, void 0, false, {\n                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                        lineNumber: 1855,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1847,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_input__WEBPACK_IMPORTED_MODULE_4__.Input, {\n                                    type: \"text\",\n                                    id: \"userInput\",\n                                    value: userInput,\n                                    onChange: (e)=>setUserInput(e.target.value),\n                                    className: \"flex-grow p-2 bg-transparent focus:outline-none border-0 focus:ring-0 placeholder-muted-foreground\",\n                                    placeholder: \"Send a message...\",\n                                    autoComplete: \"off\"\n                                }, void 0, false, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1857,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                    type: \"submit\",\n                                    variant: \"default\",\n                                    size: \"icon\",\n                                    disabled: !(userInput.trim() || selectedFiles.length > 0) || status !== \"Ready\",\n                                    className: \"rounded-lg\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n                                        className: \"w-5 h-5\"\n                                    }, void 0, false, {\n                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                        lineNumber: 1867,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1866,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                            lineNumber: 1827,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                        lineNumber: 1826,\n                        columnNumber: 9\n                    }, this),\n                    selectedFiles.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"max-w-4xl lg:max-w-5xl xl:max-w-7xl mx-auto mt-2 text-xs text-muted-foreground\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"font-medium mb-1\",\n                                children: \"Selected files:\"\n                            }, void 0, false, {\n                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                lineNumber: 1874,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                className: \"list-disc list-inside pl-1 space-y-0.5\",\n                                children: selectedFiles.map((file)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                        className: \"flex items-center justify-between\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                children: [\n                                                    file.name,\n                                                    \" (\",\n                                                    Math.round(file.size / 1024),\n                                                    \" KB)\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                lineNumber: 1878,\n                                                columnNumber: 19\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                                variant: \"ghost\",\n                                                size: \"sm\",\n                                                onClick: ()=>removeSelectedFile(file.name),\n                                                className: \"text-red-500 hover:text-red-700 p-1 h-auto\",\n                                                children: \"Remove\"\n                                            }, void 0, false, {\n                                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                                lineNumber: 1879,\n                                                columnNumber: 19\n                                            }, this)\n                                        ]\n                                    }, file.name, true, {\n                                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                        lineNumber: 1877,\n                                        columnNumber: 17\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                lineNumber: 1875,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                        lineNumber: 1873,\n                        columnNumber: 11\n                    }, this),\n                    fileProcessingStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"max-w-4xl lg:max-w-5xl xl:max-w-7xl mx-auto mt-2 text-xs text-blue-600 dark:text-blue-400\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowUp_ChevronDown_Loader2_MapPin_Menu_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n                                    className: \"w-3 h-3 mr-1 animate-spin\"\n                                }, void 0, false, {\n                                    fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                                    lineNumber: 1891,\n                                    columnNumber: 15\n                                }, this),\n                                fileProcessingStatus\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                            lineNumber: 1890,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                        lineNumber: 1889,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-xs text-muted-foreground/80 text-center mt-2 pb-1\",\n                        children: [\n                            \"Status: \",\n                            status\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                        lineNumber: 1896,\n                        columnNumber: 10\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n                lineNumber: 1825,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/var/www/flask_app/ast_chat/app/page.tsx\",\n        lineNumber: 1607,\n        columnNumber: 5\n    }, this);\n}\n_s(ChatPage, \"Q74xVzF0uMRh4Mhv4bdyKynLDmo=\", false, function() {\n    return [\n        next_themes__WEBPACK_IMPORTED_MODULE_13__.useTheme,\n        _hooks_useContentPreviews__WEBPACK_IMPORTED_MODULE_14__.useContentPreviews\n    ];\n});\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ })

});